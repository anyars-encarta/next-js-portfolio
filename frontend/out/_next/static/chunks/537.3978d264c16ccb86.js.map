{"version":3,"file":"static/chunks/537.3978d264c16ccb86.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js"],"sourcesContent":["import { C } from \"./stegaClean.js\";\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n  return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n  if (!Array.isArray(path))\n    throw new Error(\"Path is not an array\");\n  return path.reduce((target, segment, i) => {\n    const segmentType = typeof segment;\n    if (segmentType === \"number\")\n      return `${target}[${segment}]`;\n    if (segmentType === \"string\")\n      return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    if (isKeySegment(segment) && segment._key)\n      return `${target}[_key==\"${segment._key}\"]`;\n    if (Array.isArray(segment)) {\n      const [from, to] = segment;\n      return `${target}[${from}:${to}]`;\n    }\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n  }, \"\");\n}\nconst ESCAPE = {\n  \"\\f\": \"\\\\f\",\n  \"\\n\": \"\\\\n\",\n  \"\\r\": \"\\\\r\",\n  \"\t\": \"\\\\t\",\n  \"'\": \"\\\\'\",\n  \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n  \"\\\\f\": \"\\f\",\n  \"\\\\n\": `\n`,\n  \"\\\\r\": \"\\r\",\n  \"\\\\t\": \"\t\",\n  \"\\\\'\": \"'\",\n  \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n  return `$${path.map((segment) => typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, (match) => ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n  const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n  let match;\n  for (; (match = parseRe.exec(path)) !== null; ) {\n    if (match[1] !== void 0) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => UNESCAPE[m]);\n      parsed.push(key);\n      continue;\n    }\n    if (match[2] !== void 0) {\n      parsed.push(parseInt(match[2], 10));\n      continue;\n    }\n    if (match[3] !== void 0) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => UNESCAPE[m]);\n      parsed.push({\n        _key,\n        _index: -1\n      });\n      continue;\n    }\n  }\n  return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._key !== \"\")\n      return { _key: segment._key };\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction jsonPathToMappingPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction resolveMapping(resultPath, csm) {\n  if (!(csm != null && csm.mappings))\n    return;\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n  if (csm.mappings[resultMappingPath] !== void 0)\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: \"\"\n    };\n  const mappings = Object.entries(csm.mappings).filter(([key]) => resultMappingPath.startsWith(key)).sort(([key1], [key2]) => key2.length - key1.length);\n  if (mappings.length == 0)\n    return;\n  const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n  return { mapping, matchedPath, pathSuffix };\n}\nfunction isArray(value) {\n  return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n  return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n  return isArray(value) ? value.map((v, idx) => {\n    if (isRecord(v)) {\n      const _key = v._key;\n      if (typeof _key == \"string\")\n        return walkMap(v, mappingFn, path.concat({ _key, _index: idx }));\n    }\n    return walkMap(v, mappingFn, path.concat(idx));\n  }) : isRecord(value) ? Object.fromEntries(\n    Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))])\n  ) : mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n  return walkMap(result, (value, path) => {\n    if (typeof value != \"string\")\n      return value;\n    const resolveMappingResult = resolveMapping(path, csm);\n    if (!resolveMappingResult)\n      return value;\n    const { mapping, matchedPath } = resolveMappingResult;\n    if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\")\n      return value;\n    const sourceDocument = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path], matchPathSegments = parseJsonPath(matchedPath), fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value\n    });\n  });\n}\nconst DRAFTS_PREFIX = \"drafts.\";\nfunction getPublishedId(id) {\n  return id.startsWith(DRAFTS_PREFIX) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n  const {\n    baseUrl,\n    workspace: _workspace = \"default\",\n    tool: _tool = \"default\",\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset\n  } = options;\n  if (!baseUrl)\n    throw new Error(\"baseUrl is required\");\n  if (!path)\n    throw new Error(\"path is required\");\n  if (!_id)\n    throw new Error(\"id is required\");\n  if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\"))\n    throw new Error(\"baseUrl must not end with a slash\");\n  const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath\n  });\n  workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), _id.startsWith(DRAFTS_PREFIX) && searchParams.set(\"isDraft\", \"\");\n  const segments = [baseUrl === \"/\" ? \"\" : baseUrl];\n  workspace && segments.push(workspace);\n  const routerParams = [\n    \"mode=presentation\",\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`\n  ];\n  return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n  let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n  return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? { baseUrl } : { ...studioUrl, baseUrl };\n}\nconst filterDefault = ({ sourcePath, resultPath, value }) => {\n  if (isValidDate(value) || isValidURL(value))\n    return !1;\n  const endPath = sourcePath.at(-1);\n  return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && endPath.startsWith(\"_\") || typeof endPath == \"number\" && sourcePath.at(-2) === \"marks\" || endPath === \"href\" && typeof sourcePath.at(-2) == \"number\" && sourcePath.at(-3) === \"markDefs\" || endPath === \"style\" || endPath === \"listItem\" || sourcePath.some(\n    (path) => path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\"\n  ) || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n}, denylist = /* @__PURE__ */ new Set([\n  \"color\",\n  \"colour\",\n  \"currency\",\n  \"email\",\n  \"format\",\n  \"gid\",\n  \"hex\",\n  \"href\",\n  \"hsl\",\n  \"hsla\",\n  \"icon\",\n  \"id\",\n  \"index\",\n  \"key\",\n  \"language\",\n  \"layout\",\n  \"link\",\n  \"linkAction\",\n  \"locale\",\n  \"lqip\",\n  \"page\",\n  \"path\",\n  \"ref\",\n  \"rgb\",\n  \"rgba\",\n  \"route\",\n  \"secret\",\n  \"slug\",\n  \"status\",\n  \"tag\",\n  \"template\",\n  \"theme\",\n  \"type\",\n  \"unit\",\n  \"url\",\n  \"username\",\n  \"variant\",\n  \"website\"\n]);\nfunction isValidDate(dateString) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n  try {\n    new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch {\n    return !1;\n  }\n  return !0;\n}\nfunction hasTypeLike(path) {\n  return path.some((segment) => typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n  const { filter, logger, enabled } = config;\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\";\n    throw (_a = logger == null ? void 0 : logger.error) == null || _a.call(logger, `[@sanity/client]: ${msg}`, { result, resultSourceMap, config }), new TypeError(msg);\n  }\n  if (!resultSourceMap)\n    return (_b = logger == null ? void 0 : logger.error) == null || _b.call(logger, \"[@sanity/client]: Missing Content Source Map from response body\", {\n      result,\n      resultSourceMap,\n      config\n    }), result;\n  if (!config.studioUrl) {\n    const msg = \"config.studioUrl must be defined\";\n    throw (_c = logger == null ? void 0 : logger.error) == null || _c.call(logger, `[@sanity/client]: ${msg}`, { result, resultSourceMap, config }), new TypeError(msg);\n  }\n  const report = {\n    encoded: [],\n    skipped: []\n  }, resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({ sourcePath, sourceDocument, resultPath, value }) => {\n      if ((typeof filter == \"function\" ? filter({ sourcePath, resultPath, filterDefault, sourceDocument, value }) : filterDefault({ sourcePath, resultPath, filterDefault, sourceDocument, value })) === !1)\n        return logger && report.skipped.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n          length: value.length\n        }), value;\n      logger && report.encoded.push({\n        path: prettyPathForLogging(sourcePath),\n        value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n        length: value.length\n      });\n      const { baseUrl, workspace, tool } = resolveStudioBaseRoute(\n        typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl\n      );\n      if (!baseUrl)\n        return value;\n      const { _id: id, _type: type, _projectId: projectId, _dataset: dataset } = sourceDocument;\n      return C(\n        value,\n        {\n          origin: \"sanity.io\",\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n            ...!config.omitCrossDatasetReferenceData && { dataset, projectId }\n          })\n        },\n        // We use custom logic to determine if we should skip encoding\n        !1\n      );\n    }\n  );\n  if (logger) {\n    const isSkipping = report.skipped.length, isEncoding = report.encoded.length;\n    if ((isSkipping || isEncoding) && ((_d = (logger == null ? void 0 : logger.groupCollapsed) || logger.log) == null || _d(\"[@sanity/client]: Encoding source map into result\"), (_e = logger.log) == null || _e.call(\n      logger,\n      `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`\n    )), report.encoded.length > 0 && ((_f = logger == null ? void 0 : logger.log) == null || _f.call(logger, \"[@sanity/client]: Table of encoded paths\"), (_g = (logger == null ? void 0 : logger.table) || logger.log) == null || _g(report.encoded)), report.skipped.length > 0) {\n      const skipped = /* @__PURE__ */ new Set();\n      for (const { path } of report.skipped)\n        skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n      (_h = logger == null ? void 0 : logger.log) == null || _h.call(logger, \"[@sanity/client]: List of skipped paths\", [...skipped.values()]);\n    }\n    (isSkipping || isEncoding) && ((_i = logger == null ? void 0 : logger.groupEnd) == null || _i.call(logger));\n  }\n  return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n  return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  stegaEncodeSourceMap\n});\nexport {\n  encodeIntoResult,\n  stegaEncodeSourceMap,\n  stegaEncodeSourceMap$1\n};\n//# sourceMappingURL=stegaEncodeSourceMap.js.map\n"],"names":["reKeySegment","toString","path","Array","isArray","reduce","target","segment","i","segmentType","isKeySegment","test","trim","_key","from","to","JSON","stringify","ESCAPE","UNESCAPE","parseJsonPath","match","parsed","parseRe","exec","key","replace","m","push","parseInt","_index","jsonPathToStudioPath","map","isRecord","value","encodeIntoResult","result","csm","encoder","walkMap","mappingFn","v","idx","concat","Object","fromEntries","entries","k","resolveMappingResult","resolveMapping","resultPath","mappings","resultMappingPath","join","mapping","matchedPath","pathSuffix","filter","startsWith","sort","key1","key2","length","substring","type","source","sourceDocument","documents","document","sourcePath","paths","matchPathSegments","slice","DRAFTS_PREFIX","filterDefault","Date","parse","isValidURL","url","URL","endPath","at","some","hasTypeLike","denylist","has","Set","stegaEncodeSourceMap","resultSourceMap","config","_a","_b","_c","_d","_e","_f","_g","_h","_i","logger","enabled","msg","error","call","studioUrl","report","encoded","skipped","resultWithStega","baseUrl","workspace","tool","_id","id","_type","_projectId","projectId","_dataset","dataset","_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__","C","origin","href","createEditUrl","options","_workspace","_tool","endsWith","stringifiedPath","searchParams","URLSearchParams","set","segments","routerParams","encodeURIComponent","omitCrossDatasetReferenceData","isSkipping","isEncoding","groupCollapsed","log","table","add","values","groupEnd","stegaEncodeSourceMap$1","freeze","__proto__"],"sourceRoot":""}