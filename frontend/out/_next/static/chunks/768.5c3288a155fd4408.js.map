{"version":3,"file":"static/chunks/768.5c3288a155fd4408.js","mappings":"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","sources":["webpack://_N_E/./components/ui/Globe.tsx"],"sourcesContent":["\"use client\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Color, Scene, Fog, PerspectiveCamera, Vector3 } from \"three\";\r\nimport ThreeGlobe from \"three-globe\";\r\nimport { useThree, Object3DNode, Canvas, extend } from \"@react-three/fiber\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport countries from \"@/data/globe.json\";\r\ndeclare module \"@react-three/fiber\" {\r\n  interface ThreeElements {\r\n    threeGlobe: Object3DNode<ThreeGlobe, typeof ThreeGlobe>;\r\n  }\r\n}\r\n\r\nextend({ ThreeGlobe });\r\n\r\nconst RING_PROPAGATION_SPEED = 3;\r\nconst aspect = 1.2;\r\nconst cameraZ = 300;\r\n\r\ntype Position = {\r\n  order: number;\r\n  startLat: number;\r\n  startLng: number;\r\n  endLat: number;\r\n  endLng: number;\r\n  arcAlt: number;\r\n  color: string;\r\n};\r\n\r\nexport type GlobeConfig = {\r\n  pointSize?: number;\r\n  globeColor?: string;\r\n  showAtmosphere?: boolean;\r\n  atmosphereColor?: string;\r\n  atmosphereAltitude?: number;\r\n  emissive?: string;\r\n  emissiveIntensity?: number;\r\n  shininess?: number;\r\n  polygonColor?: string;\r\n  ambientLight?: string;\r\n  directionalLeftLight?: string;\r\n  directionalTopLight?: string;\r\n  pointLight?: string;\r\n  arcTime?: number;\r\n  arcLength?: number;\r\n  rings?: number;\r\n  maxRings?: number;\r\n  initialPosition?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  autoRotate?: boolean;\r\n  autoRotateSpeed?: number;\r\n};\r\n\r\ninterface WorldProps {\r\n  globeConfig: GlobeConfig;\r\n  data: Position[];\r\n}\r\n\r\nlet numbersOfRings = [0];\r\n\r\nexport function Globe({ globeConfig, data }: WorldProps) {\r\n  const [globeData, setGlobeData] = useState<\r\n    | {\r\n        size: number;\r\n        order: number;\r\n        color: (t: number) => string;\r\n        lat: number;\r\n        lng: number;\r\n      }[]\r\n    | null\r\n  >(null);\r\n\r\n  const globeRef = useRef<ThreeGlobe | null>(null);\r\n\r\n  const defaultProps = {\r\n    pointSize: 1,\r\n    atmosphereColor: \"#ffffff\",\r\n    showAtmosphere: true,\r\n    atmosphereAltitude: 0.1,\r\n    polygonColor: \"rgba(255,255,255,0.7)\",\r\n    globeColor: \"#1d072e\",\r\n    emissive: \"#000000\",\r\n    emissiveIntensity: 0.1,\r\n    shininess: 0.9,\r\n    arcTime: 2000,\r\n    arcLength: 0.9,\r\n    rings: 1,\r\n    maxRings: 3,\r\n    ...globeConfig,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (globeRef.current) {\r\n      _buildData();\r\n      _buildMaterial();\r\n    }\r\n  }, [globeRef.current]);\r\n\r\n  const _buildMaterial = () => {\r\n    if (!globeRef.current) return;\r\n\r\n    const globeMaterial = globeRef.current.globeMaterial() as unknown as {\r\n      color: Color;\r\n      emissive: Color;\r\n      emissiveIntensity: number;\r\n      shininess: number;\r\n    };\r\n    globeMaterial.color = new Color(globeConfig.globeColor);\r\n    globeMaterial.emissive = new Color(globeConfig.emissive);\r\n    globeMaterial.emissiveIntensity = globeConfig.emissiveIntensity || 0.1;\r\n    globeMaterial.shininess = globeConfig.shininess || 0.9;\r\n  };\r\n\r\n  const _buildData = () => {\r\n    const arcs = data;\r\n    let points = [];\r\n    for (let i = 0; i < arcs.length; i++) {\r\n      const arc = arcs[i];\r\n      const rgb = hexToRgb(arc.color) as { r: number; g: number; b: number };\r\n      points.push({\r\n        size: defaultProps.pointSize,\r\n        order: arc.order,\r\n        color: (t: number) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${1 - t})`,\r\n        lat: arc.startLat,\r\n        lng: arc.startLng,\r\n      });\r\n      points.push({\r\n        size: defaultProps.pointSize,\r\n        order: arc.order,\r\n        color: (t: number) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${1 - t})`,\r\n        lat: arc.endLat,\r\n        lng: arc.endLng,\r\n      });\r\n    }\r\n\r\n    // remove duplicates for same lat and lng\r\n    const filteredPoints = points.filter(\r\n      (v, i, a) =>\r\n        a.findIndex((v2) =>\r\n          [\"lat\", \"lng\"].every(\r\n            (k) => v2[k as \"lat\" | \"lng\"] === v[k as \"lat\" | \"lng\"]\r\n          )\r\n        ) === i\r\n    );\r\n\r\n    setGlobeData(filteredPoints);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (globeRef.current && globeData) {\r\n      globeRef.current\r\n        .hexPolygonsData(countries.features)\r\n        .hexPolygonResolution(3)\r\n        .hexPolygonMargin(0.7)\r\n        .showAtmosphere(defaultProps.showAtmosphere)\r\n        .atmosphereColor(defaultProps.atmosphereColor)\r\n        .atmosphereAltitude(defaultProps.atmosphereAltitude)\r\n        .hexPolygonColor((e) => {\r\n          return defaultProps.polygonColor;\r\n        });\r\n      startAnimation();\r\n    }\r\n  }, [globeData]);\r\n\r\n  const startAnimation = () => {\r\n    if (!globeRef.current || !globeData) return;\r\n\r\n    globeRef.current\r\n      .arcsData(data)\r\n      .arcStartLat((d) => (d as { startLat: number }).startLat * 1)\r\n      .arcStartLng((d) => (d as { startLng: number }).startLng * 1)\r\n      .arcEndLat((d) => (d as { endLat: number }).endLat * 1)\r\n      .arcEndLng((d) => (d as { endLng: number }).endLng * 1)\r\n      .arcColor((e: any) => (e as { color: string }).color)\r\n      .arcAltitude((e) => {\r\n        return (e as { arcAlt: number }).arcAlt * 1;\r\n      })\r\n      .arcStroke((e) => {\r\n        return [0.32, 0.28, 0.3][Math.round(Math.random() * 2)];\r\n      })\r\n      .arcDashLength(defaultProps.arcLength)\r\n      .arcDashInitialGap((e) => (e as { order: number }).order * 1)\r\n      .arcDashGap(15)\r\n      .arcDashAnimateTime((e) => defaultProps.arcTime);\r\n\r\n    globeRef.current\r\n      .pointsData(data)\r\n      .pointColor((e) => (e as { color: string }).color)\r\n      .pointsMerge(true)\r\n      .pointAltitude(0.0)\r\n      .pointRadius(2);\r\n\r\n    globeRef.current\r\n      .ringsData([])\r\n      .ringColor((e: any) => (t: any) => e.color(t))\r\n      .ringMaxRadius(defaultProps.maxRings)\r\n      .ringPropagationSpeed(RING_PROPAGATION_SPEED)\r\n      .ringRepeatPeriod(\r\n        (defaultProps.arcTime * defaultProps.arcLength) / defaultProps.rings\r\n      );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!globeRef.current || !globeData) return;\r\n\r\n    const interval = setInterval(() => {\r\n      if (!globeRef.current || !globeData) return;\r\n      numbersOfRings = genRandomNumbers(\r\n        0,\r\n        data.length,\r\n        Math.floor((data.length * 4) / 5)\r\n      );\r\n\r\n      globeRef.current.ringsData(\r\n        globeData.filter((d, i) => numbersOfRings.includes(i))\r\n      );\r\n    }, 2000);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [globeRef.current, globeData]);\r\n\r\n  return (\r\n    <>\r\n      <threeGlobe ref={globeRef} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport function WebGLRendererConfig() {\r\n  const { gl, size } = useThree();\r\n\r\n  useEffect(() => {\r\n    gl.setPixelRatio(window.devicePixelRatio);\r\n    gl.setSize(size.width, size.height);\r\n    gl.setClearColor(0xffaaff, 0);\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n\r\nexport function World(props: WorldProps) {\r\n  const { globeConfig } = props;\r\n  const scene = new Scene();\r\n  scene.fog = new Fog(0xffffff, 400, 2000);\r\n  return (\r\n    <Canvas scene={scene} camera={new PerspectiveCamera(50, aspect, 180, 1800)}>\r\n      <WebGLRendererConfig />\r\n      <ambientLight color={globeConfig.ambientLight} intensity={0.6} />\r\n      <directionalLight\r\n        color={globeConfig.directionalLeftLight}\r\n        position={new Vector3(-400, 100, 400)}\r\n      />\r\n      <directionalLight\r\n        color={globeConfig.directionalTopLight}\r\n        position={new Vector3(-200, 500, 200)}\r\n      />\r\n      <pointLight\r\n        color={globeConfig.pointLight}\r\n        position={new Vector3(-200, 500, 200)}\r\n        intensity={0.8}\r\n      />\r\n      <Globe {...props} />\r\n      <OrbitControls\r\n        enablePan={false}\r\n        enableZoom={false}\r\n        minDistance={cameraZ}\r\n        maxDistance={cameraZ}\r\n        autoRotateSpeed={1}\r\n        autoRotate={true}\r\n        minPolarAngle={Math.PI / 3.5}\r\n        maxPolarAngle={Math.PI - Math.PI / 3}\r\n      />\r\n    </Canvas>\r\n  );\r\n}\r\n\r\nexport function hexToRgb(hex: string) {\r\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n    return r + r + g + g + b + b;\r\n  });\r\n\r\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result\r\n    ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n      }\r\n    : null;\r\n}\r\n\r\nexport function genRandomNumbers(min: number, max: number, count: number) {\r\n  const arr = [];\r\n  while (arr.length < count) {\r\n    const r = Math.floor(Math.random() * (max - min)) + min;\r\n    if (arr.indexOf(r) === -1) arr.push(r);\r\n  }\r\n\r\n  return arr;\r\n}\r\n"],"names":["extend","ThreeGlobe","numbersOfRings","Globe","param","globeConfig","data","globeData","setGlobeData","useState","globeRef","useRef","defaultProps","pointSize","atmosphereColor","showAtmosphere","atmosphereAltitude","polygonColor","globeColor","emissive","emissiveIntensity","shininess","arcTime","arcLength","rings","maxRings","useEffect","current","_buildData","_buildMaterial","globeMaterial","color","Color","points","i","arcs","length","arc","rgb","hexToRgb","push","size","order","r","g","concat","b","t","lat","startLat","lng","startLng","endLat","endLng","filter","v","a","findIndex","every","v2","k","hexPolygonsData","countries","hexPolygonResolution","hexPolygonMargin","hexPolygonColor","startAnimation","arcsData","arcStartLat","d","arcStartLng","arcEndLat","arcEndLng","arcColor","e","arcAltitude","arcAlt","arcStroke","Math","round","random","arcDashLength","arcDashInitialGap","arcDashGap","arcDashAnimateTime","pointsData","pointColor","pointsMerge","pointAltitude","pointRadius","ringsData","ringColor","ringMaxRadius","ringPropagationSpeed","ringRepeatPeriod","interval","setInterval","genRandomNumbers","floor","includes","clearInterval","jsx_runtime","jsx","Fragment","threeGlobe","ref","WebGLRendererConfig","gl","useThree","setPixelRatio","window","devicePixelRatio","setSize","width","height","setClearColor","World","props","scene","Scene","fog","Fog","jsxs","Canvas","camera","PerspectiveCamera","ambientLight","intensity","directionalLight","directionalLeftLight","position","Vector3","directionalTopLight","pointLight","OrbitControls","enablePan","enableZoom","minDistance","maxDistance","autoRotateSpeed","autoRotate","minPolarAngle","PI","maxPolarAngle","hex","replace","m","result","exec","parseInt","min","max","count","arr","indexOf"],"sourceRoot":""}