{"version":3,"file":"static/chunks/8ef0cbf9-dee78cc47c4051b9.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@sentry-internal/replay/esm/index.js?e7b2"],"sourcesContent":["import { _nullishCoalesce, _optionalChain } from '@sentry/utils';\nimport { addBreadcrumb, getClient, isSentryRequestUrl, addEventProcessor, prepareEvent, getIsolationScope, getCurrentScope, setContext, captureException, getActiveSpan, getRootSpan, spanToJSON, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, parseSampleRate } from '@sentry/core';\nimport { GLOBAL_OBJ, normalize, fill, htmlTreeAsString, browserPerformanceTimeOrigin, logger, uuid4, dropUndefinedKeys, stringMatchesSomePattern, createEnvelope, createEventEnvelopeHeaders, getSdkMetadataForEnvelopeHeader, resolvedSyncPromise, updateRateLimits, isRateLimited, isBrowser, consoleSandbox } from '@sentry/utils';\nimport { setTimeout as setTimeout$2, addPerformanceInstrumentationHandler, addLcpInstrumentationHandler, SENTRY_XHR_DATA_KEY, addClickKeypressInstrumentationHandler, addHistoryInstrumentationHandler } from '@sentry-internal/browser-utils';\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nconst WINDOW = GLOBAL_OBJ ;\n\nconst REPLAY_SESSION_KEY = 'sentryReplaySession';\nconst REPLAY_EVENT_NAME = 'replay_event';\nconst UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session after which recording is paused.\nconst SESSION_IDLE_PAUSE_DURATION = 300000; // 5 minutes in ms\n\n// The idle limit for a session after which the session expires.\nconst SESSION_IDLE_EXPIRE_DURATION = 900000; // 15 minutes in ms\n\n/** Default flush delays */\nconst DEFAULT_FLUSH_MIN_DELAY = 5000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nconst DEFAULT_FLUSH_MAX_DELAY = 5500;\n\n/* How long to wait for error checkouts */\nconst BUFFER_CHECKOUT_TIME = 60000;\n\nconst RETRY_BASE_INTERVAL = 5000;\nconst RETRY_MAX_COUNT = 3;\n\n/* The max (uncompressed) size in bytes of a network body. Any body larger than this will be truncated. */\nconst NETWORK_BODY_MAX_SIZE = 150000;\n\n/* The max size of a single console arg that is captured. Any arg larger than this will be truncated. */\nconst CONSOLE_ARG_MAX_SIZE = 5000;\n\n/* Min. time to wait before we consider something a slow click. */\nconst SLOW_CLICK_THRESHOLD = 3000;\n/* For scroll actions after a click, we only look for a very short time period to detect programmatic scrolling. */\nconst SLOW_CLICK_SCROLL_TIMEOUT = 300;\n\n/** When encountering a total segment size exceeding this size, stop the replay (as we cannot properly ingest it). */\nconst REPLAY_MAX_EVENT_BUFFER_SIZE = 20000000; // ~20MB\n\n/** Replays must be min. 5s long before we send them. */\nconst MIN_REPLAY_DURATION = 4999;\n/* The max. allowed value that the minReplayDuration can be set to. */\nconst MIN_REPLAY_DURATION_LIMIT = 15000;\n\n/** The max. length of a replay. */\nconst MAX_REPLAY_DURATION = 3600000; // 60 minutes in ms;\n\nfunction _nullishCoalesce$1(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }function _optionalChain$5(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var NodeType$1;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType$1 || (NodeType$1 = {}));\n\nfunction isElement$1(n) {\n    return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n    const host = _optionalChain$5([n, 'optionalAccess', _ => _.host]);\n    return Boolean(_optionalChain$5([host, 'optionalAccess', _2 => _2.shadowRoot]) === n);\n}\nfunction isNativeShadowDom(shadowRoot) {\n    return Object.prototype.toString.call(shadowRoot) === '[object ShadowRoot]';\n}\nfunction fixBrowserCompatibilityIssuesInCSS(cssText) {\n    if (cssText.includes(' background-clip: text;') &&\n        !cssText.includes(' -webkit-background-clip: text;')) {\n        cssText = cssText.replace(' background-clip: text;', ' -webkit-background-clip: text; background-clip: text;');\n    }\n    return cssText;\n}\nfunction escapeImportStatement(rule) {\n    const { cssText } = rule;\n    if (cssText.split('\"').length < 3)\n        return cssText;\n    const statement = ['@import', `url(${JSON.stringify(rule.href)})`];\n    if (rule.layerName === '') {\n        statement.push(`layer`);\n    }\n    else if (rule.layerName) {\n        statement.push(`layer(${rule.layerName})`);\n    }\n    if (rule.supportsText) {\n        statement.push(`supports(${rule.supportsText})`);\n    }\n    if (rule.media.length) {\n        statement.push(rule.media.mediaText);\n    }\n    return statement.join(' ') + ';';\n}\nfunction stringifyStylesheet(s) {\n    try {\n        const rules = s.rules || s.cssRules;\n        return rules\n            ? fixBrowserCompatibilityIssuesInCSS(Array.from(rules, stringifyRule).join(''))\n            : null;\n    }\n    catch (error) {\n        return null;\n    }\n}\nfunction stringifyRule(rule) {\n    let importStringified;\n    if (isCSSImportRule(rule)) {\n        try {\n            importStringified =\n                stringifyStylesheet(rule.styleSheet) ||\n                    escapeImportStatement(rule);\n        }\n        catch (error) {\n        }\n    }\n    else if (isCSSStyleRule(rule) && rule.selectorText.includes(':')) {\n        return fixSafariColons(rule.cssText);\n    }\n    return importStringified || rule.cssText;\n}\nfunction fixSafariColons(cssStringified) {\n    const regex = /(\\[(?:[\\w-]+)[^\\\\])(:(?:[\\w-]+)\\])/gm;\n    return cssStringified.replace(regex, '$1\\\\$2');\n}\nfunction isCSSImportRule(rule) {\n    return 'styleSheet' in rule;\n}\nfunction isCSSStyleRule(rule) {\n    return 'selectorText' in rule;\n}\nclass Mirror {\n    constructor() {\n        this.idNodeMap = new Map();\n        this.nodeMetaMap = new WeakMap();\n    }\n    getId(n) {\n        if (!n)\n            return -1;\n        const id = _optionalChain$5([this, 'access', _3 => _3.getMeta, 'call', _4 => _4(n), 'optionalAccess', _5 => _5.id]);\n        return _nullishCoalesce$1(id, () => ( -1));\n    }\n    getNode(id) {\n        return this.idNodeMap.get(id) || null;\n    }\n    getIds() {\n        return Array.from(this.idNodeMap.keys());\n    }\n    getMeta(n) {\n        return this.nodeMetaMap.get(n) || null;\n    }\n    removeNodeFromMap(n) {\n        const id = this.getId(n);\n        this.idNodeMap.delete(id);\n        if (n.childNodes) {\n            n.childNodes.forEach((childNode) => this.removeNodeFromMap(childNode));\n        }\n    }\n    has(id) {\n        return this.idNodeMap.has(id);\n    }\n    hasNode(node) {\n        return this.nodeMetaMap.has(node);\n    }\n    add(n, meta) {\n        const id = meta.id;\n        this.idNodeMap.set(id, n);\n        this.nodeMetaMap.set(n, meta);\n    }\n    replace(id, n) {\n        const oldNode = this.getNode(id);\n        if (oldNode) {\n            const meta = this.nodeMetaMap.get(oldNode);\n            if (meta)\n                this.nodeMetaMap.set(n, meta);\n        }\n        this.idNodeMap.set(id, n);\n    }\n    reset() {\n        this.idNodeMap = new Map();\n        this.nodeMetaMap = new WeakMap();\n    }\n}\nfunction createMirror() {\n    return new Mirror();\n}\nfunction shouldMaskInput({ maskInputOptions, tagName, type, }) {\n    if (tagName === 'OPTION') {\n        tagName = 'SELECT';\n    }\n    return Boolean(maskInputOptions[tagName.toLowerCase()] ||\n        (type && maskInputOptions[type]) ||\n        type === 'password' ||\n        (tagName === 'INPUT' && !type && maskInputOptions['text']));\n}\nfunction maskInputValue({ isMasked, element, value, maskInputFn, }) {\n    let text = value || '';\n    if (!isMasked) {\n        return text;\n    }\n    if (maskInputFn) {\n        text = maskInputFn(text, element);\n    }\n    return '*'.repeat(text.length);\n}\nfunction toLowerCase(str) {\n    return str.toLowerCase();\n}\nfunction toUpperCase(str) {\n    return str.toUpperCase();\n}\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx)\n        return true;\n    const chunkSize = 50;\n    for (let x = 0; x < canvas.width; x += chunkSize) {\n        for (let y = 0; y < canvas.height; y += chunkSize) {\n            const getImageData = ctx.getImageData;\n            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData\n                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]\n                : getImageData;\n            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n            if (pixelBuffer.some((pixel) => pixel !== 0))\n                return false;\n        }\n    }\n    return true;\n}\nfunction getInputType(element) {\n    const type = element.type;\n    return element.hasAttribute('data-rr-is-password')\n        ? 'password'\n        : type\n            ?\n                toLowerCase(type)\n            : null;\n}\nfunction getInputValue(el, tagName, type) {\n    if (tagName === 'INPUT' && (type === 'radio' || type === 'checkbox')) {\n        return el.getAttribute('value') || '';\n    }\n    return el.value;\n}\n\nlet _id = 1;\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\nconst IGNORED_NODE = -2;\nfunction genId() {\n    return _id++;\n}\nfunction getValidTagName(element) {\n    if (element instanceof HTMLFormElement) {\n        return 'form';\n    }\n    const processedTagName = toLowerCase(element.tagName);\n    if (tagNameRegex.test(processedTagName)) {\n        return 'div';\n    }\n    return processedTagName;\n}\nfunction extractOrigin(url) {\n    let origin = '';\n    if (url.indexOf('//') > -1) {\n        origin = url.split('/').slice(0, 3).join('/');\n    }\n    else {\n        origin = url.split('/')[0];\n    }\n    origin = origin.split('?')[0];\n    return origin;\n}\nlet canvasService;\nlet canvasCtx;\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nconst URL_PROTOCOL_MATCH = /^(?:[a-z+]+:)?\\/\\//i;\nconst URL_WWW_MATCH = /^www\\..*/i;\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n        const filePath = path1 || path2 || path3;\n        const maybeQuote = quote1 || quote2 || '';\n        if (!filePath) {\n            return origin;\n        }\n        if (URL_PROTOCOL_MATCH.test(filePath) || URL_WWW_MATCH.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (DATA_URI.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (filePath[0] === '/') {\n            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n        }\n        const stack = href.split('/');\n        const parts = filePath.split('/');\n        stack.pop();\n        for (const part of parts) {\n            if (part === '.') {\n                continue;\n            }\n            else if (part === '..') {\n                stack.pop();\n            }\n            else {\n                stack.push(part);\n            }\n        }\n        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n    });\n}\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n    if (attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    let pos = 0;\n    function collectCharacters(regEx) {\n        let chars;\n        const match = regEx.exec(attributeValue.substring(pos));\n        if (match) {\n            chars = match[0];\n            pos += chars.length;\n            return chars;\n        }\n        return '';\n    }\n    const output = [];\n    while (true) {\n        collectCharacters(SRCSET_COMMAS_OR_SPACES);\n        if (pos >= attributeValue.length) {\n            break;\n        }\n        let url = collectCharacters(SRCSET_NOT_SPACES);\n        if (url.slice(-1) === ',') {\n            url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n            output.push(url);\n        }\n        else {\n            let descriptorsStr = '';\n            url = absoluteToDoc(doc, url);\n            let inParens = false;\n            while (true) {\n                const c = attributeValue.charAt(pos);\n                if (c === '') {\n                    output.push((url + descriptorsStr).trim());\n                    break;\n                }\n                else if (!inParens) {\n                    if (c === ',') {\n                        pos += 1;\n                        output.push((url + descriptorsStr).trim());\n                        break;\n                    }\n                    else if (c === '(') {\n                        inParens = true;\n                    }\n                }\n                else {\n                    if (c === ')') {\n                        inParens = false;\n                    }\n                }\n                descriptorsStr += c;\n                pos += 1;\n            }\n        }\n    }\n    return output.join(', ');\n}\nfunction absoluteToDoc(doc, attributeValue) {\n    if (!attributeValue || attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    const a = doc.createElement('a');\n    a.href = attributeValue;\n    return a.href;\n}\nfunction isSVGElement(el) {\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref() {\n    const a = document.createElement('a');\n    a.href = '';\n    return a.href;\n}\nfunction transformAttribute(doc, tagName, name, value, element, maskAttributeFn) {\n    if (!value) {\n        return value;\n    }\n    if (name === 'src' ||\n        (name === 'href' && !(tagName === 'use' && value[0] === '#'))) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'xlink:href' && value[0] !== '#') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'background' &&\n        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'srcset') {\n        return getAbsoluteSrcsetString(doc, value);\n    }\n    else if (name === 'style') {\n        return absoluteToStylesheet(value, getHref());\n    }\n    else if (tagName === 'object' && name === 'data') {\n        return absoluteToDoc(doc, value);\n    }\n    if (typeof maskAttributeFn === 'function') {\n        return maskAttributeFn(name, value, element);\n    }\n    return value;\n}\nfunction ignoreAttribute(tagName, name, _value) {\n    return (tagName === 'video' || tagName === 'audio') && name === 'autoplay';\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n    try {\n        if (unblockSelector && element.matches(unblockSelector)) {\n            return false;\n        }\n        if (typeof blockClass === 'string') {\n            if (element.classList.contains(blockClass)) {\n                return true;\n            }\n        }\n        else {\n            for (let eIndex = element.classList.length; eIndex--;) {\n                const className = element.classList[eIndex];\n                if (blockClass.test(className)) {\n                    return true;\n                }\n            }\n        }\n        if (blockSelector) {\n            return element.matches(blockSelector);\n        }\n    }\n    catch (e) {\n    }\n    return false;\n}\nfunction elementClassMatchesRegex(el, regex) {\n    for (let eIndex = el.classList.length; eIndex--;) {\n        const className = el.classList[eIndex];\n        if (regex.test(className)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction distanceToMatch(node, matchPredicate, limit = Infinity, distance = 0) {\n    if (!node)\n        return -1;\n    if (node.nodeType !== node.ELEMENT_NODE)\n        return -1;\n    if (distance > limit)\n        return -1;\n    if (matchPredicate(node))\n        return distance;\n    return distanceToMatch(node.parentNode, matchPredicate, limit, distance + 1);\n}\nfunction createMatchPredicate(className, selector) {\n    return (node) => {\n        const el = node;\n        if (el === null)\n            return false;\n        try {\n            if (className) {\n                if (typeof className === 'string') {\n                    if (el.matches(`.${className}`))\n                        return true;\n                }\n                else if (elementClassMatchesRegex(el, className)) {\n                    return true;\n                }\n            }\n            if (selector && el.matches(selector))\n                return true;\n            return false;\n        }\n        catch (e2) {\n            return false;\n        }\n    };\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText) {\n    try {\n        const el = node.nodeType === node.ELEMENT_NODE\n            ? node\n            : node.parentElement;\n        if (el === null)\n            return false;\n        if (el.tagName === 'INPUT') {\n            const autocomplete = el.getAttribute('autocomplete');\n            const disallowedAutocompleteValues = [\n                'current-password',\n                'new-password',\n                'cc-number',\n                'cc-exp',\n                'cc-exp-month',\n                'cc-exp-year',\n                'cc-csc',\n            ];\n            if (disallowedAutocompleteValues.includes(autocomplete)) {\n                return true;\n            }\n        }\n        let maskDistance = -1;\n        let unmaskDistance = -1;\n        if (maskAllText) {\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector));\n            if (unmaskDistance < 0) {\n                return true;\n            }\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector), unmaskDistance >= 0 ? unmaskDistance : Infinity);\n        }\n        else {\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector));\n            if (maskDistance < 0) {\n                return false;\n            }\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector), maskDistance >= 0 ? maskDistance : Infinity);\n        }\n        return maskDistance >= 0\n            ? unmaskDistance >= 0\n                ? maskDistance <= unmaskDistance\n                : true\n            : unmaskDistance >= 0\n                ? false\n                : !!maskAllText;\n    }\n    catch (e) {\n    }\n    return !!maskAllText;\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n    const win = iframeEl.contentWindow;\n    if (!win) {\n        return;\n    }\n    let fired = false;\n    let readyState;\n    try {\n        readyState = win.document.readyState;\n    }\n    catch (error) {\n        return;\n    }\n    if (readyState !== 'complete') {\n        const timer = setTimeout(() => {\n            if (!fired) {\n                listener();\n                fired = true;\n            }\n        }, iframeLoadTimeout);\n        iframeEl.addEventListener('load', () => {\n            clearTimeout(timer);\n            fired = true;\n            listener();\n        });\n        return;\n    }\n    const blankUrl = 'about:blank';\n    if (win.location.href !== blankUrl ||\n        iframeEl.src === blankUrl ||\n        iframeEl.src === '') {\n        setTimeout(listener, 0);\n        return iframeEl.addEventListener('load', listener);\n    }\n    iframeEl.addEventListener('load', listener);\n}\nfunction onceStylesheetLoaded(link, listener, styleSheetLoadTimeout) {\n    let fired = false;\n    let styleSheetLoaded;\n    try {\n        styleSheetLoaded = link.sheet;\n    }\n    catch (error) {\n        return;\n    }\n    if (styleSheetLoaded)\n        return;\n    const timer = setTimeout(() => {\n        if (!fired) {\n            listener();\n            fired = true;\n        }\n    }, styleSheetLoadTimeout);\n    link.addEventListener('load', () => {\n        clearTimeout(timer);\n        fired = true;\n        listener();\n    });\n}\nfunction serializeNode(n, options) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskAttributeFn, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, } = options;\n    const rootId = getRootId(doc, mirror);\n    switch (n.nodeType) {\n        case n.DOCUMENT_NODE:\n            if (n.compatMode !== 'CSS1Compat') {\n                return {\n                    type: NodeType$1.Document,\n                    childNodes: [],\n                    compatMode: n.compatMode,\n                };\n            }\n            else {\n                return {\n                    type: NodeType$1.Document,\n                    childNodes: [],\n                };\n            }\n        case n.DOCUMENT_TYPE_NODE:\n            return {\n                type: NodeType$1.DocumentType,\n                name: n.name,\n                publicId: n.publicId,\n                systemId: n.systemId,\n                rootId,\n            };\n        case n.ELEMENT_NODE:\n            return serializeElementNode(n, {\n                doc,\n                blockClass,\n                blockSelector,\n                unblockSelector,\n                inlineStylesheet,\n                maskAttributeFn,\n                maskInputOptions,\n                maskInputFn,\n                dataURLOptions,\n                inlineImages,\n                recordCanvas,\n                keepIframeSrcFn,\n                newlyAddedElement,\n                rootId,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n            });\n        case n.TEXT_NODE:\n            return serializeTextNode(n, {\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                maskTextFn,\n                maskInputOptions,\n                maskInputFn,\n                rootId,\n            });\n        case n.CDATA_SECTION_NODE:\n            return {\n                type: NodeType$1.CDATA,\n                textContent: '',\n                rootId,\n            };\n        case n.COMMENT_NODE:\n            return {\n                type: NodeType$1.Comment,\n                textContent: n.textContent || '',\n                rootId,\n            };\n        default:\n            return false;\n    }\n}\nfunction getRootId(doc, mirror) {\n    if (!mirror.hasNode(doc))\n        return undefined;\n    const docId = mirror.getId(doc);\n    return docId === 1 ? undefined : docId;\n}\nfunction serializeTextNode(n, options) {\n    const { maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, maskTextFn, maskInputOptions, maskInputFn, rootId, } = options;\n    const parentTagName = n.parentNode && n.parentNode.tagName;\n    let textContent = n.textContent;\n    const isStyle = parentTagName === 'STYLE' ? true : undefined;\n    const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n    const isTextarea = parentTagName === 'TEXTAREA' ? true : undefined;\n    if (isStyle && textContent) {\n        try {\n            if (n.nextSibling || n.previousSibling) {\n            }\n            else if (_optionalChain$5([n, 'access', _6 => _6.parentNode, 'access', _7 => _7.sheet, 'optionalAccess', _8 => _8.cssRules])) {\n                textContent = stringifyStylesheet(n.parentNode.sheet);\n            }\n        }\n        catch (err) {\n            console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n        }\n        textContent = absoluteToStylesheet(textContent, getHref());\n    }\n    if (isScript) {\n        textContent = 'SCRIPT_PLACEHOLDER';\n    }\n    const forceMask = needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText);\n    if (!isStyle && !isScript && !isTextarea && textContent && forceMask) {\n        textContent = maskTextFn\n            ? maskTextFn(textContent, n.parentElement)\n            : textContent.replace(/[\\S]/g, '*');\n    }\n    if (isTextarea && textContent && (maskInputOptions.textarea || forceMask)) {\n        textContent = maskInputFn\n            ? maskInputFn(textContent, n.parentNode)\n            : textContent.replace(/[\\S]/g, '*');\n    }\n    if (parentTagName === 'OPTION' && textContent) {\n        const isInputMasked = shouldMaskInput({\n            type: null,\n            tagName: parentTagName,\n            maskInputOptions,\n        });\n        textContent = maskInputValue({\n            isMasked: needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked),\n            element: n,\n            value: textContent,\n            maskInputFn,\n        });\n    }\n    return {\n        type: NodeType$1.Text,\n        textContent: textContent || '',\n        isStyle,\n        rootId,\n    };\n}\nfunction serializeElementNode(n, options) {\n    const { doc, blockClass, blockSelector, unblockSelector, inlineStylesheet, maskInputOptions = {}, maskAttributeFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, rootId, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, } = options;\n    const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n    const tagName = getValidTagName(n);\n    let attributes = {};\n    const len = n.attributes.length;\n    for (let i = 0; i < len; i++) {\n        const attr = n.attributes[i];\n        if (attr.name && !ignoreAttribute(tagName, attr.name, attr.value)) {\n            attributes[attr.name] = transformAttribute(doc, tagName, toLowerCase(attr.name), attr.value, n, maskAttributeFn);\n        }\n    }\n    if (tagName === 'link' && inlineStylesheet) {\n        const stylesheet = Array.from(doc.styleSheets).find((s) => {\n            return s.href === n.href;\n        });\n        let cssText = null;\n        if (stylesheet) {\n            cssText = stringifyStylesheet(stylesheet);\n        }\n        if (cssText) {\n            delete attributes.rel;\n            delete attributes.href;\n            attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n        }\n    }\n    if (tagName === 'style' &&\n        n.sheet &&\n        !(n.innerText || n.textContent || '').trim().length) {\n        const cssText = stringifyStylesheet(n.sheet);\n        if (cssText) {\n            attributes._cssText = absoluteToStylesheet(cssText, getHref());\n        }\n    }\n    if (tagName === 'input' ||\n        tagName === 'textarea' ||\n        tagName === 'select' ||\n        tagName === 'option') {\n        const el = n;\n        const type = getInputType(el);\n        const value = getInputValue(el, toUpperCase(tagName), type);\n        const checked = el.checked;\n        if (type !== 'submit' && type !== 'button' && value) {\n            const forceMask = needMaskingText(el, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, shouldMaskInput({\n                type,\n                tagName: toUpperCase(tagName),\n                maskInputOptions,\n            }));\n            attributes.value = maskInputValue({\n                isMasked: forceMask,\n                element: el,\n                value,\n                maskInputFn,\n            });\n        }\n        if (checked) {\n            attributes.checked = checked;\n        }\n    }\n    if (tagName === 'option') {\n        if (n.selected && !maskInputOptions['select']) {\n            attributes.selected = true;\n        }\n        else {\n            delete attributes.selected;\n        }\n    }\n    if (tagName === 'canvas' && recordCanvas) {\n        if (n.__context === '2d') {\n            if (!is2DCanvasBlank(n)) {\n                attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            }\n        }\n        else if (!('__context' in n)) {\n            const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            const blankCanvas = document.createElement('canvas');\n            blankCanvas.width = n.width;\n            blankCanvas.height = n.height;\n            const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            if (canvasDataURL !== blankCanvasDataURL) {\n                attributes.rr_dataURL = canvasDataURL;\n            }\n        }\n    }\n    if (tagName === 'img' && inlineImages) {\n        if (!canvasService) {\n            canvasService = doc.createElement('canvas');\n            canvasCtx = canvasService.getContext('2d');\n        }\n        const image = n;\n        const oldValue = image.crossOrigin;\n        image.crossOrigin = 'anonymous';\n        const recordInlineImage = () => {\n            image.removeEventListener('load', recordInlineImage);\n            try {\n                canvasService.width = image.naturalWidth;\n                canvasService.height = image.naturalHeight;\n                canvasCtx.drawImage(image, 0, 0);\n                attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            }\n            catch (err) {\n                console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\n            }\n            oldValue\n                ? (attributes.crossOrigin = oldValue)\n                : image.removeAttribute('crossorigin');\n        };\n        if (image.complete && image.naturalWidth !== 0)\n            recordInlineImage();\n        else\n            image.addEventListener('load', recordInlineImage);\n    }\n    if (tagName === 'audio' || tagName === 'video') {\n        attributes.rr_mediaState = n.paused\n            ? 'paused'\n            : 'played';\n        attributes.rr_mediaCurrentTime = n.currentTime;\n    }\n    if (!newlyAddedElement) {\n        if (n.scrollLeft) {\n            attributes.rr_scrollLeft = n.scrollLeft;\n        }\n        if (n.scrollTop) {\n            attributes.rr_scrollTop = n.scrollTop;\n        }\n    }\n    if (needBlock) {\n        const { width, height } = n.getBoundingClientRect();\n        attributes = {\n            class: attributes.class,\n            rr_width: `${width}px`,\n            rr_height: `${height}px`,\n        };\n    }\n    if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n        if (!n.contentDocument) {\n            attributes.rr_src = attributes.src;\n        }\n        delete attributes.src;\n    }\n    let isCustomElement;\n    try {\n        if (customElements.get(tagName))\n            isCustomElement = true;\n    }\n    catch (e) {\n    }\n    return {\n        type: NodeType$1.Element,\n        tagName,\n        attributes,\n        childNodes: [],\n        isSVG: isSVGElement(n) || undefined,\n        needBlock,\n        rootId,\n        isCustom: isCustomElement,\n    };\n}\nfunction lowerIfExists(maybeAttr) {\n    if (maybeAttr === undefined || maybeAttr === null) {\n        return '';\n    }\n    else {\n        return maybeAttr.toLowerCase();\n    }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n    if (slimDOMOptions.comment && sn.type === NodeType$1.Comment) {\n        return true;\n    }\n    else if (sn.type === NodeType$1.Element) {\n        if (slimDOMOptions.script &&\n            (sn.tagName === 'script' ||\n                (sn.tagName === 'link' &&\n                    (sn.attributes.rel === 'preload' ||\n                        sn.attributes.rel === 'modulepreload') &&\n                    sn.attributes.as === 'script') ||\n                (sn.tagName === 'link' &&\n                    sn.attributes.rel === 'prefetch' &&\n                    typeof sn.attributes.href === 'string' &&\n                    sn.attributes.href.endsWith('.js')))) {\n            return true;\n        }\n        else if (slimDOMOptions.headFavicon &&\n            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||\n                (sn.tagName === 'meta' &&\n                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||\n                        lowerIfExists(sn.attributes.name) === 'application-name' ||\n                        lowerIfExists(sn.attributes.rel) === 'icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {\n            return true;\n        }\n        else if (sn.tagName === 'meta') {\n            if (slimDOMOptions.headMetaDescKeywords &&\n                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaSocial &&\n                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||\n                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||\n                    lowerIfExists(sn.attributes.name) === 'pinterest')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaRobots &&\n                (lowerIfExists(sn.attributes.name) === 'robots' ||\n                    lowerIfExists(sn.attributes.name) === 'googlebot' ||\n                    lowerIfExists(sn.attributes.name) === 'bingbot')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaHttpEquiv &&\n                sn.attributes['http-equiv'] !== undefined) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaAuthorship &&\n                (lowerIfExists(sn.attributes.name) === 'author' ||\n                    lowerIfExists(sn.attributes.name) === 'generator' ||\n                    lowerIfExists(sn.attributes.name) === 'framework' ||\n                    lowerIfExists(sn.attributes.name) === 'publisher' ||\n                    lowerIfExists(sn.attributes.name) === 'progid' ||\n                    lowerIfExists(sn.attributes.property).match(/^article:/) ||\n                    lowerIfExists(sn.attributes.property).match(/^product:/))) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaVerification &&\n                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||\n                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||\n                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||\n                    lowerIfExists(sn.attributes.name) === 'verification' ||\n                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction serializeNodeWithId(n, options) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputOptions = {}, maskAttributeFn, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, onStylesheetLoad, stylesheetLoadTimeout = 5000, keepIframeSrcFn = () => false, newlyAddedElement = false, } = options;\n    let { preserveWhiteSpace = true } = options;\n    const _serializedNode = serializeNode(n, {\n        doc,\n        mirror,\n        blockClass,\n        blockSelector,\n        maskAllText,\n        unblockSelector,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        inlineStylesheet,\n        maskInputOptions,\n        maskAttributeFn,\n        maskTextFn,\n        maskInputFn,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        keepIframeSrcFn,\n        newlyAddedElement,\n    });\n    if (!_serializedNode) {\n        console.warn(n, 'not serialized');\n        return null;\n    }\n    let id;\n    if (mirror.hasNode(n)) {\n        id = mirror.getId(n);\n    }\n    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||\n        (!preserveWhiteSpace &&\n            _serializedNode.type === NodeType$1.Text &&\n            !_serializedNode.isStyle &&\n            !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length)) {\n        id = IGNORED_NODE;\n    }\n    else {\n        id = genId();\n    }\n    const serializedNode = Object.assign(_serializedNode, { id });\n    mirror.add(n, serializedNode);\n    if (id === IGNORED_NODE) {\n        return null;\n    }\n    if (onSerialize) {\n        onSerialize(n);\n    }\n    let recordChild = !skipChild;\n    if (serializedNode.type === NodeType$1.Element) {\n        recordChild = recordChild && !serializedNode.needBlock;\n        delete serializedNode.needBlock;\n        const shadowRoot = n.shadowRoot;\n        if (shadowRoot && isNativeShadowDom(shadowRoot))\n            serializedNode.isShadowHost = true;\n    }\n    if ((serializedNode.type === NodeType$1.Document ||\n        serializedNode.type === NodeType$1.Element) &&\n        recordChild) {\n        if (slimDOMOptions.headWhitespace &&\n            serializedNode.type === NodeType$1.Element &&\n            serializedNode.tagName === 'head') {\n            preserveWhiteSpace = false;\n        }\n        const bypassOptions = {\n            doc,\n            mirror,\n            blockClass,\n            blockSelector,\n            maskAllText,\n            unblockSelector,\n            maskTextClass,\n            unmaskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild,\n            inlineStylesheet,\n            maskInputOptions,\n            maskAttributeFn,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            onStylesheetLoad,\n            stylesheetLoadTimeout,\n            keepIframeSrcFn,\n        };\n        for (const childN of Array.from(n.childNodes)) {\n            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n            if (serializedChildNode) {\n                serializedNode.childNodes.push(serializedChildNode);\n            }\n        }\n        if (isElement$1(n) && n.shadowRoot) {\n            for (const childN of Array.from(n.shadowRoot.childNodes)) {\n                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n                if (serializedChildNode) {\n                    isNativeShadowDom(n.shadowRoot) &&\n                        (serializedChildNode.isShadow = true);\n                    serializedNode.childNodes.push(serializedChildNode);\n                }\n            }\n        }\n    }\n    if (n.parentNode &&\n        isShadowRoot(n.parentNode) &&\n        isNativeShadowDom(n.parentNode)) {\n        serializedNode.isShadow = true;\n    }\n    if (serializedNode.type === NodeType$1.Element &&\n        serializedNode.tagName === 'iframe') {\n        onceIframeLoaded(n, () => {\n            const iframeDoc = n.contentDocument;\n            if (iframeDoc && onIframeLoad) {\n                const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n                    doc: iframeDoc,\n                    mirror,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskAllText,\n                    maskTextClass,\n                    unmaskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputOptions,\n                    maskAttributeFn,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    onStylesheetLoad,\n                    stylesheetLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedIframeNode) {\n                    onIframeLoad(n, serializedIframeNode);\n                }\n            }\n        }, iframeLoadTimeout);\n    }\n    if (serializedNode.type === NodeType$1.Element &&\n        serializedNode.tagName === 'link' &&\n        serializedNode.attributes.rel === 'stylesheet') {\n        onceStylesheetLoaded(n, () => {\n            if (onStylesheetLoad) {\n                const serializedLinkNode = serializeNodeWithId(n, {\n                    doc,\n                    mirror,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskAllText,\n                    maskTextClass,\n                    unmaskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputOptions,\n                    maskAttributeFn,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    onStylesheetLoad,\n                    stylesheetLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedLinkNode) {\n                    onStylesheetLoad(n, serializedLinkNode);\n                }\n            }\n        }, stylesheetLoadTimeout);\n    }\n    return serializedNode;\n}\nfunction snapshot(n, options) {\n    const { mirror = new Mirror(), blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskAllInputs = false, maskAttributeFn, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, onStylesheetLoad, stylesheetLoadTimeout, keepIframeSrcFn = () => false, } = options || {};\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n        }\n        : maskAllInputs === false\n            ? {}\n            : maskAllInputs;\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all'\n        ?\n            {\n                script: true,\n                comment: true,\n                headFavicon: true,\n                headWhitespace: true,\n                headMetaDescKeywords: slimDOM === 'all',\n                headMetaSocial: true,\n                headMetaRobots: true,\n                headMetaHttpEquiv: true,\n                headMetaAuthorship: true,\n                headMetaVerification: true,\n            }\n        : slimDOM === false\n            ? {}\n            : slimDOM;\n    return serializeNodeWithId(n, {\n        doc: n,\n        mirror,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maskAllText,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        skipChild: false,\n        inlineStylesheet,\n        maskInputOptions,\n        maskAttributeFn,\n        maskTextFn,\n        maskInputFn,\n        slimDOMOptions,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        preserveWhiteSpace,\n        onSerialize,\n        onIframeLoad,\n        iframeLoadTimeout,\n        onStylesheetLoad,\n        stylesheetLoadTimeout,\n        keepIframeSrcFn,\n        newlyAddedElement: false,\n    });\n}\n\nfunction _optionalChain$4(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nfunction on(type, fn, target = document) {\n    const options = { capture: true, passive: true };\n    target.addEventListener(type, fn, options);\n    return () => target.removeEventListener(type, fn, options);\n}\nconst DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' +\n    '\\r\\n' +\n    'now you can use replayer.getMirror() to access the mirror instance of a replayer,' +\n    '\\r\\n' +\n    'or you can use record.mirror to access the mirror instance during recording.';\nlet _mirror = {\n    map: {},\n    getId() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return -1;\n    },\n    getNode() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return null;\n    },\n    removeNodeFromMap() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n    has() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return false;\n    },\n    reset() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n    _mirror = new Proxy(_mirror, {\n        get(target, prop, receiver) {\n            if (prop === 'map') {\n                console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n    });\n}\nfunction throttle$1(func, wait, options = {}) {\n    let timeout = null;\n    let previous = 0;\n    return function (...args) {\n        const now = Date.now();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        const context = this;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout$1(timeout);\n                timeout = null;\n            }\n            previous = now;\n            func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout$1(() => {\n                previous = options.leading === false ? 0 : Date.now();\n                timeout = null;\n                func.apply(context, args);\n            }, remaining);\n        }\n    };\n}\nfunction hookSetter(target, key, d, isRevoked, win = window) {\n    const original = win.Object.getOwnPropertyDescriptor(target, key);\n    win.Object.defineProperty(target, key, isRevoked\n        ? d\n        : {\n            set(value) {\n                setTimeout$1(() => {\n                    d.set.call(this, value);\n                }, 0);\n                if (original && original.set) {\n                    original.set.call(this, value);\n                }\n            },\n        });\n    return () => hookSetter(target, key, original || {}, true);\n}\nfunction patch(source, name, replacement) {\n    try {\n        if (!(name in source)) {\n            return () => {\n            };\n        }\n        const original = source[name];\n        const wrapped = replacement(original);\n        if (typeof wrapped === 'function') {\n            wrapped.prototype = wrapped.prototype || {};\n            Object.defineProperties(wrapped, {\n                __rrweb_original__: {\n                    enumerable: false,\n                    value: original,\n                },\n            });\n        }\n        source[name] = wrapped;\n        return () => {\n            source[name] = original;\n        };\n    }\n    catch (e2) {\n        return () => {\n        };\n    }\n}\nlet nowTimestamp = Date.now;\nif (!(/[1-9][0-9]{12}/.test(Date.now().toString()))) {\n    nowTimestamp = () => new Date().getTime();\n}\nfunction getWindowScroll(win) {\n    const doc = win.document;\n    return {\n        left: doc.scrollingElement\n            ? doc.scrollingElement.scrollLeft\n            : win.pageXOffset !== undefined\n                ? win.pageXOffset\n                : _optionalChain$4([doc, 'optionalAccess', _ => _.documentElement, 'access', _2 => _2.scrollLeft]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _3 => _3.body, 'optionalAccess', _4 => _4.parentElement, 'optionalAccess', _5 => _5.scrollLeft]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _6 => _6.body, 'optionalAccess', _7 => _7.scrollLeft]) ||\n                    0,\n        top: doc.scrollingElement\n            ? doc.scrollingElement.scrollTop\n            : win.pageYOffset !== undefined\n                ? win.pageYOffset\n                : _optionalChain$4([doc, 'optionalAccess', _8 => _8.documentElement, 'access', _9 => _9.scrollTop]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _10 => _10.body, 'optionalAccess', _11 => _11.parentElement, 'optionalAccess', _12 => _12.scrollTop]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _13 => _13.body, 'optionalAccess', _14 => _14.scrollTop]) ||\n                    0,\n    };\n}\nfunction getWindowHeight() {\n    return (window.innerHeight ||\n        (document.documentElement && document.documentElement.clientHeight) ||\n        (document.body && document.body.clientHeight));\n}\nfunction getWindowWidth() {\n    return (window.innerWidth ||\n        (document.documentElement && document.documentElement.clientWidth) ||\n        (document.body && document.body.clientWidth));\n}\nfunction closestElementOfNode(node) {\n    if (!node) {\n        return null;\n    }\n    const el = node.nodeType === node.ELEMENT_NODE\n        ? node\n        : node.parentElement;\n    return el;\n}\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector, checkAncestors) {\n    if (!node) {\n        return false;\n    }\n    const el = closestElementOfNode(node);\n    if (!el) {\n        return false;\n    }\n    const blockedPredicate = createMatchPredicate(blockClass, blockSelector);\n    if (!checkAncestors) {\n        const isUnblocked = unblockSelector && el.matches(unblockSelector);\n        return blockedPredicate(el) && !isUnblocked;\n    }\n    const blockDistance = distanceToMatch(el, blockedPredicate);\n    let unblockDistance = -1;\n    if (blockDistance < 0) {\n        return false;\n    }\n    if (unblockSelector) {\n        unblockDistance = distanceToMatch(el, createMatchPredicate(null, unblockSelector));\n    }\n    if (blockDistance > -1 && unblockDistance < 0) {\n        return true;\n    }\n    return blockDistance < unblockDistance;\n}\nfunction isSerialized(n, mirror) {\n    return mirror.getId(n) !== -1;\n}\nfunction isIgnored(n, mirror) {\n    return mirror.getId(n) === IGNORED_NODE;\n}\nfunction isAncestorRemoved(target, mirror) {\n    if (isShadowRoot(target)) {\n        return false;\n    }\n    const id = mirror.getId(target);\n    if (!mirror.has(id)) {\n        return true;\n    }\n    if (target.parentNode &&\n        target.parentNode.nodeType === target.DOCUMENT_NODE) {\n        return false;\n    }\n    if (!target.parentNode) {\n        return true;\n    }\n    return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction legacy_isTouchEvent(event) {\n    return Boolean(event.changedTouches);\n}\nfunction polyfill(win = window) {\n    if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n        win.NodeList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n        win.DOMTokenList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if (!Node.prototype.contains) {\n        Node.prototype.contains = (...args) => {\n            let node = args[0];\n            if (!(0 in args)) {\n                throw new TypeError('1 argument is required');\n            }\n            do {\n                if (this === node) {\n                    return true;\n                }\n            } while ((node = node && node.parentNode));\n            return false;\n        };\n    }\n}\nfunction isSerializedIframe(n, mirror) {\n    return Boolean(n.nodeName === 'IFRAME' && mirror.getMeta(n));\n}\nfunction isSerializedStylesheet(n, mirror) {\n    return Boolean(n.nodeName === 'LINK' &&\n        n.nodeType === n.ELEMENT_NODE &&\n        n.getAttribute &&\n        n.getAttribute('rel') === 'stylesheet' &&\n        mirror.getMeta(n));\n}\nfunction hasShadowRoot(n) {\n    return Boolean(_optionalChain$4([n, 'optionalAccess', _18 => _18.shadowRoot]));\n}\nclass StyleSheetMirror {\n    constructor() {\n        this.id = 1;\n        this.styleIDMap = new WeakMap();\n        this.idStyleMap = new Map();\n    }\n    getId(stylesheet) {\n        return _nullishCoalesce(this.styleIDMap.get(stylesheet), () => ( -1));\n    }\n    has(stylesheet) {\n        return this.styleIDMap.has(stylesheet);\n    }\n    add(stylesheet, id) {\n        if (this.has(stylesheet))\n            return this.getId(stylesheet);\n        let newId;\n        if (id === undefined) {\n            newId = this.id++;\n        }\n        else\n            newId = id;\n        this.styleIDMap.set(stylesheet, newId);\n        this.idStyleMap.set(newId, stylesheet);\n        return newId;\n    }\n    getStyle(id) {\n        return this.idStyleMap.get(id) || null;\n    }\n    reset() {\n        this.styleIDMap = new WeakMap();\n        this.idStyleMap = new Map();\n        this.id = 1;\n    }\n    generateId() {\n        return this.id++;\n    }\n}\nfunction getShadowHost(n) {\n    let shadowHost = null;\n    if (_optionalChain$4([n, 'access', _19 => _19.getRootNode, 'optionalCall', _20 => _20(), 'optionalAccess', _21 => _21.nodeType]) === Node.DOCUMENT_FRAGMENT_NODE &&\n        n.getRootNode().host)\n        shadowHost = n.getRootNode().host;\n    return shadowHost;\n}\nfunction getRootShadowHost(n) {\n    let rootShadowHost = n;\n    let shadowHost;\n    while ((shadowHost = getShadowHost(rootShadowHost)))\n        rootShadowHost = shadowHost;\n    return rootShadowHost;\n}\nfunction shadowHostInDom(n) {\n    const doc = n.ownerDocument;\n    if (!doc)\n        return false;\n    const shadowHost = getRootShadowHost(n);\n    return doc.contains(shadowHost);\n}\nfunction inDom(n) {\n    const doc = n.ownerDocument;\n    if (!doc)\n        return false;\n    return doc.contains(n) || shadowHostInDom(n);\n}\nconst cachedImplementations = {};\nfunction getImplementation(name) {\n    const cached = cachedImplementations[name];\n    if (cached) {\n        return cached;\n    }\n    const document = window.document;\n    let impl = window[name];\n    if (document && typeof document.createElement === 'function') {\n        try {\n            const sandbox = document.createElement('iframe');\n            sandbox.hidden = true;\n            document.head.appendChild(sandbox);\n            const contentWindow = sandbox.contentWindow;\n            if (contentWindow && contentWindow[name]) {\n                impl =\n                    contentWindow[name];\n            }\n            document.head.removeChild(sandbox);\n        }\n        catch (e) {\n        }\n    }\n    return (cachedImplementations[name] = impl.bind(window));\n}\nfunction onRequestAnimationFrame(...rest) {\n    return getImplementation('requestAnimationFrame')(...rest);\n}\nfunction setTimeout$1(...rest) {\n    return getImplementation('setTimeout')(...rest);\n}\nfunction clearTimeout$1(...rest) {\n    return getImplementation('clearTimeout')(...rest);\n}\n\nvar EventType = /* @__PURE__ */ ((EventType2) => {\n  EventType2[EventType2[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n  EventType2[EventType2[\"Load\"] = 1] = \"Load\";\n  EventType2[EventType2[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n  EventType2[EventType2[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n  EventType2[EventType2[\"Meta\"] = 4] = \"Meta\";\n  EventType2[EventType2[\"Custom\"] = 5] = \"Custom\";\n  EventType2[EventType2[\"Plugin\"] = 6] = \"Plugin\";\n  return EventType2;\n})(EventType || {});\nvar IncrementalSource = /* @__PURE__ */ ((IncrementalSource2) => {\n  IncrementalSource2[IncrementalSource2[\"Mutation\"] = 0] = \"Mutation\";\n  IncrementalSource2[IncrementalSource2[\"MouseMove\"] = 1] = \"MouseMove\";\n  IncrementalSource2[IncrementalSource2[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n  IncrementalSource2[IncrementalSource2[\"Scroll\"] = 3] = \"Scroll\";\n  IncrementalSource2[IncrementalSource2[\"ViewportResize\"] = 4] = \"ViewportResize\";\n  IncrementalSource2[IncrementalSource2[\"Input\"] = 5] = \"Input\";\n  IncrementalSource2[IncrementalSource2[\"TouchMove\"] = 6] = \"TouchMove\";\n  IncrementalSource2[IncrementalSource2[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n  IncrementalSource2[IncrementalSource2[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n  IncrementalSource2[IncrementalSource2[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n  IncrementalSource2[IncrementalSource2[\"Font\"] = 10] = \"Font\";\n  IncrementalSource2[IncrementalSource2[\"Log\"] = 11] = \"Log\";\n  IncrementalSource2[IncrementalSource2[\"Drag\"] = 12] = \"Drag\";\n  IncrementalSource2[IncrementalSource2[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n  IncrementalSource2[IncrementalSource2[\"Selection\"] = 14] = \"Selection\";\n  IncrementalSource2[IncrementalSource2[\"AdoptedStyleSheet\"] = 15] = \"AdoptedStyleSheet\";\n  IncrementalSource2[IncrementalSource2[\"CustomElement\"] = 16] = \"CustomElement\";\n  return IncrementalSource2;\n})(IncrementalSource || {});\nvar MouseInteractions = /* @__PURE__ */ ((MouseInteractions2) => {\n  MouseInteractions2[MouseInteractions2[\"MouseUp\"] = 0] = \"MouseUp\";\n  MouseInteractions2[MouseInteractions2[\"MouseDown\"] = 1] = \"MouseDown\";\n  MouseInteractions2[MouseInteractions2[\"Click\"] = 2] = \"Click\";\n  MouseInteractions2[MouseInteractions2[\"ContextMenu\"] = 3] = \"ContextMenu\";\n  MouseInteractions2[MouseInteractions2[\"DblClick\"] = 4] = \"DblClick\";\n  MouseInteractions2[MouseInteractions2[\"Focus\"] = 5] = \"Focus\";\n  MouseInteractions2[MouseInteractions2[\"Blur\"] = 6] = \"Blur\";\n  MouseInteractions2[MouseInteractions2[\"TouchStart\"] = 7] = \"TouchStart\";\n  MouseInteractions2[MouseInteractions2[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n  MouseInteractions2[MouseInteractions2[\"TouchEnd\"] = 9] = \"TouchEnd\";\n  MouseInteractions2[MouseInteractions2[\"TouchCancel\"] = 10] = \"TouchCancel\";\n  return MouseInteractions2;\n})(MouseInteractions || {});\nvar PointerTypes = /* @__PURE__ */ ((PointerTypes2) => {\n  PointerTypes2[PointerTypes2[\"Mouse\"] = 0] = \"Mouse\";\n  PointerTypes2[PointerTypes2[\"Pen\"] = 1] = \"Pen\";\n  PointerTypes2[PointerTypes2[\"Touch\"] = 2] = \"Touch\";\n  return PointerTypes2;\n})(PointerTypes || {});\n\nfunction _optionalChain$3(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nfunction isNodeInLinkedList(n) {\n    return '__ln' in n;\n}\nclass DoubleLinkedList {\n    constructor() {\n        this.length = 0;\n        this.head = null;\n        this.tail = null;\n    }\n    get(position) {\n        if (position >= this.length) {\n            throw new Error('Position outside of list range');\n        }\n        let current = this.head;\n        for (let index = 0; index < position; index++) {\n            current = _optionalChain$3([current, 'optionalAccess', _ => _.next]) || null;\n        }\n        return current;\n    }\n    addNode(n) {\n        const node = {\n            value: n,\n            previous: null,\n            next: null,\n        };\n        n.__ln = node;\n        if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n            const current = n.previousSibling.__ln.next;\n            node.next = current;\n            node.previous = n.previousSibling.__ln;\n            n.previousSibling.__ln.next = node;\n            if (current) {\n                current.previous = node;\n            }\n        }\n        else if (n.nextSibling &&\n            isNodeInLinkedList(n.nextSibling) &&\n            n.nextSibling.__ln.previous) {\n            const current = n.nextSibling.__ln.previous;\n            node.previous = current;\n            node.next = n.nextSibling.__ln;\n            n.nextSibling.__ln.previous = node;\n            if (current) {\n                current.next = node;\n            }\n        }\n        else {\n            if (this.head) {\n                this.head.previous = node;\n            }\n            node.next = this.head;\n            this.head = node;\n        }\n        if (node.next === null) {\n            this.tail = node;\n        }\n        this.length++;\n    }\n    removeNode(n) {\n        const current = n.__ln;\n        if (!this.head) {\n            return;\n        }\n        if (!current.previous) {\n            this.head = current.next;\n            if (this.head) {\n                this.head.previous = null;\n            }\n            else {\n                this.tail = null;\n            }\n        }\n        else {\n            current.previous.next = current.next;\n            if (current.next) {\n                current.next.previous = current.previous;\n            }\n            else {\n                this.tail = current.previous;\n            }\n        }\n        if (n.__ln) {\n            delete n.__ln;\n        }\n        this.length--;\n    }\n}\nconst moveKey = (id, parentId) => `${id}@${parentId}`;\nclass MutationBuffer {\n    constructor() {\n        this.frozen = false;\n        this.locked = false;\n        this.texts = [];\n        this.attributes = [];\n        this.attributeMap = new WeakMap();\n        this.removes = [];\n        this.mapRemoves = [];\n        this.movedMap = {};\n        this.addedSet = new Set();\n        this.movedSet = new Set();\n        this.droppedSet = new Set();\n        this.processMutations = (mutations) => {\n            mutations.forEach(this.processMutation);\n            this.emit();\n        };\n        this.emit = () => {\n            if (this.frozen || this.locked) {\n                return;\n            }\n            const adds = [];\n            const addedIds = new Set();\n            const addList = new DoubleLinkedList();\n            const getNextId = (n) => {\n                let ns = n;\n                let nextId = IGNORED_NODE;\n                while (nextId === IGNORED_NODE) {\n                    ns = ns && ns.nextSibling;\n                    nextId = ns && this.mirror.getId(ns);\n                }\n                return nextId;\n            };\n            const pushAdd = (n) => {\n                if (!n.parentNode || !inDom(n)) {\n                    return;\n                }\n                const parentId = isShadowRoot(n.parentNode)\n                    ? this.mirror.getId(getShadowHost(n))\n                    : this.mirror.getId(n.parentNode);\n                const nextId = getNextId(n);\n                if (parentId === -1 || nextId === -1) {\n                    return addList.addNode(n);\n                }\n                const sn = serializeNodeWithId(n, {\n                    doc: this.doc,\n                    mirror: this.mirror,\n                    blockClass: this.blockClass,\n                    blockSelector: this.blockSelector,\n                    maskAllText: this.maskAllText,\n                    unblockSelector: this.unblockSelector,\n                    maskTextClass: this.maskTextClass,\n                    unmaskTextClass: this.unmaskTextClass,\n                    maskTextSelector: this.maskTextSelector,\n                    unmaskTextSelector: this.unmaskTextSelector,\n                    skipChild: true,\n                    newlyAddedElement: true,\n                    inlineStylesheet: this.inlineStylesheet,\n                    maskInputOptions: this.maskInputOptions,\n                    maskAttributeFn: this.maskAttributeFn,\n                    maskTextFn: this.maskTextFn,\n                    maskInputFn: this.maskInputFn,\n                    slimDOMOptions: this.slimDOMOptions,\n                    dataURLOptions: this.dataURLOptions,\n                    recordCanvas: this.recordCanvas,\n                    inlineImages: this.inlineImages,\n                    onSerialize: (currentN) => {\n                        if (isSerializedIframe(currentN, this.mirror)) {\n                            this.iframeManager.addIframe(currentN);\n                        }\n                        if (isSerializedStylesheet(currentN, this.mirror)) {\n                            this.stylesheetManager.trackLinkElement(currentN);\n                        }\n                        if (hasShadowRoot(n)) {\n                            this.shadowDomManager.addShadowRoot(n.shadowRoot, this.doc);\n                        }\n                    },\n                    onIframeLoad: (iframe, childSn) => {\n                        this.iframeManager.attachIframe(iframe, childSn);\n                        this.shadowDomManager.observeAttachShadow(iframe);\n                    },\n                    onStylesheetLoad: (link, childSn) => {\n                        this.stylesheetManager.attachLinkElement(link, childSn);\n                    },\n                });\n                if (sn) {\n                    adds.push({\n                        parentId,\n                        nextId,\n                        node: sn,\n                    });\n                    addedIds.add(sn.id);\n                }\n            };\n            while (this.mapRemoves.length) {\n                this.mirror.removeNodeFromMap(this.mapRemoves.shift());\n            }\n            for (const n of this.movedSet) {\n                if (isParentRemoved(this.removes, n, this.mirror) &&\n                    !this.movedSet.has(n.parentNode)) {\n                    continue;\n                }\n                pushAdd(n);\n            }\n            for (const n of this.addedSet) {\n                if (!isAncestorInSet(this.droppedSet, n) &&\n                    !isParentRemoved(this.removes, n, this.mirror)) {\n                    pushAdd(n);\n                }\n                else if (isAncestorInSet(this.movedSet, n)) {\n                    pushAdd(n);\n                }\n                else {\n                    this.droppedSet.add(n);\n                }\n            }\n            let candidate = null;\n            while (addList.length) {\n                let node = null;\n                if (candidate) {\n                    const parentId = this.mirror.getId(candidate.value.parentNode);\n                    const nextId = getNextId(candidate.value);\n                    if (parentId !== -1 && nextId !== -1) {\n                        node = candidate;\n                    }\n                }\n                if (!node) {\n                    let tailNode = addList.tail;\n                    while (tailNode) {\n                        const _node = tailNode;\n                        tailNode = tailNode.previous;\n                        if (_node) {\n                            const parentId = this.mirror.getId(_node.value.parentNode);\n                            const nextId = getNextId(_node.value);\n                            if (nextId === -1)\n                                continue;\n                            else if (parentId !== -1) {\n                                node = _node;\n                                break;\n                            }\n                            else {\n                                const unhandledNode = _node.value;\n                                if (unhandledNode.parentNode &&\n                                    unhandledNode.parentNode.nodeType ===\n                                        Node.DOCUMENT_FRAGMENT_NODE) {\n                                    const shadowHost = unhandledNode.parentNode\n                                        .host;\n                                    const parentId = this.mirror.getId(shadowHost);\n                                    if (parentId !== -1) {\n                                        node = _node;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!node) {\n                    while (addList.head) {\n                        addList.removeNode(addList.head.value);\n                    }\n                    break;\n                }\n                candidate = node.previous;\n                addList.removeNode(node.value);\n                pushAdd(node.value);\n            }\n            const payload = {\n                texts: this.texts\n                    .map((text) => ({\n                    id: this.mirror.getId(text.node),\n                    value: text.value,\n                }))\n                    .filter((text) => !addedIds.has(text.id))\n                    .filter((text) => this.mirror.has(text.id)),\n                attributes: this.attributes\n                    .map((attribute) => {\n                    const { attributes } = attribute;\n                    if (typeof attributes.style === 'string') {\n                        const diffAsStr = JSON.stringify(attribute.styleDiff);\n                        const unchangedAsStr = JSON.stringify(attribute._unchangedStyles);\n                        if (diffAsStr.length < attributes.style.length) {\n                            if ((diffAsStr + unchangedAsStr).split('var(').length ===\n                                attributes.style.split('var(').length) {\n                                attributes.style = attribute.styleDiff;\n                            }\n                        }\n                    }\n                    return {\n                        id: this.mirror.getId(attribute.node),\n                        attributes: attributes,\n                    };\n                })\n                    .filter((attribute) => !addedIds.has(attribute.id))\n                    .filter((attribute) => this.mirror.has(attribute.id)),\n                removes: this.removes,\n                adds,\n            };\n            if (!payload.texts.length &&\n                !payload.attributes.length &&\n                !payload.removes.length &&\n                !payload.adds.length) {\n                return;\n            }\n            this.texts = [];\n            this.attributes = [];\n            this.attributeMap = new WeakMap();\n            this.removes = [];\n            this.addedSet = new Set();\n            this.movedSet = new Set();\n            this.droppedSet = new Set();\n            this.movedMap = {};\n            this.mutationCb(payload);\n        };\n        this.processMutation = (m) => {\n            if (isIgnored(m.target, this.mirror)) {\n                return;\n            }\n            switch (m.type) {\n                case 'characterData': {\n                    const value = m.target.textContent;\n                    if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) &&\n                        value !== m.oldValue) {\n                        this.texts.push({\n                            value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, this.maskAllText) && value\n                                ? this.maskTextFn\n                                    ? this.maskTextFn(value, closestElementOfNode(m.target))\n                                    : value.replace(/[\\S]/g, '*')\n                                : value,\n                            node: m.target,\n                        });\n                    }\n                    break;\n                }\n                case 'attributes': {\n                    const target = m.target;\n                    let attributeName = m.attributeName;\n                    let value = m.target.getAttribute(attributeName);\n                    if (attributeName === 'value') {\n                        const type = getInputType(target);\n                        const tagName = target.tagName;\n                        value = getInputValue(target, tagName, type);\n                        const isInputMasked = shouldMaskInput({\n                            maskInputOptions: this.maskInputOptions,\n                            tagName,\n                            type,\n                        });\n                        const forceMask = needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, isInputMasked);\n                        value = maskInputValue({\n                            isMasked: forceMask,\n                            element: target,\n                            value,\n                            maskInputFn: this.maskInputFn,\n                        });\n                    }\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) ||\n                        value === m.oldValue) {\n                        return;\n                    }\n                    let item = this.attributeMap.get(m.target);\n                    if (target.tagName === 'IFRAME' &&\n                        attributeName === 'src' &&\n                        !this.keepIframeSrcFn(value)) {\n                        if (!target.contentDocument) {\n                            attributeName = 'rr_src';\n                        }\n                        else {\n                            return;\n                        }\n                    }\n                    if (!item) {\n                        item = {\n                            node: m.target,\n                            attributes: {},\n                            styleDiff: {},\n                            _unchangedStyles: {},\n                        };\n                        this.attributes.push(item);\n                        this.attributeMap.set(m.target, item);\n                    }\n                    if (attributeName === 'type' &&\n                        target.tagName === 'INPUT' &&\n                        (m.oldValue || '').toLowerCase() === 'password') {\n                        target.setAttribute('data-rr-is-password', 'true');\n                    }\n                    if (!ignoreAttribute(target.tagName, attributeName)) {\n                        item.attributes[attributeName] = transformAttribute(this.doc, toLowerCase(target.tagName), toLowerCase(attributeName), value, target, this.maskAttributeFn);\n                        if (attributeName === 'style') {\n                            if (!this.unattachedDoc) {\n                                try {\n                                    this.unattachedDoc =\n                                        document.implementation.createHTMLDocument();\n                                }\n                                catch (e) {\n                                    this.unattachedDoc = this.doc;\n                                }\n                            }\n                            const old = this.unattachedDoc.createElement('span');\n                            if (m.oldValue) {\n                                old.setAttribute('style', m.oldValue);\n                            }\n                            for (const pname of Array.from(target.style)) {\n                                const newValue = target.style.getPropertyValue(pname);\n                                const newPriority = target.style.getPropertyPriority(pname);\n                                if (newValue !== old.style.getPropertyValue(pname) ||\n                                    newPriority !== old.style.getPropertyPriority(pname)) {\n                                    if (newPriority === '') {\n                                        item.styleDiff[pname] = newValue;\n                                    }\n                                    else {\n                                        item.styleDiff[pname] = [newValue, newPriority];\n                                    }\n                                }\n                                else {\n                                    item._unchangedStyles[pname] = [newValue, newPriority];\n                                }\n                            }\n                            for (const pname of Array.from(old.style)) {\n                                if (target.style.getPropertyValue(pname) === '') {\n                                    item.styleDiff[pname] = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n                case 'childList': {\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, true)) {\n                        return;\n                    }\n                    m.addedNodes.forEach((n) => this.genAdds(n, m.target));\n                    m.removedNodes.forEach((n) => {\n                        const nodeId = this.mirror.getId(n);\n                        const parentId = isShadowRoot(m.target)\n                            ? this.mirror.getId(m.target.host)\n                            : this.mirror.getId(m.target);\n                        if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) ||\n                            isIgnored(n, this.mirror) ||\n                            !isSerialized(n, this.mirror)) {\n                            return;\n                        }\n                        if (this.addedSet.has(n)) {\n                            deepDelete(this.addedSet, n);\n                            this.droppedSet.add(n);\n                        }\n                        else if (this.addedSet.has(m.target) && nodeId === -1) ;\n                        else if (isAncestorRemoved(m.target, this.mirror)) ;\n                        else if (this.movedSet.has(n) &&\n                            this.movedMap[moveKey(nodeId, parentId)]) {\n                            deepDelete(this.movedSet, n);\n                        }\n                        else {\n                            this.removes.push({\n                                parentId,\n                                id: nodeId,\n                                isShadow: isShadowRoot(m.target) && isNativeShadowDom(m.target)\n                                    ? true\n                                    : undefined,\n                            });\n                        }\n                        this.mapRemoves.push(n);\n                    });\n                    break;\n                }\n            }\n        };\n        this.genAdds = (n, target) => {\n            if (this.processedNodeManager.inOtherBuffer(n, this))\n                return;\n            if (this.addedSet.has(n) || this.movedSet.has(n))\n                return;\n            if (this.mirror.hasNode(n)) {\n                if (isIgnored(n, this.mirror)) {\n                    return;\n                }\n                this.movedSet.add(n);\n                let targetId = null;\n                if (target && this.mirror.hasNode(target)) {\n                    targetId = this.mirror.getId(target);\n                }\n                if (targetId && targetId !== -1) {\n                    this.movedMap[moveKey(this.mirror.getId(n), targetId)] = true;\n                }\n            }\n            else {\n                this.addedSet.add(n);\n                this.droppedSet.delete(n);\n            }\n            if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n                n.childNodes.forEach((childN) => this.genAdds(childN));\n                if (hasShadowRoot(n)) {\n                    n.shadowRoot.childNodes.forEach((childN) => {\n                        this.processedNodeManager.add(childN, this);\n                        this.genAdds(childN, n);\n                    });\n                }\n            }\n        };\n    }\n    init(options) {\n        [\n            'mutationCb',\n            'blockClass',\n            'blockSelector',\n            'unblockSelector',\n            'maskAllText',\n            'maskTextClass',\n            'unmaskTextClass',\n            'maskTextSelector',\n            'unmaskTextSelector',\n            'inlineStylesheet',\n            'maskInputOptions',\n            'maskAttributeFn',\n            'maskTextFn',\n            'maskInputFn',\n            'keepIframeSrcFn',\n            'recordCanvas',\n            'inlineImages',\n            'slimDOMOptions',\n            'dataURLOptions',\n            'doc',\n            'mirror',\n            'iframeManager',\n            'stylesheetManager',\n            'shadowDomManager',\n            'canvasManager',\n            'processedNodeManager',\n        ].forEach((key) => {\n            this[key] = options[key];\n        });\n    }\n    freeze() {\n        this.frozen = true;\n        this.canvasManager.freeze();\n    }\n    unfreeze() {\n        this.frozen = false;\n        this.canvasManager.unfreeze();\n        this.emit();\n    }\n    isFrozen() {\n        return this.frozen;\n    }\n    lock() {\n        this.locked = true;\n        this.canvasManager.lock();\n    }\n    unlock() {\n        this.locked = false;\n        this.canvasManager.unlock();\n        this.emit();\n    }\n    reset() {\n        this.shadowDomManager.reset();\n        this.canvasManager.reset();\n    }\n}\nfunction deepDelete(addsSet, n) {\n    addsSet.delete(n);\n    n.childNodes.forEach((childN) => deepDelete(addsSet, childN));\n}\nfunction isParentRemoved(removes, n, mirror) {\n    if (removes.length === 0)\n        return false;\n    return _isParentRemoved(removes, n, mirror);\n}\nfunction _isParentRemoved(removes, n, mirror) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    const parentId = mirror.getId(parentNode);\n    if (removes.some((r) => r.id === parentId)) {\n        return true;\n    }\n    return _isParentRemoved(removes, parentNode, mirror);\n}\nfunction isAncestorInSet(set, n) {\n    if (set.size === 0)\n        return false;\n    return _isAncestorInSet(set, n);\n}\nfunction _isAncestorInSet(set, n) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    if (set.has(parentNode)) {\n        return true;\n    }\n    return _isAncestorInSet(set, parentNode);\n}\n\nlet errorHandler;\nfunction registerErrorHandler(handler) {\n    errorHandler = handler;\n}\nfunction unregisterErrorHandler() {\n    errorHandler = undefined;\n}\nconst callbackWrapper = (cb) => {\n    if (!errorHandler) {\n        return cb;\n    }\n    const rrwebWrapped = ((...rest) => {\n        try {\n            return cb(...rest);\n        }\n        catch (error) {\n            if (errorHandler && errorHandler(error) === true) {\n                return () => {\n                };\n            }\n            throw error;\n        }\n    });\n    return rrwebWrapped;\n};\n\nfunction _optionalChain$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nconst mutationBuffers = [];\nfunction getEventTarget(event) {\n    try {\n        if ('composedPath' in event) {\n            const path = event.composedPath();\n            if (path.length) {\n                return path[0];\n            }\n        }\n        else if ('path' in event && event.path.length) {\n            return event.path[0];\n        }\n    }\n    catch (e2) {\n    }\n    return event && event.target;\n}\nfunction initMutationObserver(options, rootEl) {\n    const mutationBuffer = new MutationBuffer();\n    mutationBuffers.push(mutationBuffer);\n    mutationBuffer.init(options);\n    let mutationObserverCtor = window.MutationObserver ||\n        window.__rrMutationObserver;\n    const angularZoneSymbol = _optionalChain$2([window, 'optionalAccess', _ => _.Zone, 'optionalAccess', _2 => _2.__symbol__, 'optionalCall', _3 => _3('MutationObserver')]);\n    if (angularZoneSymbol &&\n        window[angularZoneSymbol]) {\n        mutationObserverCtor = window[angularZoneSymbol];\n    }\n    const observer = new mutationObserverCtor(callbackWrapper((mutations) => {\n        if (options.onMutation && options.onMutation(mutations) === false) {\n            return;\n        }\n        mutationBuffer.processMutations.bind(mutationBuffer)(mutations);\n    }));\n    observer.observe(rootEl, {\n        attributes: true,\n        attributeOldValue: true,\n        characterData: true,\n        characterDataOldValue: true,\n        childList: true,\n        subtree: true,\n    });\n    return observer;\n}\nfunction initMoveObserver({ mousemoveCb, sampling, doc, mirror, }) {\n    if (sampling.mousemove === false) {\n        return () => {\n        };\n    }\n    const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n    const callbackThreshold = typeof sampling.mousemoveCallback === 'number'\n        ? sampling.mousemoveCallback\n        : 500;\n    let positions = [];\n    let timeBaseline;\n    const wrappedCb = throttle$1(callbackWrapper((source) => {\n        const totalOffset = Date.now() - timeBaseline;\n        mousemoveCb(positions.map((p) => {\n            p.timeOffset -= totalOffset;\n            return p;\n        }), source);\n        positions = [];\n        timeBaseline = null;\n    }), callbackThreshold);\n    const updatePosition = callbackWrapper(throttle$1(callbackWrapper((evt) => {\n        const target = getEventTarget(evt);\n        const { clientX, clientY } = legacy_isTouchEvent(evt)\n            ? evt.changedTouches[0]\n            : evt;\n        if (!timeBaseline) {\n            timeBaseline = nowTimestamp();\n        }\n        positions.push({\n            x: clientX,\n            y: clientY,\n            id: mirror.getId(target),\n            timeOffset: nowTimestamp() - timeBaseline,\n        });\n        wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent\n            ? IncrementalSource.Drag\n            : evt instanceof MouseEvent\n                ? IncrementalSource.MouseMove\n                : IncrementalSource.TouchMove);\n    }), threshold, {\n        trailing: false,\n    }));\n    const handlers = [\n        on('mousemove', updatePosition, doc),\n        on('touchmove', updatePosition, doc),\n        on('drag', updatePosition, doc),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initMouseInteractionObserver({ mouseInteractionCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    if (sampling.mouseInteraction === false) {\n        return () => {\n        };\n    }\n    const disableMap = sampling.mouseInteraction === true ||\n        sampling.mouseInteraction === undefined\n        ? {}\n        : sampling.mouseInteraction;\n    const handlers = [];\n    let currentPointerType = null;\n    const getHandler = (eventKey) => {\n        return (event) => {\n            const target = getEventTarget(event);\n            if (isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n                return;\n            }\n            let pointerType = null;\n            let thisEventKey = eventKey;\n            if ('pointerType' in event) {\n                switch (event.pointerType) {\n                    case 'mouse':\n                        pointerType = PointerTypes.Mouse;\n                        break;\n                    case 'touch':\n                        pointerType = PointerTypes.Touch;\n                        break;\n                    case 'pen':\n                        pointerType = PointerTypes.Pen;\n                        break;\n                }\n                if (pointerType === PointerTypes.Touch) {\n                    if (MouseInteractions[eventKey] === MouseInteractions.MouseDown) {\n                        thisEventKey = 'TouchStart';\n                    }\n                    else if (MouseInteractions[eventKey] === MouseInteractions.MouseUp) {\n                        thisEventKey = 'TouchEnd';\n                    }\n                }\n                else if (pointerType === PointerTypes.Pen) ;\n            }\n            else if (legacy_isTouchEvent(event)) {\n                pointerType = PointerTypes.Touch;\n            }\n            if (pointerType !== null) {\n                currentPointerType = pointerType;\n                if ((thisEventKey.startsWith('Touch') &&\n                    pointerType === PointerTypes.Touch) ||\n                    (thisEventKey.startsWith('Mouse') &&\n                        pointerType === PointerTypes.Mouse)) {\n                    pointerType = null;\n                }\n            }\n            else if (MouseInteractions[eventKey] === MouseInteractions.Click) {\n                pointerType = currentPointerType;\n                currentPointerType = null;\n            }\n            const e = legacy_isTouchEvent(event) ? event.changedTouches[0] : event;\n            if (!e) {\n                return;\n            }\n            const id = mirror.getId(target);\n            const { clientX, clientY } = e;\n            callbackWrapper(mouseInteractionCb)({\n                type: MouseInteractions[thisEventKey],\n                id,\n                x: clientX,\n                y: clientY,\n                ...(pointerType !== null && { pointerType }),\n            });\n        };\n    };\n    Object.keys(MouseInteractions)\n        .filter((key) => Number.isNaN(Number(key)) &&\n        !key.endsWith('_Departed') &&\n        disableMap[key] !== false)\n        .forEach((eventKey) => {\n        let eventName = toLowerCase(eventKey);\n        const handler = getHandler(eventKey);\n        if (window.PointerEvent) {\n            switch (MouseInteractions[eventKey]) {\n                case MouseInteractions.MouseDown:\n                case MouseInteractions.MouseUp:\n                    eventName = eventName.replace('mouse', 'pointer');\n                    break;\n                case MouseInteractions.TouchStart:\n                case MouseInteractions.TouchEnd:\n                    return;\n            }\n        }\n        handlers.push(on(eventName, handler, doc));\n    });\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initScrollObserver({ scrollCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    const updatePosition = callbackWrapper(throttle$1(callbackWrapper((evt) => {\n        const target = getEventTarget(evt);\n        if (!target ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const id = mirror.getId(target);\n        if (target === doc && doc.defaultView) {\n            const scrollLeftTop = getWindowScroll(doc.defaultView);\n            scrollCb({\n                id,\n                x: scrollLeftTop.left,\n                y: scrollLeftTop.top,\n            });\n        }\n        else {\n            scrollCb({\n                id,\n                x: target.scrollLeft,\n                y: target.scrollTop,\n            });\n        }\n    }), sampling.scroll || 100));\n    return on('scroll', updatePosition, doc);\n}\nfunction initViewportResizeObserver({ viewportResizeCb }, { win }) {\n    let lastH = -1;\n    let lastW = -1;\n    const updateDimension = callbackWrapper(throttle$1(callbackWrapper(() => {\n        const height = getWindowHeight();\n        const width = getWindowWidth();\n        if (lastH !== height || lastW !== width) {\n            viewportResizeCb({\n                width: Number(width),\n                height: Number(height),\n            });\n            lastH = height;\n            lastW = width;\n        }\n    }), 200));\n    return on('resize', updateDimension, win);\n}\nconst INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\nconst lastInputValueMap = new WeakMap();\nfunction initInputObserver({ inputCb, doc, mirror, blockClass, blockSelector, unblockSelector, ignoreClass, ignoreSelector, maskInputOptions, maskInputFn, sampling, userTriggeredOnInput, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, }) {\n    function eventHandler(event) {\n        let target = getEventTarget(event);\n        const userTriggered = event.isTrusted;\n        const tagName = target && toUpperCase(target.tagName);\n        if (tagName === 'OPTION')\n            target = target.parentElement;\n        if (!target ||\n            !tagName ||\n            INPUT_TAGS.indexOf(tagName) < 0 ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const el = target;\n        if (el.classList.contains(ignoreClass) ||\n            (ignoreSelector && el.matches(ignoreSelector))) {\n            return;\n        }\n        const type = getInputType(target);\n        let text = getInputValue(el, tagName, type);\n        let isChecked = false;\n        const isInputMasked = shouldMaskInput({\n            maskInputOptions,\n            tagName,\n            type,\n        });\n        const forceMask = needMaskingText(target, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked);\n        if (type === 'radio' || type === 'checkbox') {\n            isChecked = target.checked;\n        }\n        text = maskInputValue({\n            isMasked: forceMask,\n            element: target,\n            value: text,\n            maskInputFn,\n        });\n        cbWithDedup(target, userTriggeredOnInput\n            ? { text, isChecked, userTriggered }\n            : { text, isChecked });\n        const name = target.name;\n        if (type === 'radio' && name && isChecked) {\n            doc\n                .querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`)\n                .forEach((el) => {\n                if (el !== target) {\n                    const text = maskInputValue({\n                        isMasked: forceMask,\n                        element: el,\n                        value: getInputValue(el, tagName, type),\n                        maskInputFn,\n                    });\n                    cbWithDedup(el, userTriggeredOnInput\n                        ? { text, isChecked: !isChecked, userTriggered: false }\n                        : { text, isChecked: !isChecked });\n                }\n            });\n        }\n    }\n    function cbWithDedup(target, v) {\n        const lastInputValue = lastInputValueMap.get(target);\n        if (!lastInputValue ||\n            lastInputValue.text !== v.text ||\n            lastInputValue.isChecked !== v.isChecked) {\n            lastInputValueMap.set(target, v);\n            const id = mirror.getId(target);\n            callbackWrapper(inputCb)({\n                ...v,\n                id,\n            });\n        }\n    }\n    const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n    const handlers = events.map((eventName) => on(eventName, callbackWrapper(eventHandler), doc));\n    const currentWindow = doc.defaultView;\n    if (!currentWindow) {\n        return () => {\n            handlers.forEach((h) => h());\n        };\n    }\n    const propertyDescriptor = currentWindow.Object.getOwnPropertyDescriptor(currentWindow.HTMLInputElement.prototype, 'value');\n    const hookProperties = [\n        [currentWindow.HTMLInputElement.prototype, 'value'],\n        [currentWindow.HTMLInputElement.prototype, 'checked'],\n        [currentWindow.HTMLSelectElement.prototype, 'value'],\n        [currentWindow.HTMLTextAreaElement.prototype, 'value'],\n        [currentWindow.HTMLSelectElement.prototype, 'selectedIndex'],\n        [currentWindow.HTMLOptionElement.prototype, 'selected'],\n    ];\n    if (propertyDescriptor && propertyDescriptor.set) {\n        handlers.push(...hookProperties.map((p) => hookSetter(p[0], p[1], {\n            set() {\n                callbackWrapper(eventHandler)({\n                    target: this,\n                    isTrusted: false,\n                });\n            },\n        }, false, currentWindow)));\n    }\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction getNestedCSSRulePositions(rule) {\n    const positions = [];\n    function recurse(childRule, pos) {\n        if ((hasNestedCSSRule('CSSGroupingRule') &&\n            childRule.parentRule instanceof CSSGroupingRule) ||\n            (hasNestedCSSRule('CSSMediaRule') &&\n                childRule.parentRule instanceof CSSMediaRule) ||\n            (hasNestedCSSRule('CSSSupportsRule') &&\n                childRule.parentRule instanceof CSSSupportsRule) ||\n            (hasNestedCSSRule('CSSConditionRule') &&\n                childRule.parentRule instanceof CSSConditionRule)) {\n            const rules = Array.from(childRule.parentRule.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        else if (childRule.parentStyleSheet) {\n            const rules = Array.from(childRule.parentStyleSheet.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        return pos;\n    }\n    return recurse(rule, positions);\n}\nfunction getIdAndStyleId(sheet, mirror, styleMirror) {\n    let id, styleId;\n    if (!sheet)\n        return {};\n    if (sheet.ownerNode)\n        id = mirror.getId(sheet.ownerNode);\n    else\n        styleId = styleMirror.getId(sheet);\n    return {\n        styleId,\n        id,\n    };\n}\nfunction initStyleSheetObserver({ styleSheetRuleCb, mirror, stylesheetManager }, { win }) {\n    if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n        return () => {\n        };\n    }\n    const insertRule = win.CSSStyleSheet.prototype.insertRule;\n    win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [rule, index] = argumentsList;\n            const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleSheetRuleCb({\n                    id,\n                    styleId,\n                    adds: [{ rule, index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n    win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [index] = argumentsList;\n            const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleSheetRuleCb({\n                    id,\n                    styleId,\n                    removes: [{ index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    let replace;\n    if (win.CSSStyleSheet.prototype.replace) {\n        replace = win.CSSStyleSheet.prototype.replace;\n        win.CSSStyleSheet.prototype.replace = new Proxy(replace, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [text] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        replace: text,\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    }\n    let replaceSync;\n    if (win.CSSStyleSheet.prototype.replaceSync) {\n        replaceSync = win.CSSStyleSheet.prototype.replaceSync;\n        win.CSSStyleSheet.prototype.replaceSync = new Proxy(replaceSync, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [text] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        replaceSync: text,\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    }\n    const supportedNestedCSSRuleTypes = {};\n    if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n        supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n    }\n    else {\n        if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n            supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n            supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n            supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n        }\n    }\n    const unmodifiedFunctions = {};\n    Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n        unmodifiedFunctions[typeKey] = {\n            insertRule: type.prototype.insertRule,\n            deleteRule: type.prototype.deleteRule,\n        };\n        type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [rule, index] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        adds: [\n                            {\n                                rule,\n                                index: [\n                                    ...getNestedCSSRulePositions(thisArg),\n                                    index || 0,\n                                ],\n                            },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n        type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [index] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        removes: [\n                            { index: [...getNestedCSSRulePositions(thisArg), index] },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleSheet.prototype.insertRule = insertRule;\n        win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n        replace && (win.CSSStyleSheet.prototype.replace = replace);\n        replaceSync && (win.CSSStyleSheet.prototype.replaceSync = replaceSync);\n        Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n            type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n            type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n        });\n    });\n}\nfunction initAdoptedStyleSheetObserver({ mirror, stylesheetManager, }, host) {\n    let hostId = null;\n    if (host.nodeName === '#document')\n        hostId = mirror.getId(host);\n    else\n        hostId = mirror.getId(host.host);\n    const patchTarget = host.nodeName === '#document'\n        ? _optionalChain$2([host, 'access', _4 => _4.defaultView, 'optionalAccess', _5 => _5.Document])\n        : _optionalChain$2([host, 'access', _6 => _6.ownerDocument, 'optionalAccess', _7 => _7.defaultView, 'optionalAccess', _8 => _8.ShadowRoot]);\n    const originalPropertyDescriptor = _optionalChain$2([patchTarget, 'optionalAccess', _9 => _9.prototype])\n        ? Object.getOwnPropertyDescriptor(_optionalChain$2([patchTarget, 'optionalAccess', _10 => _10.prototype]), 'adoptedStyleSheets')\n        : undefined;\n    if (hostId === null ||\n        hostId === -1 ||\n        !patchTarget ||\n        !originalPropertyDescriptor)\n        return () => {\n        };\n    Object.defineProperty(host, 'adoptedStyleSheets', {\n        configurable: originalPropertyDescriptor.configurable,\n        enumerable: originalPropertyDescriptor.enumerable,\n        get() {\n            return _optionalChain$2([originalPropertyDescriptor, 'access', _11 => _11.get, 'optionalAccess', _12 => _12.call, 'call', _13 => _13(this)]);\n        },\n        set(sheets) {\n            const result = _optionalChain$2([originalPropertyDescriptor, 'access', _14 => _14.set, 'optionalAccess', _15 => _15.call, 'call', _16 => _16(this, sheets)]);\n            if (hostId !== null && hostId !== -1) {\n                try {\n                    stylesheetManager.adoptStyleSheets(sheets, hostId);\n                }\n                catch (e) {\n                }\n            }\n            return result;\n        },\n    });\n    return callbackWrapper(() => {\n        Object.defineProperty(host, 'adoptedStyleSheets', {\n            configurable: originalPropertyDescriptor.configurable,\n            enumerable: originalPropertyDescriptor.enumerable,\n            get: originalPropertyDescriptor.get,\n            set: originalPropertyDescriptor.set,\n        });\n    });\n}\nfunction initStyleDeclarationObserver({ styleDeclarationCb, mirror, ignoreCSSAttributes, stylesheetManager, }, { win }) {\n    const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n    win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [property, value, priority] = argumentsList;\n            if (ignoreCSSAttributes.has(property)) {\n                return setProperty.apply(thisArg, [property, value, priority]);\n            }\n            const { id, styleId } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _17 => _17.parentRule, 'optionalAccess', _18 => _18.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleDeclarationCb({\n                    id,\n                    styleId,\n                    set: {\n                        property,\n                        value,\n                        priority,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [property] = argumentsList;\n            if (ignoreCSSAttributes.has(property)) {\n                return removeProperty.apply(thisArg, [property]);\n            }\n            const { id, styleId } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _19 => _19.parentRule, 'optionalAccess', _20 => _20.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleDeclarationCb({\n                    id,\n                    styleId,\n                    remove: {\n                        property,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n        win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n    });\n}\nfunction initMediaInteractionObserver({ mediaInteractionCb, blockClass, blockSelector, unblockSelector, mirror, sampling, doc, }) {\n    const handler = callbackWrapper((type) => throttle$1(callbackWrapper((event) => {\n        const target = getEventTarget(event);\n        if (!target ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const { currentTime, volume, muted, playbackRate } = target;\n        mediaInteractionCb({\n            type,\n            id: mirror.getId(target),\n            currentTime,\n            volume,\n            muted,\n            playbackRate,\n        });\n    }), sampling.media || 500));\n    const handlers = [\n        on('play', handler(0), doc),\n        on('pause', handler(1), doc),\n        on('seeked', handler(2), doc),\n        on('volumechange', handler(3), doc),\n        on('ratechange', handler(4), doc),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initFontObserver({ fontCb, doc }) {\n    const win = doc.defaultView;\n    if (!win) {\n        return () => {\n        };\n    }\n    const handlers = [];\n    const fontMap = new WeakMap();\n    const originalFontFace = win.FontFace;\n    win.FontFace = function FontFace(family, source, descriptors) {\n        const fontFace = new originalFontFace(family, source, descriptors);\n        fontMap.set(fontFace, {\n            family,\n            buffer: typeof source !== 'string',\n            descriptors,\n            fontSource: typeof source === 'string'\n                ? source\n                : JSON.stringify(Array.from(new Uint8Array(source))),\n        });\n        return fontFace;\n    };\n    const restoreHandler = patch(doc.fonts, 'add', function (original) {\n        return function (fontFace) {\n            setTimeout$1(callbackWrapper(() => {\n                const p = fontMap.get(fontFace);\n                if (p) {\n                    fontCb(p);\n                    fontMap.delete(fontFace);\n                }\n            }), 0);\n            return original.apply(this, [fontFace]);\n        };\n    });\n    handlers.push(() => {\n        win.FontFace = originalFontFace;\n    });\n    handlers.push(restoreHandler);\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initSelectionObserver(param) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, selectionCb, } = param;\n    let collapsed = true;\n    const updateSelection = callbackWrapper(() => {\n        const selection = doc.getSelection();\n        if (!selection || (collapsed && _optionalChain$2([selection, 'optionalAccess', _21 => _21.isCollapsed])))\n            return;\n        collapsed = selection.isCollapsed || false;\n        const ranges = [];\n        const count = selection.rangeCount || 0;\n        for (let i = 0; i < count; i++) {\n            const range = selection.getRangeAt(i);\n            const { startContainer, startOffset, endContainer, endOffset } = range;\n            const blocked = isBlocked(startContainer, blockClass, blockSelector, unblockSelector, true) ||\n                isBlocked(endContainer, blockClass, blockSelector, unblockSelector, true);\n            if (blocked)\n                continue;\n            ranges.push({\n                start: mirror.getId(startContainer),\n                startOffset,\n                end: mirror.getId(endContainer),\n                endOffset,\n            });\n        }\n        selectionCb({ ranges });\n    });\n    updateSelection();\n    return on('selectionchange', updateSelection);\n}\nfunction initCustomElementObserver({ doc, customElementCb, }) {\n    const win = doc.defaultView;\n    if (!win || !win.customElements)\n        return () => { };\n    const restoreHandler = patch(win.customElements, 'define', function (original) {\n        return function (name, constructor, options) {\n            try {\n                customElementCb({\n                    define: {\n                        name,\n                    },\n                });\n            }\n            catch (e) {\n            }\n            return original.apply(this, [name, constructor, options]);\n        };\n    });\n    return restoreHandler;\n}\nfunction initObservers(o, _hooks = {}) {\n    const currentWindow = o.doc.defaultView;\n    if (!currentWindow) {\n        return () => {\n        };\n    }\n    const mutationObserver = initMutationObserver(o, o.doc);\n    const mousemoveHandler = initMoveObserver(o);\n    const mouseInteractionHandler = initMouseInteractionObserver(o);\n    const scrollHandler = initScrollObserver(o);\n    const viewportResizeHandler = initViewportResizeObserver(o, {\n        win: currentWindow,\n    });\n    const inputHandler = initInputObserver(o);\n    const mediaInteractionHandler = initMediaInteractionObserver(o);\n    const styleSheetObserver = initStyleSheetObserver(o, { win: currentWindow });\n    const adoptedStyleSheetObserver = initAdoptedStyleSheetObserver(o, o.doc);\n    const styleDeclarationObserver = initStyleDeclarationObserver(o, {\n        win: currentWindow,\n    });\n    const fontObserver = o.collectFonts\n        ? initFontObserver(o)\n        : () => {\n        };\n    const selectionObserver = initSelectionObserver(o);\n    const customElementObserver = initCustomElementObserver(o);\n    const pluginHandlers = [];\n    for (const plugin of o.plugins) {\n        pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n    }\n    return callbackWrapper(() => {\n        mutationBuffers.forEach((b) => b.reset());\n        mutationObserver.disconnect();\n        mousemoveHandler();\n        mouseInteractionHandler();\n        scrollHandler();\n        viewportResizeHandler();\n        inputHandler();\n        mediaInteractionHandler();\n        styleSheetObserver();\n        adoptedStyleSheetObserver();\n        styleDeclarationObserver();\n        fontObserver();\n        selectionObserver();\n        customElementObserver();\n        pluginHandlers.forEach((h) => h());\n    });\n}\nfunction hasNestedCSSRule(prop) {\n    return typeof window[prop] !== 'undefined';\n}\nfunction canMonkeyPatchNestedCSSRule(prop) {\n    return Boolean(typeof window[prop] !== 'undefined' &&\n        window[prop].prototype &&\n        'insertRule' in window[prop].prototype &&\n        'deleteRule' in window[prop].prototype);\n}\n\nclass CrossOriginIframeMirror {\n    constructor(generateIdFn) {\n        this.generateIdFn = generateIdFn;\n        this.iframeIdToRemoteIdMap = new WeakMap();\n        this.iframeRemoteIdToIdMap = new WeakMap();\n    }\n    getId(iframe, remoteId, idToRemoteMap, remoteToIdMap) {\n        const idToRemoteIdMap = idToRemoteMap || this.getIdToRemoteIdMap(iframe);\n        const remoteIdToIdMap = remoteToIdMap || this.getRemoteIdToIdMap(iframe);\n        let id = idToRemoteIdMap.get(remoteId);\n        if (!id) {\n            id = this.generateIdFn();\n            idToRemoteIdMap.set(remoteId, id);\n            remoteIdToIdMap.set(id, remoteId);\n        }\n        return id;\n    }\n    getIds(iframe, remoteId) {\n        const idToRemoteIdMap = this.getIdToRemoteIdMap(iframe);\n        const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n        return remoteId.map((id) => this.getId(iframe, id, idToRemoteIdMap, remoteIdToIdMap));\n    }\n    getRemoteId(iframe, id, map) {\n        const remoteIdToIdMap = map || this.getRemoteIdToIdMap(iframe);\n        if (typeof id !== 'number')\n            return id;\n        const remoteId = remoteIdToIdMap.get(id);\n        if (!remoteId)\n            return -1;\n        return remoteId;\n    }\n    getRemoteIds(iframe, ids) {\n        const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n        return ids.map((id) => this.getRemoteId(iframe, id, remoteIdToIdMap));\n    }\n    reset(iframe) {\n        if (!iframe) {\n            this.iframeIdToRemoteIdMap = new WeakMap();\n            this.iframeRemoteIdToIdMap = new WeakMap();\n            return;\n        }\n        this.iframeIdToRemoteIdMap.delete(iframe);\n        this.iframeRemoteIdToIdMap.delete(iframe);\n    }\n    getIdToRemoteIdMap(iframe) {\n        let idToRemoteIdMap = this.iframeIdToRemoteIdMap.get(iframe);\n        if (!idToRemoteIdMap) {\n            idToRemoteIdMap = new Map();\n            this.iframeIdToRemoteIdMap.set(iframe, idToRemoteIdMap);\n        }\n        return idToRemoteIdMap;\n    }\n    getRemoteIdToIdMap(iframe) {\n        let remoteIdToIdMap = this.iframeRemoteIdToIdMap.get(iframe);\n        if (!remoteIdToIdMap) {\n            remoteIdToIdMap = new Map();\n            this.iframeRemoteIdToIdMap.set(iframe, remoteIdToIdMap);\n        }\n        return remoteIdToIdMap;\n    }\n}\n\nfunction _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nclass IframeManagerNoop {\n    constructor() {\n        this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n        this.crossOriginIframeRootIdMap = new WeakMap();\n    }\n    addIframe() {\n    }\n    addLoadListener() {\n    }\n    attachIframe() {\n    }\n}\nclass IframeManager {\n    constructor(options) {\n        this.iframes = new WeakMap();\n        this.crossOriginIframeMap = new WeakMap();\n        this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n        this.crossOriginIframeRootIdMap = new WeakMap();\n        this.mutationCb = options.mutationCb;\n        this.wrappedEmit = options.wrappedEmit;\n        this.stylesheetManager = options.stylesheetManager;\n        this.recordCrossOriginIframes = options.recordCrossOriginIframes;\n        this.crossOriginIframeStyleMirror = new CrossOriginIframeMirror(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror));\n        this.mirror = options.mirror;\n        if (this.recordCrossOriginIframes) {\n            window.addEventListener('message', this.handleMessage.bind(this));\n        }\n    }\n    addIframe(iframeEl) {\n        this.iframes.set(iframeEl, true);\n        if (iframeEl.contentWindow)\n            this.crossOriginIframeMap.set(iframeEl.contentWindow, iframeEl);\n    }\n    addLoadListener(cb) {\n        this.loadListener = cb;\n    }\n    attachIframe(iframeEl, childSn) {\n        this.mutationCb({\n            adds: [\n                {\n                    parentId: this.mirror.getId(iframeEl),\n                    nextId: null,\n                    node: childSn,\n                },\n            ],\n            removes: [],\n            texts: [],\n            attributes: [],\n            isAttachIframe: true,\n        });\n        _optionalChain$1([this, 'access', _ => _.loadListener, 'optionalCall', _2 => _2(iframeEl)]);\n        if (iframeEl.contentDocument &&\n            iframeEl.contentDocument.adoptedStyleSheets &&\n            iframeEl.contentDocument.adoptedStyleSheets.length > 0)\n            this.stylesheetManager.adoptStyleSheets(iframeEl.contentDocument.adoptedStyleSheets, this.mirror.getId(iframeEl.contentDocument));\n    }\n    handleMessage(message) {\n        const crossOriginMessageEvent = message;\n        if (crossOriginMessageEvent.data.type !== 'rrweb' ||\n            crossOriginMessageEvent.origin !== crossOriginMessageEvent.data.origin)\n            return;\n        const iframeSourceWindow = message.source;\n        if (!iframeSourceWindow)\n            return;\n        const iframeEl = this.crossOriginIframeMap.get(message.source);\n        if (!iframeEl)\n            return;\n        const transformedEvent = this.transformCrossOriginEvent(iframeEl, crossOriginMessageEvent.data.event);\n        if (transformedEvent)\n            this.wrappedEmit(transformedEvent, crossOriginMessageEvent.data.isCheckout);\n    }\n    transformCrossOriginEvent(iframeEl, e) {\n        switch (e.type) {\n            case EventType.FullSnapshot: {\n                this.crossOriginIframeMirror.reset(iframeEl);\n                this.crossOriginIframeStyleMirror.reset(iframeEl);\n                this.replaceIdOnNode(e.data.node, iframeEl);\n                const rootId = e.data.node.id;\n                this.crossOriginIframeRootIdMap.set(iframeEl, rootId);\n                this.patchRootIdOnNode(e.data.node, rootId);\n                return {\n                    timestamp: e.timestamp,\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Mutation,\n                        adds: [\n                            {\n                                parentId: this.mirror.getId(iframeEl),\n                                nextId: null,\n                                node: e.data.node,\n                            },\n                        ],\n                        removes: [],\n                        texts: [],\n                        attributes: [],\n                        isAttachIframe: true,\n                    },\n                };\n            }\n            case EventType.Meta:\n            case EventType.Load:\n            case EventType.DomContentLoaded: {\n                return false;\n            }\n            case EventType.Plugin: {\n                return e;\n            }\n            case EventType.Custom: {\n                this.replaceIds(e.data.payload, iframeEl, ['id', 'parentId', 'previousId', 'nextId']);\n                return e;\n            }\n            case EventType.IncrementalSnapshot: {\n                switch (e.data.source) {\n                    case IncrementalSource.Mutation: {\n                        e.data.adds.forEach((n) => {\n                            this.replaceIds(n, iframeEl, [\n                                'parentId',\n                                'nextId',\n                                'previousId',\n                            ]);\n                            this.replaceIdOnNode(n.node, iframeEl);\n                            const rootId = this.crossOriginIframeRootIdMap.get(iframeEl);\n                            rootId && this.patchRootIdOnNode(n.node, rootId);\n                        });\n                        e.data.removes.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['parentId', 'id']);\n                        });\n                        e.data.attributes.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['id']);\n                        });\n                        e.data.texts.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['id']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.Drag:\n                    case IncrementalSource.TouchMove:\n                    case IncrementalSource.MouseMove: {\n                        e.data.positions.forEach((p) => {\n                            this.replaceIds(p, iframeEl, ['id']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.ViewportResize: {\n                        return false;\n                    }\n                    case IncrementalSource.MediaInteraction:\n                    case IncrementalSource.MouseInteraction:\n                    case IncrementalSource.Scroll:\n                    case IncrementalSource.CanvasMutation:\n                    case IncrementalSource.Input: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        return e;\n                    }\n                    case IncrementalSource.StyleSheetRule:\n                    case IncrementalSource.StyleDeclaration: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        this.replaceStyleIds(e.data, iframeEl, ['styleId']);\n                        return e;\n                    }\n                    case IncrementalSource.Font: {\n                        return e;\n                    }\n                    case IncrementalSource.Selection: {\n                        e.data.ranges.forEach((range) => {\n                            this.replaceIds(range, iframeEl, ['start', 'end']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.AdoptedStyleSheet: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        this.replaceStyleIds(e.data, iframeEl, ['styleIds']);\n                        _optionalChain$1([e, 'access', _3 => _3.data, 'access', _4 => _4.styles, 'optionalAccess', _5 => _5.forEach, 'call', _6 => _6((style) => {\n                            this.replaceStyleIds(style, iframeEl, ['styleId']);\n                        })]);\n                        return e;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    replace(iframeMirror, obj, iframeEl, keys) {\n        for (const key of keys) {\n            if (!Array.isArray(obj[key]) && typeof obj[key] !== 'number')\n                continue;\n            if (Array.isArray(obj[key])) {\n                obj[key] = iframeMirror.getIds(iframeEl, obj[key]);\n            }\n            else {\n                obj[key] = iframeMirror.getId(iframeEl, obj[key]);\n            }\n        }\n        return obj;\n    }\n    replaceIds(obj, iframeEl, keys) {\n        return this.replace(this.crossOriginIframeMirror, obj, iframeEl, keys);\n    }\n    replaceStyleIds(obj, iframeEl, keys) {\n        return this.replace(this.crossOriginIframeStyleMirror, obj, iframeEl, keys);\n    }\n    replaceIdOnNode(node, iframeEl) {\n        this.replaceIds(node, iframeEl, ['id', 'rootId']);\n        if ('childNodes' in node) {\n            node.childNodes.forEach((child) => {\n                this.replaceIdOnNode(child, iframeEl);\n            });\n        }\n    }\n    patchRootIdOnNode(node, rootId) {\n        if (node.type !== NodeType$1.Document && !node.rootId)\n            node.rootId = rootId;\n        if ('childNodes' in node) {\n            node.childNodes.forEach((child) => {\n                this.patchRootIdOnNode(child, rootId);\n            });\n        }\n    }\n}\n\nclass ShadowDomManagerNoop {\n    init() {\n    }\n    addShadowRoot() {\n    }\n    observeAttachShadow() {\n    }\n    reset() {\n    }\n}\nclass ShadowDomManager {\n    constructor(options) {\n        this.shadowDoms = new WeakSet();\n        this.restoreHandlers = [];\n        this.mutationCb = options.mutationCb;\n        this.scrollCb = options.scrollCb;\n        this.bypassOptions = options.bypassOptions;\n        this.mirror = options.mirror;\n        this.init();\n    }\n    init() {\n        this.reset();\n        this.patchAttachShadow(Element, document);\n    }\n    addShadowRoot(shadowRoot, doc) {\n        if (!isNativeShadowDom(shadowRoot))\n            return;\n        if (this.shadowDoms.has(shadowRoot))\n            return;\n        this.shadowDoms.add(shadowRoot);\n        const observer = initMutationObserver({\n            ...this.bypassOptions,\n            doc,\n            mutationCb: this.mutationCb,\n            mirror: this.mirror,\n            shadowDomManager: this,\n        }, shadowRoot);\n        this.restoreHandlers.push(() => observer.disconnect());\n        this.restoreHandlers.push(initScrollObserver({\n            ...this.bypassOptions,\n            scrollCb: this.scrollCb,\n            doc: shadowRoot,\n            mirror: this.mirror,\n        }));\n        setTimeout$1(() => {\n            if (shadowRoot.adoptedStyleSheets &&\n                shadowRoot.adoptedStyleSheets.length > 0)\n                this.bypassOptions.stylesheetManager.adoptStyleSheets(shadowRoot.adoptedStyleSheets, this.mirror.getId(shadowRoot.host));\n            this.restoreHandlers.push(initAdoptedStyleSheetObserver({\n                mirror: this.mirror,\n                stylesheetManager: this.bypassOptions.stylesheetManager,\n            }, shadowRoot));\n        }, 0);\n    }\n    observeAttachShadow(iframeElement) {\n        if (!iframeElement.contentWindow || !iframeElement.contentDocument)\n            return;\n        this.patchAttachShadow(iframeElement.contentWindow.Element, iframeElement.contentDocument);\n    }\n    patchAttachShadow(element, doc) {\n        const manager = this;\n        this.restoreHandlers.push(patch(element.prototype, 'attachShadow', function (original) {\n            return function (option) {\n                const shadowRoot = original.call(this, option);\n                if (this.shadowRoot && inDom(this))\n                    manager.addShadowRoot(this.shadowRoot, doc);\n                return shadowRoot;\n            };\n        }));\n    }\n    reset() {\n        this.restoreHandlers.forEach((handler) => {\n            try {\n                handler();\n            }\n            catch (e) {\n            }\n        });\n        this.restoreHandlers = [];\n        this.shadowDoms = new WeakSet();\n    }\n}\n\nclass CanvasManagerNoop {\n    reset() {\n    }\n    freeze() {\n    }\n    unfreeze() {\n    }\n    lock() {\n    }\n    unlock() {\n    }\n    snapshot() {\n    }\n}\n\nclass StylesheetManager {\n    constructor(options) {\n        this.trackedLinkElements = new WeakSet();\n        this.styleMirror = new StyleSheetMirror();\n        this.mutationCb = options.mutationCb;\n        this.adoptedStyleSheetCb = options.adoptedStyleSheetCb;\n    }\n    attachLinkElement(linkEl, childSn) {\n        if ('_cssText' in childSn.attributes)\n            this.mutationCb({\n                adds: [],\n                removes: [],\n                texts: [],\n                attributes: [\n                    {\n                        id: childSn.id,\n                        attributes: childSn\n                            .attributes,\n                    },\n                ],\n            });\n        this.trackLinkElement(linkEl);\n    }\n    trackLinkElement(linkEl) {\n        if (this.trackedLinkElements.has(linkEl))\n            return;\n        this.trackedLinkElements.add(linkEl);\n        this.trackStylesheetInLinkElement(linkEl);\n    }\n    adoptStyleSheets(sheets, hostId) {\n        if (sheets.length === 0)\n            return;\n        const adoptedStyleSheetData = {\n            id: hostId,\n            styleIds: [],\n        };\n        const styles = [];\n        for (const sheet of sheets) {\n            let styleId;\n            if (!this.styleMirror.has(sheet)) {\n                styleId = this.styleMirror.add(sheet);\n                styles.push({\n                    styleId,\n                    rules: Array.from(sheet.rules || CSSRule, (r, index) => ({\n                        rule: stringifyRule(r),\n                        index,\n                    })),\n                });\n            }\n            else\n                styleId = this.styleMirror.getId(sheet);\n            adoptedStyleSheetData.styleIds.push(styleId);\n        }\n        if (styles.length > 0)\n            adoptedStyleSheetData.styles = styles;\n        this.adoptedStyleSheetCb(adoptedStyleSheetData);\n    }\n    reset() {\n        this.styleMirror.reset();\n        this.trackedLinkElements = new WeakSet();\n    }\n    trackStylesheetInLinkElement(linkEl) {\n    }\n}\n\nclass ProcessedNodeManager {\n    constructor() {\n        this.nodeMap = new WeakMap();\n        this.loop = true;\n        this.periodicallyClear();\n    }\n    periodicallyClear() {\n        onRequestAnimationFrame(() => {\n            this.clear();\n            if (this.loop)\n                this.periodicallyClear();\n        });\n    }\n    inOtherBuffer(node, thisBuffer) {\n        const buffers = this.nodeMap.get(node);\n        return (buffers && Array.from(buffers).some((buffer) => buffer !== thisBuffer));\n    }\n    add(node, buffer) {\n        this.nodeMap.set(node, (this.nodeMap.get(node) || new Set()).add(buffer));\n    }\n    clear() {\n        this.nodeMap = new WeakMap();\n    }\n    destroy() {\n        this.loop = false;\n    }\n}\n\nlet wrappedEmit;\nlet _takeFullSnapshot;\nconst mirror = createMirror();\nfunction record(options = {}) {\n    const { emit, checkoutEveryNms, checkoutEveryNth, blockClass = 'rr-block', blockSelector = null, unblockSelector = null, ignoreClass = 'rr-ignore', ignoreSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, maskAllInputs, maskInputOptions: _maskInputOptions, slimDOMOptions: _slimDOMOptions, maskAttributeFn, maskInputFn, maskTextFn, maxCanvasSize = null, packFn, sampling = {}, dataURLOptions = {}, mousemoveWait, recordCanvas = false, recordCrossOriginIframes = false, recordAfter = options.recordAfter === 'DOMContentLoaded'\n        ? options.recordAfter\n        : 'load', userTriggeredOnInput = false, collectFonts = false, inlineImages = false, plugins, keepIframeSrcFn = () => false, ignoreCSSAttributes = new Set([]), errorHandler, onMutation, getCanvasManager, } = options;\n    registerErrorHandler(errorHandler);\n    const inEmittingFrame = recordCrossOriginIframes\n        ? window.parent === window\n        : true;\n    let passEmitsToParent = false;\n    if (!inEmittingFrame) {\n        try {\n            if (window.parent.document) {\n                passEmitsToParent = false;\n            }\n        }\n        catch (e) {\n            passEmitsToParent = true;\n        }\n    }\n    if (inEmittingFrame && !emit) {\n        throw new Error('emit function is required');\n    }\n    if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n        sampling.mousemove = mousemoveWait;\n    }\n    mirror.reset();\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n            radio: true,\n            checkbox: true,\n        }\n        : _maskInputOptions !== undefined\n            ? _maskInputOptions\n            : {};\n    const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all'\n        ? {\n            script: true,\n            comment: true,\n            headFavicon: true,\n            headWhitespace: true,\n            headMetaSocial: true,\n            headMetaRobots: true,\n            headMetaHttpEquiv: true,\n            headMetaVerification: true,\n            headMetaAuthorship: _slimDOMOptions === 'all',\n            headMetaDescKeywords: _slimDOMOptions === 'all',\n        }\n        : _slimDOMOptions\n            ? _slimDOMOptions\n            : {};\n    polyfill();\n    let lastFullSnapshotEvent;\n    let incrementalSnapshotCount = 0;\n    const eventProcessor = (e) => {\n        for (const plugin of plugins || []) {\n            if (plugin.eventProcessor) {\n                e = plugin.eventProcessor(e);\n            }\n        }\n        if (packFn &&\n            !passEmitsToParent) {\n            e = packFn(e);\n        }\n        return e;\n    };\n    wrappedEmit = (r, isCheckout) => {\n        const e = r;\n        e.timestamp = nowTimestamp();\n        if (_optionalChain([mutationBuffers, 'access', _ => _[0], 'optionalAccess', _2 => _2.isFrozen, 'call', _3 => _3()]) &&\n            e.type !== EventType.FullSnapshot &&\n            !(e.type === EventType.IncrementalSnapshot &&\n                e.data.source === IncrementalSource.Mutation)) {\n            mutationBuffers.forEach((buf) => buf.unfreeze());\n        }\n        if (inEmittingFrame) {\n            _optionalChain([emit, 'optionalCall', _4 => _4(eventProcessor(e), isCheckout)]);\n        }\n        else if (passEmitsToParent) {\n            const message = {\n                type: 'rrweb',\n                event: eventProcessor(e),\n                origin: window.location.origin,\n                isCheckout,\n            };\n            window.parent.postMessage(message, '*');\n        }\n        if (e.type === EventType.FullSnapshot) {\n            lastFullSnapshotEvent = e;\n            incrementalSnapshotCount = 0;\n        }\n        else if (e.type === EventType.IncrementalSnapshot) {\n            if (e.data.source === IncrementalSource.Mutation &&\n                e.data.isAttachIframe) {\n                return;\n            }\n            incrementalSnapshotCount++;\n            const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n            const exceedTime = checkoutEveryNms &&\n                lastFullSnapshotEvent &&\n                e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n            if (exceedCount || exceedTime) {\n                takeFullSnapshot(true);\n            }\n        }\n    };\n    const wrappedMutationEmit = (m) => {\n        wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n                source: IncrementalSource.Mutation,\n                ...m,\n            },\n        });\n    };\n    const wrappedScrollEmit = (p) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.Scroll,\n            ...p,\n        },\n    });\n    const wrappedCanvasMutationEmit = (p) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.CanvasMutation,\n            ...p,\n        },\n    });\n    const wrappedAdoptedStyleSheetEmit = (a) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.AdoptedStyleSheet,\n            ...a,\n        },\n    });\n    const stylesheetManager = new StylesheetManager({\n        mutationCb: wrappedMutationEmit,\n        adoptedStyleSheetCb: wrappedAdoptedStyleSheetEmit,\n    });\n    const iframeManager = typeof __RRWEB_EXCLUDE_IFRAME__ === 'boolean' && __RRWEB_EXCLUDE_IFRAME__\n        ? new IframeManagerNoop()\n        : new IframeManager({\n            mirror,\n            mutationCb: wrappedMutationEmit,\n            stylesheetManager: stylesheetManager,\n            recordCrossOriginIframes,\n            wrappedEmit,\n        });\n    for (const plugin of plugins || []) {\n        if (plugin.getMirror)\n            plugin.getMirror({\n                nodeMirror: mirror,\n                crossOriginIframeMirror: iframeManager.crossOriginIframeMirror,\n                crossOriginIframeStyleMirror: iframeManager.crossOriginIframeStyleMirror,\n            });\n    }\n    const processedNodeManager = new ProcessedNodeManager();\n    const canvasManager = _getCanvasManager(getCanvasManager, {\n        mirror,\n        win: window,\n        mutationCb: (p) => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n                source: IncrementalSource.CanvasMutation,\n                ...p,\n            },\n        }),\n        recordCanvas,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maxCanvasSize,\n        sampling: sampling['canvas'],\n        dataURLOptions,\n        errorHandler,\n    });\n    const shadowDomManager = typeof __RRWEB_EXCLUDE_SHADOW_DOM__ === 'boolean' &&\n        __RRWEB_EXCLUDE_SHADOW_DOM__\n        ? new ShadowDomManagerNoop()\n        : new ShadowDomManager({\n            mutationCb: wrappedMutationEmit,\n            scrollCb: wrappedScrollEmit,\n            bypassOptions: {\n                onMutation,\n                blockClass,\n                blockSelector,\n                unblockSelector,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                inlineStylesheet,\n                maskInputOptions,\n                dataURLOptions,\n                maskAttributeFn,\n                maskTextFn,\n                maskInputFn,\n                recordCanvas,\n                inlineImages,\n                sampling,\n                slimDOMOptions,\n                iframeManager,\n                stylesheetManager,\n                canvasManager,\n                keepIframeSrcFn,\n                processedNodeManager,\n            },\n            mirror,\n        });\n    const takeFullSnapshot = (isCheckout = false) => {\n        wrappedEmit({\n            type: EventType.Meta,\n            data: {\n                href: window.location.href,\n                width: getWindowWidth(),\n                height: getWindowHeight(),\n            },\n        }, isCheckout);\n        stylesheetManager.reset();\n        shadowDomManager.init();\n        mutationBuffers.forEach((buf) => buf.lock());\n        const node = snapshot(document, {\n            mirror,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskAllText,\n            maskTextClass,\n            unmaskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            inlineStylesheet,\n            maskAllInputs: maskInputOptions,\n            maskAttributeFn,\n            maskInputFn,\n            maskTextFn,\n            slimDOM: slimDOMOptions,\n            dataURLOptions,\n            recordCanvas,\n            inlineImages,\n            onSerialize: (n) => {\n                if (isSerializedIframe(n, mirror)) {\n                    iframeManager.addIframe(n);\n                }\n                if (isSerializedStylesheet(n, mirror)) {\n                    stylesheetManager.trackLinkElement(n);\n                }\n                if (hasShadowRoot(n)) {\n                    shadowDomManager.addShadowRoot(n.shadowRoot, document);\n                }\n            },\n            onIframeLoad: (iframe, childSn) => {\n                iframeManager.attachIframe(iframe, childSn);\n                shadowDomManager.observeAttachShadow(iframe);\n            },\n            onStylesheetLoad: (linkEl, childSn) => {\n                stylesheetManager.attachLinkElement(linkEl, childSn);\n            },\n            keepIframeSrcFn,\n        });\n        if (!node) {\n            return console.warn('Failed to snapshot the document');\n        }\n        wrappedEmit({\n            type: EventType.FullSnapshot,\n            data: {\n                node,\n                initialOffset: getWindowScroll(window),\n            },\n        });\n        mutationBuffers.forEach((buf) => buf.unlock());\n        if (document.adoptedStyleSheets && document.adoptedStyleSheets.length > 0)\n            stylesheetManager.adoptStyleSheets(document.adoptedStyleSheets, mirror.getId(document));\n    };\n    _takeFullSnapshot = takeFullSnapshot;\n    try {\n        const handlers = [];\n        const observe = (doc) => {\n            return callbackWrapper(initObservers)({\n                onMutation,\n                mutationCb: wrappedMutationEmit,\n                mousemoveCb: (positions, source) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source,\n                        positions,\n                    },\n                }),\n                mouseInteractionCb: (d) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.MouseInteraction,\n                        ...d,\n                    },\n                }),\n                scrollCb: wrappedScrollEmit,\n                viewportResizeCb: (d) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.ViewportResize,\n                        ...d,\n                    },\n                }),\n                inputCb: (v) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Input,\n                        ...v,\n                    },\n                }),\n                mediaInteractionCb: (p) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.MediaInteraction,\n                        ...p,\n                    },\n                }),\n                styleSheetRuleCb: (r) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.StyleSheetRule,\n                        ...r,\n                    },\n                }),\n                styleDeclarationCb: (r) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.StyleDeclaration,\n                        ...r,\n                    },\n                }),\n                canvasMutationCb: wrappedCanvasMutationEmit,\n                fontCb: (p) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Font,\n                        ...p,\n                    },\n                }),\n                selectionCb: (p) => {\n                    wrappedEmit({\n                        type: EventType.IncrementalSnapshot,\n                        data: {\n                            source: IncrementalSource.Selection,\n                            ...p,\n                        },\n                    });\n                },\n                customElementCb: (c) => {\n                    wrappedEmit({\n                        type: EventType.IncrementalSnapshot,\n                        data: {\n                            source: IncrementalSource.CustomElement,\n                            ...c,\n                        },\n                    });\n                },\n                blockClass,\n                ignoreClass,\n                ignoreSelector,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                maskInputOptions,\n                inlineStylesheet,\n                sampling,\n                recordCanvas,\n                inlineImages,\n                userTriggeredOnInput,\n                collectFonts,\n                doc,\n                maskAttributeFn,\n                maskInputFn,\n                maskTextFn,\n                keepIframeSrcFn,\n                blockSelector,\n                unblockSelector,\n                slimDOMOptions,\n                dataURLOptions,\n                mirror,\n                iframeManager,\n                stylesheetManager,\n                shadowDomManager,\n                processedNodeManager,\n                canvasManager,\n                ignoreCSSAttributes,\n                plugins: _optionalChain([plugins\n, 'optionalAccess', _5 => _5.filter, 'call', _6 => _6((p) => p.observer)\n, 'optionalAccess', _7 => _7.map, 'call', _8 => _8((p) => ({\n                    observer: p.observer,\n                    options: p.options,\n                    callback: (payload) => wrappedEmit({\n                        type: EventType.Plugin,\n                        data: {\n                            plugin: p.name,\n                            payload,\n                        },\n                    }),\n                }))]) || [],\n            }, {});\n        };\n        iframeManager.addLoadListener((iframeEl) => {\n            try {\n                handlers.push(observe(iframeEl.contentDocument));\n            }\n            catch (error) {\n                console.warn(error);\n            }\n        });\n        const init = () => {\n            takeFullSnapshot();\n            handlers.push(observe(document));\n        };\n        if (document.readyState === 'interactive' ||\n            document.readyState === 'complete') {\n            init();\n        }\n        else {\n            handlers.push(on('DOMContentLoaded', () => {\n                wrappedEmit({\n                    type: EventType.DomContentLoaded,\n                    data: {},\n                });\n                if (recordAfter === 'DOMContentLoaded')\n                    init();\n            }));\n            handlers.push(on('load', () => {\n                wrappedEmit({\n                    type: EventType.Load,\n                    data: {},\n                });\n                if (recordAfter === 'load')\n                    init();\n            }, window));\n        }\n        return () => {\n            handlers.forEach((h) => h());\n            processedNodeManager.destroy();\n            _takeFullSnapshot = undefined;\n            unregisterErrorHandler();\n        };\n    }\n    catch (error) {\n        console.warn(error);\n    }\n}\nfunction takeFullSnapshot(isCheckout) {\n    if (!_takeFullSnapshot) {\n        throw new Error('please take full snapshot after start recording');\n    }\n    _takeFullSnapshot(isCheckout);\n}\nrecord.mirror = mirror;\nrecord.takeFullSnapshot = takeFullSnapshot;\nfunction _getCanvasManager(getCanvasManagerFn, options) {\n    try {\n        return getCanvasManagerFn\n            ? getCanvasManagerFn(options)\n            : new CanvasManagerNoop();\n    }\n    catch (e2) {\n        console.warn('Unable to initialize CanvasManager');\n        return new CanvasManagerNoop();\n    }\n}\n\nconst ReplayEventTypeIncrementalSnapshot = 3;\nconst ReplayEventTypeCustom = 5;\n\n/**\n * Converts a timestamp to ms, if it was in s, or keeps it as ms.\n */\nfunction timestampToMs(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp : timestamp * 1000;\n}\n\n/**\n * Converts a timestamp to s, if it was in ms, or keeps it as s.\n */\nfunction timestampToS(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Add a breadcrumb event to replay.\n */\nfunction addBreadcrumbEvent(replay, breadcrumb) {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n\n  if (['ui.click', 'ui.input'].includes(breadcrumb.category )) {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n\n  replay.addUpdate(() => {\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        // normalize to max. 10 depth and 1_000 properties per object\n        payload: normalize(breadcrumb, 10, 1000),\n      },\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\n\nconst INTERACTIVE_SELECTOR = 'button,a';\n\n/** Get the closest interactive parent element, or else return the given element. */\nfunction getClosestInteractive(element) {\n  const closestInteractive = element.closest(INTERACTIVE_SELECTOR);\n  return closestInteractive || element;\n}\n\n/**\n * For clicks, we check if the target is inside of a button or link\n * If so, we use this as the target instead\n * This is useful because if you click on the image in <button><img></button>,\n * The target will be the image, not the button, which we don't want here\n */\nfunction getClickTargetNode(event) {\n  const target = getTargetNode(event);\n\n  if (!target || !(target instanceof Element)) {\n    return target;\n  }\n\n  return getClosestInteractive(target);\n}\n\n/** Get the event target node. */\nfunction getTargetNode(event) {\n  if (isEventWithTarget(event)) {\n    return event.target ;\n  }\n\n  return event;\n}\n\nfunction isEventWithTarget(event) {\n  return typeof event === 'object' && !!event && 'target' in event;\n}\n\nlet handlers;\n\n/**\n * Register a handler to be called when `window.open()` is called.\n * Returns a cleanup function.\n */\nfunction onWindowOpen(cb) {\n  // Ensure to only register this once\n  if (!handlers) {\n    handlers = [];\n    monkeyPatchWindowOpen();\n  }\n\n  handlers.push(cb);\n\n  return () => {\n    const pos = handlers ? handlers.indexOf(cb) : -1;\n    if (pos > -1) {\n      (handlers ).splice(pos, 1);\n    }\n  };\n}\n\nfunction monkeyPatchWindowOpen() {\n  fill(WINDOW, 'open', function (originalWindowOpen) {\n    return function (...args) {\n      if (handlers) {\n        try {\n          handlers.forEach(handler => handler());\n        } catch (e) {\n          // ignore errors in here\n        }\n      }\n\n      return originalWindowOpen.apply(WINDOW, args);\n    };\n  });\n}\n\n/** Handle a click. */\nfunction handleClick(clickDetector, clickBreadcrumb, node) {\n  clickDetector.handleClick(clickBreadcrumb, node);\n}\n\n/** A click detector class that can be used to detect slow or rage clicks on elements. */\nclass ClickDetector  {\n  // protected for testing\n\n   constructor(\n    replay,\n    slowClickConfig,\n    // Just for easier testing\n    _addBreadcrumbEvent = addBreadcrumbEvent,\n  ) {\n    this._lastMutation = 0;\n    this._lastScroll = 0;\n    this._clicks = [];\n\n    // We want everything in s, but options are in ms\n    this._timeout = slowClickConfig.timeout / 1000;\n    this._threshold = slowClickConfig.threshold / 1000;\n    this._scollTimeout = slowClickConfig.scrollTimeout / 1000;\n    this._replay = replay;\n    this._ignoreSelector = slowClickConfig.ignoreSelector;\n    this._addBreadcrumbEvent = _addBreadcrumbEvent;\n  }\n\n  /** Register click detection handlers on mutation or scroll. */\n   addListeners() {\n    const cleanupWindowOpen = onWindowOpen(() => {\n      // Treat window.open as mutation\n      this._lastMutation = nowInSeconds();\n    });\n\n    this._teardown = () => {\n      cleanupWindowOpen();\n\n      this._clicks = [];\n      this._lastMutation = 0;\n      this._lastScroll = 0;\n    };\n  }\n\n  /** Clean up listeners. */\n   removeListeners() {\n    if (this._teardown) {\n      this._teardown();\n    }\n\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n  }\n\n  /** @inheritDoc */\n   handleClick(breadcrumb, node) {\n    if (ignoreElement(node, this._ignoreSelector) || !isClickBreadcrumb(breadcrumb)) {\n      return;\n    }\n\n    const newClick = {\n      timestamp: timestampToS(breadcrumb.timestamp),\n      clickBreadcrumb: breadcrumb,\n      // Set this to 0 so we know it originates from the click breadcrumb\n      clickCount: 0,\n      node,\n    };\n\n    // If there was a click in the last 1s on the same element, ignore it - only keep a single reference per second\n    if (\n      this._clicks.some(click => click.node === newClick.node && Math.abs(click.timestamp - newClick.timestamp) < 1)\n    ) {\n      return;\n    }\n\n    this._clicks.push(newClick);\n\n    // If this is the first new click, set a timeout to check for multi clicks\n    if (this._clicks.length === 1) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** @inheritDoc */\n   registerMutation(timestamp = Date.now()) {\n    this._lastMutation = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n   registerScroll(timestamp = Date.now()) {\n    this._lastScroll = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n   registerClick(element) {\n    const node = getClosestInteractive(element);\n    this._handleMultiClick(node );\n  }\n\n  /** Count multiple clicks on elements. */\n   _handleMultiClick(node) {\n    this._getClicks(node).forEach(click => {\n      click.clickCount++;\n    });\n  }\n\n  /** Get all pending clicks for a given node. */\n   _getClicks(node) {\n    return this._clicks.filter(click => click.node === node);\n  }\n\n  /** Check the clicks that happened. */\n   _checkClicks() {\n    const timedOutClicks = [];\n\n    const now = nowInSeconds();\n\n    this._clicks.forEach(click => {\n      if (!click.mutationAfter && this._lastMutation) {\n        click.mutationAfter = click.timestamp <= this._lastMutation ? this._lastMutation - click.timestamp : undefined;\n      }\n      if (!click.scrollAfter && this._lastScroll) {\n        click.scrollAfter = click.timestamp <= this._lastScroll ? this._lastScroll - click.timestamp : undefined;\n      }\n\n      // All of these are in seconds!\n      if (click.timestamp + this._timeout <= now) {\n        timedOutClicks.push(click);\n      }\n    });\n\n    // Remove \"old\" clicks\n    for (const click of timedOutClicks) {\n      const pos = this._clicks.indexOf(click);\n\n      if (pos > -1) {\n        this._generateBreadcrumbs(click);\n        this._clicks.splice(pos, 1);\n      }\n    }\n\n    // Trigger new check, unless no clicks left\n    if (this._clicks.length) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** Generate matching breadcrumb(s) for the click. */\n   _generateBreadcrumbs(click) {\n    const replay = this._replay;\n    const hadScroll = click.scrollAfter && click.scrollAfter <= this._scollTimeout;\n    const hadMutation = click.mutationAfter && click.mutationAfter <= this._threshold;\n\n    const isSlowClick = !hadScroll && !hadMutation;\n    const { clickCount, clickBreadcrumb } = click;\n\n    // Slow click\n    if (isSlowClick) {\n      // If `mutationAfter` is set, it means a mutation happened after the threshold, but before the timeout\n      // If not, it means we just timed out without scroll & mutation\n      const timeAfterClickMs = Math.min(click.mutationAfter || this._timeout, this._timeout) * 1000;\n      const endReason = timeAfterClickMs < this._timeout * 1000 ? 'mutation' : 'timeout';\n\n      const breadcrumb = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.slowClickDetected',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          timeAfterClickMs,\n          endReason,\n          // If clickCount === 0, it means multiClick was not correctly captured here\n          // - we still want to send 1 in this case\n          clickCount: clickCount || 1,\n        },\n      };\n\n      this._addBreadcrumbEvent(replay, breadcrumb);\n      return;\n    }\n\n    // Multi click\n    if (clickCount > 1) {\n      const breadcrumb = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.multiClick',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          clickCount,\n          metric: true,\n        },\n      };\n\n      this._addBreadcrumbEvent(replay, breadcrumb);\n    }\n  }\n\n  /** Schedule to check current clicks. */\n   _scheduleCheckClicks() {\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n\n    this._checkClickTimeout = setTimeout$2(() => this._checkClicks(), 1000);\n  }\n}\n\nconst SLOW_CLICK_TAGS = ['A', 'BUTTON', 'INPUT'];\n\n/** exported for tests only */\nfunction ignoreElement(node, ignoreSelector) {\n  if (!SLOW_CLICK_TAGS.includes(node.tagName)) {\n    return true;\n  }\n\n  // If <input> tag, we only want to consider input[type='submit'] & input[type='button']\n  if (node.tagName === 'INPUT' && !['submit', 'button'].includes(node.getAttribute('type') || '')) {\n    return true;\n  }\n\n  // If <a> tag, detect special variants that may not lead to an action\n  // If target !== _self, we may open the link somewhere else, which would lead to no action\n  // Also, when downloading a file, we may not leave the page, but still not trigger an action\n  if (\n    node.tagName === 'A' &&\n    (node.hasAttribute('download') || (node.hasAttribute('target') && node.getAttribute('target') !== '_self'))\n  ) {\n    return true;\n  }\n\n  if (ignoreSelector && node.matches(ignoreSelector)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isClickBreadcrumb(breadcrumb) {\n  return !!(breadcrumb.data && typeof breadcrumb.data.nodeId === 'number' && breadcrumb.timestamp);\n}\n\n// This is good enough for us, and is easier to test/mock than `timestampInSeconds`\nfunction nowInSeconds() {\n  return Date.now() / 1000;\n}\n\n/** Update the click detector based on a recording event of rrweb. */\nfunction updateClickDetectorForRecordingEvent(clickDetector, event) {\n  try {\n    // note: We only consider incremental snapshots here\n    // This means that any full snapshot is ignored for mutation detection - the reason is that we simply cannot know if a mutation happened here.\n    // E.g. think that we are buffering, an error happens and we take a full snapshot because we switched to session mode -\n    // in this scenario, we would not know if a dead click happened because of the error, which is a key dead click scenario.\n    // Instead, by ignoring full snapshots, we have the risk that we generate a false positive\n    // (if a mutation _did_ happen but was \"swallowed\" by the full snapshot)\n    // But this should be more unlikely as we'd generally capture the incremental snapshot right away\n\n    if (!isIncrementalEvent(event)) {\n      return;\n    }\n\n    const { source } = event.data;\n    if (source === IncrementalSource.Mutation) {\n      clickDetector.registerMutation(event.timestamp);\n    }\n\n    if (source === IncrementalSource.Scroll) {\n      clickDetector.registerScroll(event.timestamp);\n    }\n\n    if (isIncrementalMouseInteraction(event)) {\n      const { type, id } = event.data;\n      const node = record.mirror.getNode(id);\n\n      if (node instanceof HTMLElement && type === MouseInteractions.Click) {\n        clickDetector.registerClick(node);\n      }\n    }\n  } catch (e) {\n    // ignore errors here, e.g. if accessing something that does not exist\n  }\n}\n\nfunction isIncrementalEvent(event) {\n  return event.type === ReplayEventTypeIncrementalSnapshot;\n}\n\nfunction isIncrementalMouseInteraction(\n  event,\n) {\n  return event.data.source === IncrementalSource.MouseInteraction;\n}\n\n/**\n * Create a breadcrumb for a replay.\n */\nfunction createBreadcrumb(\n  breadcrumb,\n) {\n  return {\n    timestamp: Date.now() / 1000,\n    type: 'default',\n    ...breadcrumb,\n  };\n}\n\nvar NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\n// Note that these are the serialized attributes and not attributes directly on\n// the DOM Node. Attributes we are interested in:\nconst ATTRIBUTES_TO_RECORD = new Set([\n  'id',\n  'class',\n  'aria-label',\n  'role',\n  'name',\n  'alt',\n  'title',\n  'data-test-id',\n  'data-testid',\n  'disabled',\n  'aria-disabled',\n  'data-sentry-component',\n]);\n\n/**\n * Inclusion list of attributes that we want to record from the DOM element\n */\nfunction getAttributesToRecord(attributes) {\n  const obj = {};\n  if (!attributes['data-sentry-component'] && attributes['data-sentry-element']) {\n    attributes['data-sentry-component'] = attributes['data-sentry-element'];\n  }\n  for (const key in attributes) {\n    if (ATTRIBUTES_TO_RECORD.has(key)) {\n      let normalizedKey = key;\n\n      if (key === 'data-testid' || key === 'data-test-id') {\n        normalizedKey = 'testId';\n      }\n\n      obj[normalizedKey] = attributes[key];\n    }\n  }\n\n  return obj;\n}\n\nconst handleDomListener = (\n  replay,\n) => {\n  return (handlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleDom(handlerData);\n\n    if (!result) {\n      return;\n    }\n\n    const isClick = handlerData.name === 'click';\n    const event = isClick ? (handlerData.event ) : undefined;\n    // Ignore clicks if ctrl/alt/meta/shift keys are held down as they alter behavior of clicks (e.g. open in new tab)\n    if (\n      isClick &&\n      replay.clickDetector &&\n      event &&\n      event.target &&\n      !event.altKey &&\n      !event.metaKey &&\n      !event.ctrlKey &&\n      !event.shiftKey\n    ) {\n      handleClick(\n        replay.clickDetector,\n        result ,\n        getClickTargetNode(handlerData.event ) ,\n      );\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n};\n\n/** Get the base DOM breadcrumb. */\nfunction getBaseDomBreadcrumb(target, message) {\n  const nodeId = record.mirror.getId(target);\n  const node = nodeId && record.mirror.getNode(nodeId);\n  const meta = node && record.mirror.getMeta(node);\n  const element = meta && isElement(meta) ? meta : null;\n\n  return {\n    message,\n    data: element\n      ? {\n          nodeId,\n          node: {\n            id: nodeId,\n            tagName: element.tagName,\n            textContent: Array.from(element.childNodes)\n              .map((node) => node.type === NodeType.Text && node.textContent)\n              .filter(Boolean) // filter out empty values\n              .map(text => (text ).trim())\n              .join(''),\n            attributes: getAttributesToRecord(element.attributes),\n          },\n        }\n      : {},\n  };\n}\n\n/**\n * An event handler to react to DOM events.\n * Exported for tests.\n */\nfunction handleDom(handlerData) {\n  const { target, message } = getDomTarget(handlerData);\n\n  return createBreadcrumb({\n    category: `ui.${handlerData.name}`,\n    ...getBaseDomBreadcrumb(target, message),\n  });\n}\n\nfunction getDomTarget(handlerData) {\n  const isClick = handlerData.name === 'click';\n\n  let message;\n  let target = null;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    target = isClick ? getClickTargetNode(handlerData.event ) : getTargetNode(handlerData.event );\n    message = htmlTreeAsString(target, { maxStringLength: 200 }) || '<unknown>';\n  } catch (e) {\n    message = '<unknown>';\n  }\n\n  return { target, message };\n}\n\nfunction isElement(node) {\n  return node.type === NodeType.Element;\n}\n\n/** Handle keyboard events & create breadcrumbs. */\nfunction handleKeyboardEvent(replay, event) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  // Update user activity, but do not restart recording as it can create\n  // noisy/low-value replays (e.g. user comes back from idle, hits alt-tab, new\n  // session with a single \"keydown\" breadcrumb is created)\n  replay.updateUserActivity();\n\n  const breadcrumb = getKeyboardBreadcrumb(event);\n\n  if (!breadcrumb) {\n    return;\n  }\n\n  addBreadcrumbEvent(replay, breadcrumb);\n}\n\n/** exported only for tests */\nfunction getKeyboardBreadcrumb(event) {\n  const { metaKey, shiftKey, ctrlKey, altKey, key, target } = event;\n\n  // never capture for input fields\n  if (!target || isInputElement(target ) || !key) {\n    return null;\n  }\n\n  // Note: We do not consider shift here, as that means \"uppercase\"\n  const hasModifierKey = metaKey || ctrlKey || altKey;\n  const isCharacterKey = key.length === 1; // other keys like Escape, Tab, etc have a longer length\n\n  // Do not capture breadcrumb if only a word key is pressed\n  // This could leak e.g. user input\n  if (!hasModifierKey && isCharacterKey) {\n    return null;\n  }\n\n  const message = htmlTreeAsString(target, { maxStringLength: 200 }) || '<unknown>';\n  const baseBreadcrumb = getBaseDomBreadcrumb(target , message);\n\n  return createBreadcrumb({\n    category: 'ui.keyDown',\n    message,\n    data: {\n      ...baseBreadcrumb.data,\n      metaKey,\n      shiftKey,\n      ctrlKey,\n      altKey,\n      key,\n    },\n  });\n}\n\nfunction isInputElement(target) {\n  return target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;\n}\n\n// Map entryType -> function to normalize data for event\nconst ENTRY_TYPES\n\n = {\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry,\n};\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nfunction createPerformanceEntries(\n  entries,\n) {\n  return entries.map(createPerformanceEntry).filter(Boolean) ;\n}\n\nfunction createPerformanceEntry(entry) {\n  if (!ENTRY_TYPES[entry.entryType]) {\n    return null;\n  }\n\n  return ENTRY_TYPES[entry.entryType](entry);\n}\n\nfunction getAbsoluteTime(time) {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\n\nfunction createPaintEntry(entry) {\n  const { duration, entryType, name, startTime } = entry;\n\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration,\n    data: undefined,\n  };\n}\n\nfunction createNavigationEntry(entry) {\n  const {\n    entryType,\n    name,\n    decodedBodySize,\n    duration,\n    domComplete,\n    encodedBodySize,\n    domContentLoadedEventStart,\n    domContentLoadedEventEnd,\n    domInteractive,\n    loadEventStart,\n    loadEventEnd,\n    redirectCount,\n    startTime,\n    transferSize,\n    type,\n  } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      decodedBodySize,\n      encodedBodySize,\n      duration,\n      domInteractive,\n      domContentLoadedEventStart,\n      domContentLoadedEventEnd,\n      loadEventStart,\n      loadEventEnd,\n      domComplete,\n      redirectCount,\n    },\n  };\n}\n\nfunction createResourceEntry(\n  entry,\n) {\n  const {\n    entryType,\n    initiatorType,\n    name,\n    responseEnd,\n    startTime,\n    decodedBodySize,\n    encodedBodySize,\n    responseStatus,\n    transferSize,\n  } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      statusCode: responseStatus,\n      decodedBodySize,\n      encodedBodySize,\n    },\n  };\n}\n\n/**\n * Add a LCP event to the replay based on an LCP metric.\n */\nfunction getLargestContentfulPaint(metric\n\n) {\n  const entries = metric.entries;\n  const lastEntry = entries[entries.length - 1] ;\n  const element = lastEntry ? lastEntry.element : undefined;\n\n  const value = metric.value;\n\n  const end = getAbsoluteTime(value);\n\n  const data = {\n    type: 'largest-contentful-paint',\n    name: 'largest-contentful-paint',\n    start: end,\n    end,\n    data: {\n      value,\n      size: value,\n      nodeId: element ? record.mirror.getId(element) : undefined,\n    },\n  };\n\n  return data;\n}\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n * Returns a callback to stop observing.\n */\nfunction setupPerformanceObserver(replay) {\n  function addPerformanceEntry(entry) {\n    // It is possible for entries to come up multiple times\n    if (!replay.performanceEntries.includes(entry)) {\n      replay.performanceEntries.push(entry);\n    }\n  }\n\n  function onEntries({ entries }) {\n    entries.forEach(addPerformanceEntry);\n  }\n\n  const clearCallbacks = [];\n\n  (['navigation', 'paint', 'resource'] ).forEach(type => {\n    clearCallbacks.push(addPerformanceInstrumentationHandler(type, onEntries));\n  });\n\n  clearCallbacks.push(\n    addLcpInstrumentationHandler(({ metric }) => {\n      replay.replayPerformanceEntries.push(getLargestContentfulPaint(metric));\n    }),\n  );\n\n  // A callback to cleanup all handlers\n  return () => {\n    clearCallbacks.forEach(clearCallback => clearCallback());\n  };\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nconst r = `var t=Uint8Array,n=Uint16Array,r=Int32Array,e=new t([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),i=new t([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),a=new t([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=function(t,e){for(var i=new n(31),a=0;a<31;++a)i[a]=e+=1<<t[a-1];var s=new r(i[30]);for(a=1;a<30;++a)for(var o=i[a];o<i[a+1];++o)s[o]=o-i[a]<<5|a;return{b:i,r:s}},o=s(e,2),f=o.b,h=o.r;f[28]=258,h[258]=28;for(var l=s(i,0).r,u=new n(32768),c=0;c<32768;++c){var v=(43690&c)>>1|(21845&c)<<1;v=(61680&(v=(52428&v)>>2|(13107&v)<<2))>>4|(3855&v)<<4,u[c]=((65280&v)>>8|(255&v)<<8)>>1}var d=function(t,r,e){for(var i=t.length,a=0,s=new n(r);a<i;++a)t[a]&&++s[t[a]-1];var o,f=new n(r);for(a=1;a<r;++a)f[a]=f[a-1]+s[a-1]<<1;if(e){o=new n(1<<r);var h=15-r;for(a=0;a<i;++a)if(t[a])for(var l=a<<4|t[a],c=r-t[a],v=f[t[a]-1]++<<c,d=v|(1<<c)-1;v<=d;++v)o[u[v]>>h]=l}else for(o=new n(i),a=0;a<i;++a)t[a]&&(o[a]=u[f[t[a]-1]++]>>15-t[a]);return o},g=new t(288);for(c=0;c<144;++c)g[c]=8;for(c=144;c<256;++c)g[c]=9;for(c=256;c<280;++c)g[c]=7;for(c=280;c<288;++c)g[c]=8;var w=new t(32);for(c=0;c<32;++c)w[c]=5;var p=d(g,9,0),y=d(w,5,0),m=function(t){return(t+7)/8|0},b=function(n,r,e){return(null==r||r<0)&&(r=0),(null==e||e>n.length)&&(e=n.length),new t(n.subarray(r,e))},M=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],E=function(t,n,r){var e=new Error(n||M[t]);if(e.code=t,Error.captureStackTrace&&Error.captureStackTrace(e,E),!r)throw e;return e},z=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8},A=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8,t[e+2]|=r>>16},_=function(r,e){for(var i=[],a=0;a<r.length;++a)r[a]&&i.push({s:a,f:r[a]});var s=i.length,o=i.slice();if(!s)return{t:F,l:0};if(1==s){var f=new t(i[0].s+1);return f[i[0].s]=1,{t:f,l:1}}i.sort((function(t,n){return t.f-n.f})),i.push({s:-1,f:25001});var h=i[0],l=i[1],u=0,c=1,v=2;for(i[0]={s:-1,f:h.f+l.f,l:h,r:l};c!=s-1;)h=i[i[u].f<i[v].f?u++:v++],l=i[u!=c&&i[u].f<i[v].f?u++:v++],i[c++]={s:-1,f:h.f+l.f,l:h,r:l};var d=o[0].s;for(a=1;a<s;++a)o[a].s>d&&(d=o[a].s);var g=new n(d+1),w=x(i[c-1],g,0);if(w>e){a=0;var p=0,y=w-e,m=1<<y;for(o.sort((function(t,n){return g[n.s]-g[t.s]||t.f-n.f}));a<s;++a){var b=o[a].s;if(!(g[b]>e))break;p+=m-(1<<w-g[b]),g[b]=e}for(p>>=y;p>0;){var M=o[a].s;g[M]<e?p-=1<<e-g[M]++-1:++a}for(;a>=0&&p;--a){var E=o[a].s;g[E]==e&&(--g[E],++p)}w=e}return{t:new t(g),l:w}},x=function(t,n,r){return-1==t.s?Math.max(x(t.l,n,r+1),x(t.r,n,r+1)):n[t.s]=r},D=function(t){for(var r=t.length;r&&!t[--r];);for(var e=new n(++r),i=0,a=t[0],s=1,o=function(t){e[i++]=t},f=1;f<=r;++f)if(t[f]==a&&f!=r)++s;else{if(!a&&s>2){for(;s>138;s-=138)o(32754);s>2&&(o(s>10?s-11<<5|28690:s-3<<5|12305),s=0)}else if(s>3){for(o(a),--s;s>6;s-=6)o(8304);s>2&&(o(s-3<<5|8208),s=0)}for(;s--;)o(a);s=1,a=t[f]}return{c:e.subarray(0,i),n:r}},T=function(t,n){for(var r=0,e=0;e<n.length;++e)r+=t[e]*n[e];return r},k=function(t,n,r){var e=r.length,i=m(n+2);t[i]=255&e,t[i+1]=e>>8,t[i+2]=255^t[i],t[i+3]=255^t[i+1];for(var a=0;a<e;++a)t[i+a+4]=r[a];return 8*(i+4+e)},C=function(t,r,s,o,f,h,l,u,c,v,m){z(r,m++,s),++f[256];for(var b=_(f,15),M=b.t,E=b.l,x=_(h,15),C=x.t,U=x.l,F=D(M),I=F.c,S=F.n,L=D(C),O=L.c,j=L.n,q=new n(19),B=0;B<I.length;++B)++q[31&I[B]];for(B=0;B<O.length;++B)++q[31&O[B]];for(var G=_(q,7),H=G.t,J=G.l,K=19;K>4&&!H[a[K-1]];--K);var N,P,Q,R,V=v+5<<3,W=T(f,g)+T(h,w)+l,X=T(f,M)+T(h,C)+l+14+3*K+T(q,H)+2*q[16]+3*q[17]+7*q[18];if(c>=0&&V<=W&&V<=X)return k(r,m,t.subarray(c,c+v));if(z(r,m,1+(X<W)),m+=2,X<W){N=d(M,E,0),P=M,Q=d(C,U,0),R=C;var Y=d(H,J,0);z(r,m,S-257),z(r,m+5,j-1),z(r,m+10,K-4),m+=14;for(B=0;B<K;++B)z(r,m+3*B,H[a[B]]);m+=3*K;for(var Z=[I,O],$=0;$<2;++$){var tt=Z[$];for(B=0;B<tt.length;++B){var nt=31&tt[B];z(r,m,Y[nt]),m+=H[nt],nt>15&&(z(r,m,tt[B]>>5&127),m+=tt[B]>>12)}}}else N=p,P=g,Q=y,R=w;for(B=0;B<u;++B){var rt=o[B];if(rt>255){A(r,m,N[(nt=rt>>18&31)+257]),m+=P[nt+257],nt>7&&(z(r,m,rt>>23&31),m+=e[nt]);var et=31&rt;A(r,m,Q[et]),m+=R[et],et>3&&(A(r,m,rt>>5&8191),m+=i[et])}else A(r,m,N[rt]),m+=P[rt]}return A(r,m,N[256]),m+P[256]},U=new r([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),F=new t(0),I=function(){for(var t=new Int32Array(256),n=0;n<256;++n){for(var r=n,e=9;--e;)r=(1&r&&-306674912)^r>>>1;t[n]=r}return t}(),S=function(){var t=-1;return{p:function(n){for(var r=t,e=0;e<n.length;++e)r=I[255&r^n[e]]^r>>>8;t=r},d:function(){return~t}}},L=function(){var t=1,n=0;return{p:function(r){for(var e=t,i=n,a=0|r.length,s=0;s!=a;){for(var o=Math.min(s+2655,a);s<o;++s)i+=e+=r[s];e=(65535&e)+15*(e>>16),i=(65535&i)+15*(i>>16)}t=e,n=i},d:function(){return(255&(t%=65521))<<24|(65280&t)<<8|(255&(n%=65521))<<8|n>>8}}},O=function(a,s,o,f,u){if(!u&&(u={l:1},s.dictionary)){var c=s.dictionary.subarray(-32768),v=new t(c.length+a.length);v.set(c),v.set(a,c.length),a=v,u.w=c.length}return function(a,s,o,f,u,c){var v=c.z||a.length,d=new t(f+v+5*(1+Math.ceil(v/7e3))+u),g=d.subarray(f,d.length-u),w=c.l,p=7&(c.r||0);if(s){p&&(g[0]=c.r>>3);for(var y=U[s-1],M=y>>13,E=8191&y,z=(1<<o)-1,A=c.p||new n(32768),_=c.h||new n(z+1),x=Math.ceil(o/3),D=2*x,T=function(t){return(a[t]^a[t+1]<<x^a[t+2]<<D)&z},F=new r(25e3),I=new n(288),S=new n(32),L=0,O=0,j=c.i||0,q=0,B=c.w||0,G=0;j+2<v;++j){var H=T(j),J=32767&j,K=_[H];if(A[J]=K,_[H]=J,B<=j){var N=v-j;if((L>7e3||q>24576)&&(N>423||!w)){p=C(a,g,0,F,I,S,O,q,G,j-G,p),q=L=O=0,G=j;for(var P=0;P<286;++P)I[P]=0;for(P=0;P<30;++P)S[P]=0}var Q=2,R=0,V=E,W=J-K&32767;if(N>2&&H==T(j-W))for(var X=Math.min(M,N)-1,Y=Math.min(32767,j),Z=Math.min(258,N);W<=Y&&--V&&J!=K;){if(a[j+Q]==a[j+Q-W]){for(var $=0;$<Z&&a[j+$]==a[j+$-W];++$);if($>Q){if(Q=$,R=W,$>X)break;var tt=Math.min(W,$-2),nt=0;for(P=0;P<tt;++P){var rt=j-W+P&32767,et=rt-A[rt]&32767;et>nt&&(nt=et,K=rt)}}}W+=(J=K)-(K=A[J])&32767}if(R){F[q++]=268435456|h[Q]<<18|l[R];var it=31&h[Q],at=31&l[R];O+=e[it]+i[at],++I[257+it],++S[at],B=j+Q,++L}else F[q++]=a[j],++I[a[j]]}}for(j=Math.max(j,B);j<v;++j)F[q++]=a[j],++I[a[j]];p=C(a,g,w,F,I,S,O,q,G,j-G,p),w||(c.r=7&p|g[p/8|0]<<3,p-=7,c.h=_,c.p=A,c.i=j,c.w=B)}else{for(j=c.w||0;j<v+w;j+=65535){var st=j+65535;st>=v&&(g[p/8|0]=w,st=v),p=k(g,p+1,a.subarray(j,st))}c.i=v}return b(d,0,f+m(p)+u)}(a,null==s.level?6:s.level,null==s.mem?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(a.length)))):12+s.mem,o,f,u)},j=function(t,n,r){for(;r;++n)t[n]=r,r>>>=8},q=function(t,n){var r=n.filename;if(t[0]=31,t[1]=139,t[2]=8,t[8]=n.level<2?4:9==n.level?2:0,t[9]=3,0!=n.mtime&&j(t,4,Math.floor(new Date(n.mtime||Date.now())/1e3)),r){t[3]=8;for(var e=0;e<=r.length;++e)t[e+10]=r.charCodeAt(e)}},B=function(t){return 10+(t.filename?t.filename.length+1:0)},G=function(){function n(n,r){if(\"function\"==typeof n&&(r=n,n={}),this.ondata=r,this.o=n||{},this.s={l:0,i:32768,w:32768,z:32768},this.b=new t(98304),this.o.dictionary){var e=this.o.dictionary.subarray(-32768);this.b.set(e,32768-e.length),this.s.i=32768-e.length}}return n.prototype.p=function(t,n){this.ondata(O(t,this.o,0,0,this.s),n)},n.prototype.push=function(n,r){this.ondata||E(5),this.s.l&&E(4);var e=n.length+this.s.z;if(e>this.b.length){if(e>2*this.b.length-32768){var i=new t(-32768&e);i.set(this.b.subarray(0,this.s.z)),this.b=i}var a=this.b.length-this.s.z;a&&(this.b.set(n.subarray(0,a),this.s.z),this.s.z=this.b.length,this.p(this.b,!1)),this.b.set(this.b.subarray(-32768)),this.b.set(n.subarray(a),32768),this.s.z=n.length-a+32768,this.s.i=32766,this.s.w=32768}else this.b.set(n,this.s.z),this.s.z+=n.length;this.s.l=1&r,(this.s.z>this.s.w+8191||r)&&(this.p(this.b,r||!1),this.s.w=this.s.i,this.s.i-=2)},n}();var H=function(){function t(t,n){this.c=L(),this.v=1,G.call(this,t,n)}return t.prototype.push=function(t,n){this.c.p(t),G.prototype.push.call(this,t,n)},t.prototype.p=function(t,n){var r=O(t,this.o,this.v&&(this.o.dictionary?6:2),n&&4,this.s);this.v&&(function(t,n){var r=n.level,e=0==r?0:r<6?1:9==r?3:2;if(t[0]=120,t[1]=e<<6|(n.dictionary&&32),t[1]|=31-(t[0]<<8|t[1])%31,n.dictionary){var i=L();i.p(n.dictionary),j(t,2,i.d())}}(r,this.o),this.v=0),n&&j(r,r.length-4,this.c.d()),this.ondata(r,n)},t}(),J=\"undefined\"!=typeof TextEncoder&&new TextEncoder,K=\"undefined\"!=typeof TextDecoder&&new TextDecoder;try{K.decode(F,{stream:!0})}catch(t){}var N=function(){function t(t){this.ondata=t}return t.prototype.push=function(t,n){this.ondata||E(5),this.d&&E(4),this.ondata(P(t),this.d=n||!1)},t}();function P(n,r){if(r){for(var e=new t(n.length),i=0;i<n.length;++i)e[i]=n.charCodeAt(i);return e}if(J)return J.encode(n);var a=n.length,s=new t(n.length+(n.length>>1)),o=0,f=function(t){s[o++]=t};for(i=0;i<a;++i){if(o+5>s.length){var h=new t(o+8+(a-i<<1));h.set(s),s=h}var l=n.charCodeAt(i);l<128||r?f(l):l<2048?(f(192|l>>6),f(128|63&l)):l>55295&&l<57344?(f(240|(l=65536+(1047552&l)|1023&n.charCodeAt(++i))>>18),f(128|l>>12&63),f(128|l>>6&63),f(128|63&l)):(f(224|l>>12),f(128|l>>6&63),f(128|63&l))}return b(s,0,o)}function Q(t){return function(t,n){n||(n={});var r=S(),e=t.length;r.p(t);var i=O(t,n,B(n),8),a=i.length;return q(i,n),j(i,a-8,r.d()),j(i,a-4,e),i}(P(t))}const R=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const n=this._hasEvents?\",\":\"\";this.stream.push(n+t),this._hasEvents=!0}finish(){this.stream.push(\"]\",!0);const t=function(t){let n=0;for(let r=0,e=t.length;r<e;r++)n+=t[r].length;const r=new Uint8Array(n);for(let n=0,e=0,i=t.length;n<i;n++){const i=t[n];r.set(i,e),e+=i.length}return r}(this._deflatedData);return this._init(),t}_init(){this._hasEvents=!1,this._deflatedData=[],this.deflate=new H,this.deflate.ondata=(t,n)=>{this._deflatedData.push(t)},this.stream=new N(((t,n)=>{this.deflate.push(t,n)})),this.stream.push(\"[\")}},V={clear:()=>{R.clear()},addEvent:t=>R.addEvent(t),finish:()=>R.finish(),compress:t=>Q(t)};addEventListener(\"message\",(function(t){const n=t.data.method,r=t.data.id,e=t.data.arg;if(n in V&&\"function\"==typeof V[n])try{const t=V[n](e);postMessage({id:r,method:n,success:!0,response:t})}catch(t){postMessage({id:r,method:n,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\n\nfunction e(){const e=new Blob([r]);return URL.createObjectURL(e)}\n\n/**\n * Log a message in debug mode, and add a breadcrumb when _experiment.traceInternals is enabled.\n */\nfunction logInfo(message, shouldAddBreadcrumb) {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  logger.info(message);\n\n  if (shouldAddBreadcrumb) {\n    addLogBreadcrumb(message);\n  }\n}\n\n/**\n * Log a message, and add a breadcrumb in the next tick.\n * This is necessary when the breadcrumb may be added before the replay is initialized.\n */\nfunction logInfoNextTick(message, shouldAddBreadcrumb) {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  logger.info(message);\n\n  if (shouldAddBreadcrumb) {\n    // Wait a tick here to avoid race conditions for some initial logs\n    // which may be added before replay is initialized\n    setTimeout$2(() => {\n      addLogBreadcrumb(message);\n    }, 0);\n  }\n}\n\nfunction addLogBreadcrumb(message) {\n  addBreadcrumb(\n    {\n      category: 'console',\n      data: {\n        logger: 'replay',\n      },\n      level: 'info',\n      message,\n    },\n    { level: 'info' },\n  );\n}\n\n/** This error indicates that the event buffer size exceeded the limit.. */\nclass EventBufferSizeExceededError extends Error {\n   constructor() {\n    super(`Event buffer exceeded maximum size of ${REPLAY_MAX_EVENT_BUFFER_SIZE}.`);\n  }\n}\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nclass EventBufferArray  {\n  /** All the events that are buffered to be sent. */\n\n  /** @inheritdoc */\n\n   constructor() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n   get hasEvents() {\n    return this.events.length > 0;\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return 'sync';\n  }\n\n  /** @inheritdoc */\n   destroy() {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n   async addEvent(event) {\n    const eventSize = JSON.stringify(event).length;\n    this._totalSize += eventSize;\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      throw new EventBufferSizeExceededError();\n    }\n\n    this.events.push(event);\n  }\n\n  /** @inheritdoc */\n   finish() {\n    return new Promise(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this.events;\n      this.clear();\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n\n  /** @inheritdoc */\n   clear() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    const timestamp = this.events.map(event => event.timestamp).sort()[0];\n\n    if (!timestamp) {\n      return null;\n    }\n\n    return timestampToMs(timestamp);\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass WorkerHandler {\n\n   constructor(worker) {\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n   ensureReady() {\n    // Ensure we only check once\n    if (this._ensureReadyPromise) {\n      return this._ensureReadyPromise;\n    }\n\n    this._ensureReadyPromise = new Promise((resolve, reject) => {\n      this._worker.addEventListener(\n        'message',\n        ({ data }) => {\n          if ((data ).success) {\n            resolve();\n          } else {\n            reject();\n          }\n        },\n        { once: true },\n      );\n\n      this._worker.addEventListener(\n        'error',\n        error => {\n          reject(error);\n        },\n        { once: true },\n      );\n    });\n\n    return this._ensureReadyPromise;\n  }\n\n  /**\n   * Destroy the worker.\n   */\n   destroy() {\n    logInfo('[Replay] Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n   postMessage(method, arg) {\n    const id = this._getAndIncrementId();\n\n    return new Promise((resolve, reject) => {\n      const listener = ({ data }) => {\n        const response = data ;\n        if (response.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (response.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n\n        if (!response.success) {\n          // TODO: Do some error handling, not sure what\n          DEBUG_BUILD && logger.error('[Replay]', response.response);\n\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n\n        resolve(response.response );\n      };\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({ id, method, arg });\n    });\n  }\n\n  /** Get the current ID and increment it for the next call. */\n   _getAndIncrementId() {\n    return this._id++;\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass EventBufferCompressionWorker  {\n  /** @inheritdoc */\n\n   constructor(worker) {\n    this._worker = new WorkerHandler(worker);\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n   get hasEvents() {\n    return !!this._earliestTimestamp;\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return 'worker';\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n   ensureReady() {\n    return this._worker.ensureReady();\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n   destroy() {\n    this._worker.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfuly received and processed by worker.\n   */\n   addEvent(event) {\n    const timestamp = timestampToMs(event.timestamp);\n    if (!this._earliestTimestamp || timestamp < this._earliestTimestamp) {\n      this._earliestTimestamp = timestamp;\n    }\n\n    const data = JSON.stringify(event);\n    this._totalSize += data.length;\n\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      return Promise.reject(new EventBufferSizeExceededError());\n    }\n\n    return this._sendEventToWorker(data);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n   finish() {\n    return this._finishRequest();\n  }\n\n  /** @inheritdoc */\n   clear() {\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n\n    // We do not wait on this, as we assume the order of messages is consistent for the worker\n    this._worker.postMessage('clear').then(null, e => {\n      DEBUG_BUILD && logger.warn('[Replay] Sending \"clear\" message to worker failed', e);\n    });\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    return this._earliestTimestamp;\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n   _sendEventToWorker(data) {\n    return this._worker.postMessage('addEvent', data);\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n   async _finishRequest() {\n    const response = await this._worker.postMessage('finish');\n\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n\n    return response;\n  }\n}\n\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nclass EventBufferProxy  {\n\n   constructor(worker) {\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return this._used.type;\n  }\n\n  /** @inheritDoc */\n   get hasEvents() {\n    return this._used.hasEvents;\n  }\n\n  /** @inheritdoc */\n   get hasCheckout() {\n    return this._used.hasCheckout;\n  }\n  /** @inheritdoc */\n   set hasCheckout(value) {\n    this._used.hasCheckout = value;\n  }\n\n  /** @inheritDoc */\n   destroy() {\n    this._fallback.destroy();\n    this._compression.destroy();\n  }\n\n  /** @inheritdoc */\n   clear() {\n    return this._used.clear();\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    return this._used.getEarliestTimestamp();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully added.\n   */\n   addEvent(event) {\n    return this._used.addEvent(event);\n  }\n\n  /** @inheritDoc */\n   async finish() {\n    // Ensure the worker is loaded, so the sent event is compressed\n    await this.ensureWorkerIsLoaded();\n\n    return this._used.finish();\n  }\n\n  /** Ensure the worker has loaded. */\n   ensureWorkerIsLoaded() {\n    return this._ensureWorkerIsLoadedPromise;\n  }\n\n  /** Actually check if the worker has been loaded. */\n   async _ensureWorkerIsLoaded() {\n    try {\n      await this._compression.ensureReady();\n    } catch (error) {\n      // If the worker fails to load, we fall back to the simple buffer.\n      // Nothing more to do from our side here\n      logInfo('[Replay] Failed to load the compression worker, falling back to simple buffer');\n      return;\n    }\n\n    // Now we need to switch over the array buffer to the compression worker\n    await this._switchToCompressionWorker();\n  }\n\n  /** Switch the used buffer to the compression worker. */\n   async _switchToCompressionWorker() {\n    const { events, hasCheckout } = this._fallback;\n\n    const addEventPromises = [];\n    for (const event of events) {\n      addEventPromises.push(this._compression.addEvent(event));\n    }\n\n    this._compression.hasCheckout = hasCheckout;\n\n    // We switch over to the new buffer immediately - any further events will be added\n    // after the previously buffered ones\n    this._used = this._compression;\n\n    // Wait for original events to be re-added before resolving\n    try {\n      await Promise.all(addEventPromises);\n    } catch (error) {\n      DEBUG_BUILD && logger.warn('[Replay] Failed to add events when switching buffers.', error);\n    }\n  }\n}\n\n/**\n * Create an event buffer for replays.\n */\nfunction createEventBuffer({\n  useCompression,\n  workerUrl: customWorkerUrl,\n}) {\n  if (\n    useCompression &&\n    // eslint-disable-next-line no-restricted-globals\n    window.Worker\n  ) {\n    const worker = _loadWorker(customWorkerUrl);\n\n    if (worker) {\n      return worker;\n    }\n  }\n\n  logInfo('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\n\nfunction _loadWorker(customWorkerUrl) {\n  try {\n    const workerUrl = customWorkerUrl || _getWorkerUrl();\n\n    if (!workerUrl) {\n      return;\n    }\n\n    logInfo(`[Replay] Using compression worker${customWorkerUrl ? ` from ${customWorkerUrl}` : ''}`);\n    const worker = new Worker(workerUrl);\n    return new EventBufferProxy(worker);\n  } catch (error) {\n    logInfo('[Replay] Failed to create compression worker');\n    // Fall back to use simple event buffer array\n  }\n}\n\nfunction _getWorkerUrl() {\n  if (typeof __SENTRY_EXCLUDE_REPLAY_WORKER__ === 'undefined' || !__SENTRY_EXCLUDE_REPLAY_WORKER__) {\n    return e();\n  }\n\n  return '';\n}\n\n/** If sessionStorage is available. */\nfunction hasSessionStorage() {\n  try {\n    // This can throw, e.g. when being accessed in a sandboxed iframe\n    return 'sessionStorage' in WINDOW && !!WINDOW.sessionStorage;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Removes the session from Session Storage and unsets session in replay instance\n */\nfunction clearSession(replay) {\n  deleteSession();\n  replay.session = undefined;\n}\n\n/**\n * Deletes a session from storage\n */\nfunction deleteSession() {\n  if (!hasSessionStorage()) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.removeItem(REPLAY_SESSION_KEY);\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nfunction isSampled(sampleRate) {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n\n/**\n * Get a session with defaults & applied sampling.\n */\nfunction makeSession(session) {\n  const now = Date.now();\n  const id = session.id || uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  const started = session.started || now;\n  const lastActivity = session.lastActivity || now;\n  const segmentId = session.segmentId || 0;\n  const sampled = session.sampled;\n  const previousSessionId = session.previousSessionId;\n\n  return {\n    id,\n    started,\n    lastActivity,\n    segmentId,\n    sampled,\n    previousSessionId,\n  };\n}\n\n/**\n * Save a session to session storage.\n */\nfunction saveSession(session) {\n  if (!hasSessionStorage()) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nfunction getSessionSampleType(sessionSampleRate, allowBuffering) {\n  return isSampled(sessionSampleRate) ? 'session' : allowBuffering ? 'buffer' : false;\n}\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nfunction createSession(\n  { sessionSampleRate, allowBuffering, stickySession = false },\n  { previousSessionId } = {},\n) {\n  const sampled = getSessionSampleType(sessionSampleRate, allowBuffering);\n  const session = makeSession({\n    sampled,\n    previousSessionId,\n  });\n\n  if (stickySession) {\n    saveSession(session);\n  }\n\n  return session;\n}\n\n/**\n * Fetches a session from storage\n */\nfunction fetchSession(traceInternals) {\n  if (!hasSessionStorage()) {\n    return null;\n  }\n\n  try {\n    // This can throw if cookies are disabled\n    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n\n    const sessionObj = JSON.parse(sessionStringFromStorage) ;\n\n    logInfoNextTick('[Replay] Loading existing session', traceInternals);\n\n    return makeSession(sessionObj);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nfunction isExpired(\n  initialTime,\n  expiry,\n  targetTime = +new Date(),\n) {\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n\n  return initialTime + expiry <= targetTime;\n}\n\n/**\n * Checks to see if session is expired\n */\nfunction isSessionExpired(\n  session,\n  {\n    maxReplayDuration,\n    sessionIdleExpire,\n    targetTime = Date.now(),\n  },\n) {\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, maxReplayDuration, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `sessionIdleExpire` ms)\n    isExpired(session.lastActivity, sessionIdleExpire, targetTime)\n  );\n}\n\n/** If the session should be refreshed or not. */\nfunction shouldRefreshSession(\n  session,\n  { sessionIdleExpire, maxReplayDuration },\n) {\n  // If not expired, all good, just keep the session\n  if (!isSessionExpired(session, { sessionIdleExpire, maxReplayDuration })) {\n    return false;\n  }\n\n  // If we are buffering & haven't ever flushed yet, always continue\n  if (session.sampled === 'buffer' && session.segmentId === 0) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Get or create a session, when initializing the replay.\n * Returns a session that may be unsampled.\n */\nfunction loadOrCreateSession(\n  {\n    traceInternals,\n    sessionIdleExpire,\n    maxReplayDuration,\n    previousSessionId,\n  }\n\n,\n  sessionOptions,\n) {\n  const existingSession = sessionOptions.stickySession && fetchSession(traceInternals);\n\n  // No session exists yet, just create a new one\n  if (!existingSession) {\n    logInfoNextTick('[Replay] Creating new session', traceInternals);\n    return createSession(sessionOptions, { previousSessionId });\n  }\n\n  if (!shouldRefreshSession(existingSession, { sessionIdleExpire, maxReplayDuration })) {\n    return existingSession;\n  }\n\n  logInfoNextTick('[Replay] Session in sessionStorage is expired, creating new one...');\n  return createSession(sessionOptions, { previousSessionId: existingSession.id });\n}\n\nfunction isCustomEvent(event) {\n  return event.type === EventType.Custom;\n}\n\n/**\n * Add an event to the event buffer.\n * In contrast to `addEvent`, this does not return a promise & does not wait for the adding of the event to succeed/fail.\n * Instead this returns `true` if we tried to add the event, else false.\n * It returns `false` e.g. if we are paused, disabled, or out of the max replay duration.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEventSync(replay, event, isCheckout) {\n  if (!shouldAddEvent(replay, event)) {\n    return false;\n  }\n\n  // This should never reject\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  _addEvent(replay, event, isCheckout);\n\n  return true;\n}\n\n/**\n * Add an event to the event buffer.\n * Resolves to `null` if no event was added, else to `void`.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEvent(\n  replay,\n  event,\n  isCheckout,\n) {\n  if (!shouldAddEvent(replay, event)) {\n    return Promise.resolve(null);\n  }\n\n  return _addEvent(replay, event, isCheckout);\n}\n\nasync function _addEvent(\n  replay,\n  event,\n  isCheckout,\n) {\n  if (!replay.eventBuffer) {\n    return null;\n  }\n\n  try {\n    if (isCheckout && replay.recordingMode === 'buffer') {\n      replay.eventBuffer.clear();\n    }\n\n    if (isCheckout) {\n      replay.eventBuffer.hasCheckout = true;\n    }\n\n    const replayOptions = replay.getOptions();\n\n    const eventAfterPossibleCallback = maybeApplyCallback(event, replayOptions.beforeAddRecordingEvent);\n\n    if (!eventAfterPossibleCallback) {\n      return;\n    }\n\n    return await replay.eventBuffer.addEvent(eventAfterPossibleCallback);\n  } catch (error) {\n    const reason = error && error instanceof EventBufferSizeExceededError ? 'addEventSizeExceeded' : 'addEvent';\n\n    DEBUG_BUILD && logger.error(error);\n    await replay.stop({ reason });\n\n    const client = getClient();\n\n    if (client) {\n      client.recordDroppedEvent('internal_sdk_error', 'replay');\n    }\n  }\n}\n\n/** Exported only for tests. */\nfunction shouldAddEvent(replay, event) {\n  if (!replay.eventBuffer || replay.isPaused() || !replay.isEnabled()) {\n    return false;\n  }\n\n  const timestampInMs = timestampToMs(event.timestamp);\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + replay.timeouts.sessionIdlePause < Date.now()) {\n    return false;\n  }\n\n  // Throw out events that are +60min from the initial timestamp\n  if (timestampInMs > replay.getContext().initialTimestamp + replay.getOptions().maxReplayDuration) {\n    logInfo(\n      `[Replay] Skipping event with timestamp ${timestampInMs} because it is after maxReplayDuration`,\n      replay.getOptions()._experiments.traceInternals,\n    );\n    return false;\n  }\n\n  return true;\n}\n\nfunction maybeApplyCallback(\n  event,\n  callback,\n) {\n  try {\n    if (typeof callback === 'function' && isCustomEvent(event)) {\n      return callback(event);\n    }\n  } catch (error) {\n    DEBUG_BUILD &&\n      logger.error('[Replay] An error occured in the `beforeAddRecordingEvent` callback, skipping the event...', error);\n    return null;\n  }\n\n  return event;\n}\n\n/** If the event is an error event */\nfunction isErrorEvent(event) {\n  return !event.type;\n}\n\n/** If the event is a transaction event */\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\n/** If the event is an replay event */\nfunction isReplayEvent(event) {\n  return event.type === 'replay_event';\n}\n\n/** If the event is a feedback event */\nfunction isFeedbackEvent(event) {\n  return event.type === 'feedback';\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleAfterSendEvent(replay) {\n  return (event, sendResponse) => {\n    if (!replay.isEnabled() || (!isErrorEvent(event) && !isTransactionEvent(event))) {\n      return;\n    }\n\n    const statusCode = sendResponse && sendResponse.statusCode;\n\n    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n    // If we do use the base transport, we skip if we encountered an non-OK status code\n    if (!statusCode || statusCode < 200 || statusCode >= 300) {\n      return;\n    }\n\n    if (isTransactionEvent(event)) {\n      handleTransactionEvent(replay, event);\n      return;\n    }\n\n    handleErrorEvent(replay, event);\n  };\n}\n\nfunction handleTransactionEvent(replay, event) {\n  const replayContext = replay.getContext();\n\n  // Collect traceIds in _context regardless of `recordingMode`\n  // In error mode, _context gets cleared on every checkout\n  // We limit to max. 100 transactions linked\n  if (event.contexts && event.contexts.trace && event.contexts.trace.trace_id && replayContext.traceIds.size < 100) {\n    replayContext.traceIds.add(event.contexts.trace.trace_id );\n  }\n}\n\nfunction handleErrorEvent(replay, event) {\n  const replayContext = replay.getContext();\n\n  // Add error to list of errorIds of replay. This is ok to do even if not\n  // sampled because context will get reset at next checkout.\n  // XXX: There is also a race condition where it's possible to capture an\n  // error to Sentry before Replay SDK has loaded, but response returns after\n  // it was loaded, and this gets called.\n  // We limit to max. 100 errors linked\n  if (event.event_id && replayContext.errorIds.size < 100) {\n    replayContext.errorIds.add(event.event_id);\n  }\n\n  // If error event is tagged with replay id it means it was sampled (when in buffer mode)\n  // Need to be very careful that this does not cause an infinite loop\n  if (replay.recordingMode !== 'buffer' || !event.tags || !event.tags.replayId) {\n    return;\n  }\n\n  const { beforeErrorSampling } = replay.getOptions();\n  if (typeof beforeErrorSampling === 'function' && !beforeErrorSampling(event)) {\n    return;\n  }\n\n  setTimeout$2(() => {\n    // Capture current event buffer as new replay\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.sendBufferedReplayOrFlush();\n  });\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleBeforeSendEvent(replay) {\n  return (event) => {\n    if (!replay.isEnabled() || !isErrorEvent(event)) {\n      return;\n    }\n\n    handleHydrationError(replay, event);\n  };\n}\n\nfunction handleHydrationError(replay, event) {\n  const exceptionValue = event.exception && event.exception.values && event.exception.values[0].value;\n  if (typeof exceptionValue !== 'string') {\n    return;\n  }\n\n  if (\n    // Only matches errors in production builds of react-dom\n    // Example https://reactjs.org/docs/error-decoder.html?invariant=423\n    // With newer React versions, the messages changed to a different website https://react.dev/errors/418\n    exceptionValue.match(\n      /(reactjs\\.org\\/docs\\/error-decoder\\.html\\?invariant=|react\\.dev\\/errors\\/)(418|419|422|423|425)/,\n    ) ||\n    // Development builds of react-dom\n    // Error 1: Hydration failed because the initial UI does not match what was rendered on the server.\n    // Error 2: Text content does not match server-rendered HTML. Warning: Text content did not match.\n    exceptionValue.match(/(does not match server-rendered HTML|Hydration failed because)/i)\n  ) {\n    const breadcrumb = createBreadcrumb({\n      category: 'replay.hydrate-error',\n    });\n    addBreadcrumbEvent(replay, breadcrumb);\n  }\n}\n\n/**\n * Handle breadcrumbs that Sentry captures, and make sure to capture relevant breadcrumbs to Replay as well.\n */\nfunction handleBreadcrumbs(replay) {\n  const client = getClient();\n\n  if (!client) {\n    return;\n  }\n\n  client.on('beforeAddBreadcrumb', breadcrumb => beforeAddBreadcrumb(replay, breadcrumb));\n}\n\nfunction beforeAddBreadcrumb(replay, breadcrumb) {\n  if (!replay.isEnabled() || !isBreadcrumbWithCategory(breadcrumb)) {\n    return;\n  }\n\n  const result = normalizeBreadcrumb(breadcrumb);\n  if (result) {\n    addBreadcrumbEvent(replay, result);\n  }\n}\n\n/** Exported only for tests. */\nfunction normalizeBreadcrumb(breadcrumb) {\n  if (\n    !isBreadcrumbWithCategory(breadcrumb) ||\n    [\n      // fetch & xhr are handled separately,in handleNetworkBreadcrumbs\n      'fetch',\n      'xhr',\n      // These two are breadcrumbs for emitted sentry events, we don't care about them\n      'sentry.event',\n      'sentry.transaction',\n    ].includes(breadcrumb.category) ||\n    // We capture UI breadcrumbs separately\n    breadcrumb.category.startsWith('ui.')\n  ) {\n    return null;\n  }\n\n  if (breadcrumb.category === 'console') {\n    return normalizeConsoleBreadcrumb(breadcrumb);\n  }\n\n  return createBreadcrumb(breadcrumb);\n}\n\n/** exported for tests only */\nfunction normalizeConsoleBreadcrumb(\n  breadcrumb,\n) {\n  const args = breadcrumb.data && breadcrumb.data.arguments;\n\n  if (!Array.isArray(args) || args.length === 0) {\n    return createBreadcrumb(breadcrumb);\n  }\n\n  let isTruncated = false;\n\n  // Avoid giant args captures\n  const normalizedArgs = args.map(arg => {\n    if (!arg) {\n      return arg;\n    }\n    if (typeof arg === 'string') {\n      if (arg.length > CONSOLE_ARG_MAX_SIZE) {\n        isTruncated = true;\n        return `${arg.slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n      }\n\n      return arg;\n    }\n    if (typeof arg === 'object') {\n      try {\n        const normalizedArg = normalize(arg, 7);\n        const stringified = JSON.stringify(normalizedArg);\n        if (stringified.length > CONSOLE_ARG_MAX_SIZE) {\n          isTruncated = true;\n          // We use the pretty printed JSON string here as a base\n          return `${JSON.stringify(normalizedArg, null, 2).slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n        }\n        return normalizedArg;\n      } catch (e) {\n        // fall back to default\n      }\n    }\n\n    return arg;\n  });\n\n  return createBreadcrumb({\n    ...breadcrumb,\n    data: {\n      ...breadcrumb.data,\n      arguments: normalizedArgs,\n      ...(isTruncated ? { _meta: { warnings: ['CONSOLE_ARG_TRUNCATED'] } } : {}),\n    },\n  });\n}\n\nfunction isBreadcrumbWithCategory(breadcrumb) {\n  return !!breadcrumb.category;\n}\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nfunction isRrwebError(event, hint) {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-expect-error this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Add a feedback breadcrumb event to replay.\n */\nfunction addFeedbackBreadcrumb(replay, event) {\n  replay.triggerUserActivity();\n  replay.addUpdate(() => {\n    if (!event.timestamp) {\n      // Ignore events that don't have timestamps (this shouldn't happen, more of a typing issue)\n      // Return true here so that we don't flush\n      return true;\n    }\n\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: event.timestamp * 1000,\n      data: {\n        tag: 'breadcrumb',\n        payload: {\n          timestamp: event.timestamp,\n          type: 'default',\n          category: 'sentry.feedback',\n          data: {\n            feedbackId: event.event_id,\n          },\n        },\n      },\n    } );\n\n    return false;\n  });\n}\n\n/**\n * Determine if event should be sampled (only applies in buffer mode).\n * When an event is captured by `hanldleGlobalEvent`, when in buffer mode\n * we determine if we want to sample the error or not.\n */\nfunction shouldSampleForBufferEvent(replay, event) {\n  if (replay.recordingMode !== 'buffer') {\n    return false;\n  }\n\n  // ignore this error because otherwise we could loop indefinitely with\n  // trying to capture replay and failing\n  if (event.message === UNABLE_TO_SEND_REPLAY) {\n    return false;\n  }\n\n  // Require the event to be an error event & to have an exception\n  if (!event.exception || event.type) {\n    return false;\n  }\n\n  return isSampled(replay.getOptions().errorSampleRate);\n}\n\n/**\n * Returns a listener to be added to `addEventProcessor(listener)`.\n */\nfunction handleGlobalEventListener(replay) {\n  return Object.assign(\n    (event, hint) => {\n      // Do nothing if replay has been disabled\n      if (!replay.isEnabled()) {\n        return event;\n      }\n\n      if (isReplayEvent(event)) {\n        // Replays have separate set of breadcrumbs, do not include breadcrumbs\n        // from core SDK\n        delete event.breadcrumbs;\n        return event;\n      }\n\n      // We only want to handle errors, transactions, and feedbacks, nothing else\n      if (!isErrorEvent(event) && !isTransactionEvent(event) && !isFeedbackEvent(event)) {\n        return event;\n      }\n\n      // Ensure we do not add replay_id if the session is expired\n      const isSessionActive = replay.checkAndHandleExpiredSession();\n      if (!isSessionActive) {\n        return event;\n      }\n\n      if (isFeedbackEvent(event)) {\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        replay.flush();\n        event.contexts.feedback.replay_id = replay.getSessionId();\n        // Add a replay breadcrumb for this piece of feedback\n        addFeedbackBreadcrumb(replay, event);\n        return event;\n      }\n\n      // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n      // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n      if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n        DEBUG_BUILD && logger.log('[Replay] Ignoring error from rrweb internals', event);\n        return null;\n      }\n\n      // When in buffer mode, we decide to sample here.\n      // Later, in `handleAfterSendEvent`, if the replayId is set, we know that we sampled\n      // And convert the buffer session to a full session\n      const isErrorEventSampled = shouldSampleForBufferEvent(replay, event);\n\n      // Tag errors if it has been sampled in buffer mode, or if it is session mode\n      // Only tag transactions if in session mode\n      const shouldTagReplayId = isErrorEventSampled || replay.recordingMode === 'session';\n\n      if (shouldTagReplayId) {\n        event.tags = { ...event.tags, replayId: replay.getSessionId() };\n      }\n\n      return event;\n    },\n    { id: 'Replay' },\n  );\n}\n\n/**\n * Create a \"span\" for each performance entry.\n */\nfunction createPerformanceSpans(\n  replay,\n  entries,\n) {\n  return entries.map(({ type, start, end, name, data }) => {\n    const response = replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data,\n        },\n      },\n    });\n\n    // If response is a string, it means its either THROTTLED or SKIPPED\n    return typeof response === 'string' ? Promise.resolve(null) : response;\n  });\n}\n\nfunction handleHistory(handlerData) {\n  const { from, to } = handlerData;\n\n  const now = Date.now() / 1000;\n\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addHistoryInstrumentationHandler(listener)`.\n */\nfunction handleHistorySpanListener(replay) {\n  return (handlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleHistory(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nfunction shouldFilterRequest(replay, url) {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if (DEBUG_BUILD && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n\n  return isSentryRequestUrl(url, getClient());\n}\n\n/** Add a performance entry breadcrumb */\nfunction addNetworkBreadcrumb(\n  replay,\n  result,\n) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  if (result === null) {\n    return;\n  }\n\n  if (shouldFilterRequest(replay, result.name)) {\n    return;\n  }\n\n  replay.addUpdate(() => {\n    createPerformanceSpans(replay, [result]);\n    // Returning true will cause `addUpdate` to not flush\n    // We do not want network requests to cause a flush. This will prevent\n    // recurring/polling requests from keeping the replay session alive.\n    return true;\n  });\n}\n\n/** Get the size of a body. */\nfunction getBodySize(body) {\n  if (!body) {\n    return undefined;\n  }\n\n  const textEncoder = new TextEncoder();\n\n  try {\n    if (typeof body === 'string') {\n      return textEncoder.encode(body).length;\n    }\n\n    if (body instanceof URLSearchParams) {\n      return textEncoder.encode(body.toString()).length;\n    }\n\n    if (body instanceof FormData) {\n      const formDataStr = _serializeFormData(body);\n      return textEncoder.encode(formDataStr).length;\n    }\n\n    if (body instanceof Blob) {\n      return body.size;\n    }\n\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    // Currently unhandled types: ArrayBufferView, ReadableStream\n  } catch (e) {\n    // just return undefined\n  }\n\n  return undefined;\n}\n\n/** Convert a Content-Length header to number/undefined.  */\nfunction parseContentLengthHeader(header) {\n  if (!header) {\n    return undefined;\n  }\n\n  const size = parseInt(header, 10);\n  return isNaN(size) ? undefined : size;\n}\n\n/** Get the string representation of a body. */\nfunction getBodyString(body) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof URLSearchParams) {\n      return [body.toString()];\n    }\n\n    if (body instanceof FormData) {\n      return [_serializeFormData(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch (e2) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && logger.info('[Replay] Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\n/** Merge a warning into an existing network request/response. */\nfunction mergeWarning(\n  info,\n  warning,\n) {\n  if (!info) {\n    return {\n      headers: {},\n      size: undefined,\n      _meta: {\n        warnings: [warning],\n      },\n    };\n  }\n\n  const newMeta = { ...info._meta };\n  const existingWarnings = newMeta.warnings || [];\n  newMeta.warnings = [...existingWarnings, warning];\n\n  info._meta = newMeta;\n  return info;\n}\n\n/** Convert ReplayNetworkRequestData to a PerformanceEntry. */\nfunction makeNetworkReplayBreadcrumb(\n  type,\n  data,\n) {\n  if (!data) {\n    return null;\n  }\n\n  const { startTimestamp, endTimestamp, url, method, statusCode, request, response } = data;\n\n  const result = {\n    type,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: dropUndefinedKeys({\n      method,\n      statusCode,\n      request,\n      response,\n    }),\n  };\n\n  return result;\n}\n\n/** Build the request or response part of a replay network breadcrumb that was skipped. */\nfunction buildSkippedNetworkRequestOrResponse(bodySize) {\n  return {\n    headers: {},\n    size: bodySize,\n    _meta: {\n      warnings: ['URL_SKIPPED'],\n    },\n  };\n}\n\n/** Build the request or response part of a replay network breadcrumb. */\nfunction buildNetworkRequestOrResponse(\n  headers,\n  bodySize,\n  body,\n) {\n  if (!bodySize && Object.keys(headers).length === 0) {\n    return undefined;\n  }\n\n  if (!bodySize) {\n    return {\n      headers,\n    };\n  }\n\n  if (!body) {\n    return {\n      headers,\n      size: bodySize,\n    };\n  }\n\n  const info = {\n    headers,\n    size: bodySize,\n  };\n\n  const { body: normalizedBody, warnings } = normalizeNetworkBody(body);\n  info.body = normalizedBody;\n  if (warnings && warnings.length > 0) {\n    info._meta = {\n      warnings,\n    };\n  }\n\n  return info;\n}\n\n/** Filter a set of headers */\nfunction getAllowedHeaders(headers, allowedHeaders) {\n  return Object.keys(headers).reduce((filteredHeaders, key) => {\n    const normalizedKey = key.toLowerCase();\n    // Avoid putting empty strings into the headers\n    if (allowedHeaders.includes(normalizedKey) && headers[key]) {\n      filteredHeaders[normalizedKey] = headers[key];\n    }\n    return filteredHeaders;\n  }, {});\n}\n\nfunction _serializeFormData(formData) {\n  // This is a bit simplified, but gives us a decent estimate\n  // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n  // @ts-expect-error passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\n\nfunction normalizeNetworkBody(body)\n\n {\n  if (!body || typeof body !== 'string') {\n    return {\n      body,\n    };\n  }\n\n  const exceedsSizeLimit = body.length > NETWORK_BODY_MAX_SIZE;\n  const isProbablyJson = _strIsProbablyJson(body);\n\n  if (exceedsSizeLimit) {\n    const truncatedBody = body.slice(0, NETWORK_BODY_MAX_SIZE);\n\n    if (isProbablyJson) {\n      return {\n        body: truncatedBody,\n        warnings: ['MAYBE_JSON_TRUNCATED'],\n      };\n    }\n\n    return {\n      body: `${truncatedBody}…`,\n      warnings: ['TEXT_TRUNCATED'],\n    };\n  }\n\n  if (isProbablyJson) {\n    try {\n      const jsonBody = JSON.parse(body);\n      return {\n        body: jsonBody,\n      };\n    } catch (e3) {\n      // fall back to just send the body as string\n    }\n  }\n\n  return {\n    body,\n  };\n}\n\nfunction _strIsProbablyJson(str) {\n  const first = str[0];\n  const last = str[str.length - 1];\n\n  // Simple check: If this does not start & end with {} or [], it's not JSON\n  return (first === '[' && last === ']') || (first === '{' && last === '}');\n}\n\n/** Match an URL against a list of strings/Regex. */\nfunction urlMatches(url, urls) {\n  const fullUrl = getFullUrl(url);\n\n  return stringMatchesSomePattern(fullUrl, urls);\n}\n\n/** exported for tests */\nfunction getFullUrl(url, baseURI = WINDOW.document.baseURI) {\n  // Short circuit for common cases:\n  if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith(WINDOW.location.origin)) {\n    return url;\n  }\n  const fixedUrl = new URL(url, baseURI);\n\n  // If these do not match, we are not dealing with a relative URL, so just return it\n  if (fixedUrl.origin !== new URL(baseURI).origin) {\n    return url;\n  }\n\n  const fullUrl = fixedUrl.href;\n\n  // Remove trailing slashes, if they don't match the original URL\n  if (!url.endsWith('/') && fullUrl.endsWith('/')) {\n    return fullUrl.slice(0, -1);\n  }\n\n  return fullUrl;\n}\n\n/**\n * Capture a fetch breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nasync function captureFetchBreadcrumbToReplay(\n  breadcrumb,\n  hint,\n  options\n\n,\n) {\n  try {\n    const data = await _prepareFetchData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.fetch', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] Failed to capture fetch breadcrumb', error);\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction enrichFetchBreadcrumb(\n  breadcrumb,\n  hint,\n) {\n  const { input, response } = hint;\n\n  const body = input ? _getFetchRequestArgBody(input) : undefined;\n  const reqSize = getBodySize(body);\n\n  const resSize = response ? parseContentLengthHeader(response.headers.get('content-length')) : undefined;\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nasync function _prepareFetchData(\n  breadcrumb,\n  hint,\n  options,\n) {\n  const now = Date.now();\n  const { startTimestamp = now, endTimestamp = now } = hint;\n\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  const captureDetails =\n    urlMatches(url, options.networkDetailAllowUrls) && !urlMatches(url, options.networkDetailDenyUrls);\n\n  const request = captureDetails\n    ? _getRequestInfo(options, hint.input, requestBodySize)\n    : buildSkippedNetworkRequestOrResponse(requestBodySize);\n  const response = await _getResponseInfo(captureDetails, options, hint.response, responseBodySize);\n\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request,\n    response,\n  };\n}\n\nfunction _getRequestInfo(\n  { networkCaptureBodies, networkRequestHeaders },\n  input,\n  requestBodySize,\n) {\n  const headers = input ? getRequestHeaders(input, networkRequestHeaders) : {};\n\n  if (!networkCaptureBodies) {\n    return buildNetworkRequestOrResponse(headers, requestBodySize, undefined);\n  }\n\n  // We only want to transmit string or string-like bodies\n  const requestBody = _getFetchRequestArgBody(input);\n  const [bodyStr, warning] = getBodyString(requestBody);\n  const data = buildNetworkRequestOrResponse(headers, requestBodySize, bodyStr);\n\n  if (warning) {\n    return mergeWarning(data, warning);\n  }\n\n  return data;\n}\n\n/** Exported only for tests. */\nasync function _getResponseInfo(\n  captureDetails,\n  {\n    networkCaptureBodies,\n    networkResponseHeaders,\n  },\n  response,\n  responseBodySize,\n) {\n  if (!captureDetails && responseBodySize !== undefined) {\n    return buildSkippedNetworkRequestOrResponse(responseBodySize);\n  }\n\n  const headers = response ? getAllHeaders(response.headers, networkResponseHeaders) : {};\n\n  if (!response || (!networkCaptureBodies && responseBodySize !== undefined)) {\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n\n  const [bodyText, warning] = await _parseFetchResponseBody(response);\n  const result = getResponseData(bodyText, {\n    networkCaptureBodies,\n\n    responseBodySize,\n    captureDetails,\n    headers,\n  });\n\n  if (warning) {\n    return mergeWarning(result, warning);\n  }\n\n  return result;\n}\n\nfunction getResponseData(\n  bodyText,\n  {\n    networkCaptureBodies,\n    responseBodySize,\n    captureDetails,\n    headers,\n  }\n\n,\n) {\n  try {\n    const size =\n      bodyText && bodyText.length && responseBodySize === undefined ? getBodySize(bodyText) : responseBodySize;\n\n    if (!captureDetails) {\n      return buildSkippedNetworkRequestOrResponse(size);\n    }\n\n    if (networkCaptureBodies) {\n      return buildNetworkRequestOrResponse(headers, size, bodyText);\n    }\n\n    return buildNetworkRequestOrResponse(headers, size, undefined);\n  } catch (error) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize response body', error);\n    // fallback\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n}\n\nasync function _parseFetchResponseBody(response) {\n  const res = _tryCloneResponse(response);\n\n  if (!res) {\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  try {\n    const text = await _tryGetResponseText(res);\n    return [text];\n  } catch (error) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to get text body from response', error);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n}\n\nfunction _getFetchRequestArgBody(fetchArgs = []) {\n  // We only support getting the body from the fetch options\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n\n  return (fetchArgs[1] ).body;\n}\n\nfunction getAllHeaders(headers, allowedHeaders) {\n  const allHeaders = {};\n\n  allowedHeaders.forEach(header => {\n    if (headers.get(header)) {\n      allHeaders[header] = headers.get(header) ;\n    }\n  });\n\n  return allHeaders;\n}\n\nfunction getRequestHeaders(fetchArgs, allowedHeaders) {\n  if (fetchArgs.length === 1 && typeof fetchArgs[0] !== 'string') {\n    return getHeadersFromOptions(fetchArgs[0] , allowedHeaders);\n  }\n\n  if (fetchArgs.length === 2) {\n    return getHeadersFromOptions(fetchArgs[1] , allowedHeaders);\n  }\n\n  return {};\n}\n\nfunction getHeadersFromOptions(\n  input,\n  allowedHeaders,\n) {\n  if (!input) {\n    return {};\n  }\n\n  const headers = input.headers;\n\n  if (!headers) {\n    return {};\n  }\n\n  if (headers instanceof Headers) {\n    return getAllHeaders(headers, allowedHeaders);\n  }\n\n  // We do not support this, as it is not really documented (anymore?)\n  if (Array.isArray(headers)) {\n    return {};\n  }\n\n  return getAllowedHeaders(headers, allowedHeaders);\n}\n\nfunction _tryCloneResponse(response) {\n  try {\n    // We have to clone this, as the body can only be read once\n    return response.clone();\n  } catch (error) {\n    // this can throw if the response was already consumed before\n    DEBUG_BUILD && logger.warn('[Replay] Failed to clone response body', error);\n  }\n}\n\n/**\n * Get the response body of a fetch request, or timeout after 500ms.\n * Fetch can return a streaming body, that may not resolve (or not for a long time).\n * If that happens, we rather abort after a short time than keep waiting for this.\n */\nfunction _tryGetResponseText(response) {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout$2(() => reject(new Error('Timeout while trying to read response body')), 500);\n\n    _getResponseText(response)\n      .then(\n        txt => resolve(txt),\n        reason => reject(reason),\n      )\n      .finally(() => clearTimeout(timeout));\n  });\n}\n\nasync function _getResponseText(response) {\n  // Force this to be a promise, just to be safe\n  // eslint-disable-next-line no-return-await\n  return await response.text();\n}\n\n/**\n * Capture an XHR breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nasync function captureXhrBreadcrumbToReplay(\n  breadcrumb,\n  hint,\n  options,\n) {\n  try {\n    const data = _prepareXhrData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.xhr', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] Failed to capture xhr breadcrumb', error);\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction enrichXhrBreadcrumb(\n  breadcrumb,\n  hint,\n) {\n  const { xhr, input } = hint;\n\n  if (!xhr) {\n    return;\n  }\n\n  const reqSize = getBodySize(input);\n  const resSize = xhr.getResponseHeader('content-length')\n    ? parseContentLengthHeader(xhr.getResponseHeader('content-length'))\n    : _getBodySize(xhr.response, xhr.responseType);\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nfunction _prepareXhrData(\n  breadcrumb,\n  hint,\n  options,\n) {\n  const now = Date.now();\n  const { startTimestamp = now, endTimestamp = now, input, xhr } = hint;\n\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  if (!url) {\n    return null;\n  }\n\n  if (!xhr || !urlMatches(url, options.networkDetailAllowUrls) || urlMatches(url, options.networkDetailDenyUrls)) {\n    const request = buildSkippedNetworkRequestOrResponse(requestBodySize);\n    const response = buildSkippedNetworkRequestOrResponse(responseBodySize);\n    return {\n      startTimestamp,\n      endTimestamp,\n      url,\n      method,\n      statusCode,\n      request,\n      response,\n    };\n  }\n\n  const xhrInfo = xhr[SENTRY_XHR_DATA_KEY];\n  const networkRequestHeaders = xhrInfo\n    ? getAllowedHeaders(xhrInfo.request_headers, options.networkRequestHeaders)\n    : {};\n  const networkResponseHeaders = getAllowedHeaders(getResponseHeaders(xhr), options.networkResponseHeaders);\n\n  const [requestBody, requestWarning] = options.networkCaptureBodies ? getBodyString(input) : [undefined];\n  const [responseBody, responseWarning] = options.networkCaptureBodies ? _getXhrResponseBody(xhr) : [undefined];\n\n  const request = buildNetworkRequestOrResponse(networkRequestHeaders, requestBodySize, requestBody);\n  const response = buildNetworkRequestOrResponse(networkResponseHeaders, responseBodySize, responseBody);\n\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request: requestWarning ? mergeWarning(request, requestWarning) : request,\n    response: responseWarning ? mergeWarning(response, responseWarning) : response,\n  };\n}\n\nfunction getResponseHeaders(xhr) {\n  const headers = xhr.getAllResponseHeaders();\n\n  if (!headers) {\n    return {};\n  }\n\n  return headers.split('\\r\\n').reduce((acc, line) => {\n    const [key, value] = line.split(': ');\n    acc[key.toLowerCase()] = value;\n    return acc;\n  }, {});\n}\n\nfunction _getXhrResponseBody(xhr) {\n  // We collect errors that happen, but only log them if we can't get any response body\n  const errors = [];\n\n  try {\n    return [xhr.responseText];\n  } catch (e) {\n    errors.push(e);\n  }\n\n  // Try to manually parse the response body, if responseText fails\n  try {\n    return _parseXhrResponse(xhr.response, xhr.responseType);\n  } catch (e) {\n    errors.push(e);\n  }\n\n  DEBUG_BUILD && logger.warn('[Replay] Failed to get xhr response body', ...errors);\n\n  return [undefined];\n}\n\n/**\n * Get the string representation of the XHR response.\n * Based on MDN, these are the possible types of the response:\n * string\n * ArrayBuffer\n * Blob\n * Document\n * POJO\n *\n * Exported only for tests.\n */\nfunction _parseXhrResponse(\n  body,\n  responseType,\n) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof Document) {\n      return [body.body.outerHTML];\n    }\n\n    if (responseType === 'json' && body && typeof body === 'object') {\n      return [JSON.stringify(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch (e2) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && logger.info('[Replay] Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\nfunction _getBodySize(\n  body,\n  responseType,\n) {\n  try {\n    const bodyStr = responseType === 'json' && body && typeof body === 'object' ? JSON.stringify(body) : body;\n    return getBodySize(bodyStr);\n  } catch (e3) {\n    return undefined;\n  }\n}\n\n/**\n * This method does two things:\n * - It enriches the regular XHR/fetch breadcrumbs with request/response size data\n * - It captures the XHR/fetch breadcrumbs to the replay\n *   (enriching it with further data that is _not_ added to the regular breadcrumbs)\n */\nfunction handleNetworkBreadcrumbs(replay) {\n  const client = getClient();\n\n  try {\n    const {\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders,\n    } = replay.getOptions();\n\n    const options = {\n      replay,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders,\n    };\n\n    if (client) {\n      client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));\n    }\n  } catch (e2) {\n    // Do nothing\n  }\n}\n\n/** just exported for tests */\nfunction beforeAddNetworkBreadcrumb(\n  options,\n  breadcrumb,\n  hint,\n) {\n  if (!breadcrumb.data) {\n    return;\n  }\n\n  try {\n    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichXhrBreadcrumb(breadcrumb, hint);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureXhrBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n\n    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichFetchBreadcrumb(breadcrumb, hint);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureFetchBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n  } catch (e) {\n    DEBUG_BUILD && logger.warn('Error when enriching network breadcrumb');\n  }\n}\n\nfunction _isXhrBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'xhr';\n}\n\nfunction _isFetchBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'fetch';\n}\n\nfunction _isXhrHint(hint) {\n  return hint && hint.xhr;\n}\n\nfunction _isFetchHint(hint) {\n  return hint && hint.response;\n}\n\n/**\n * Add global listeners that cannot be removed.\n */\nfunction addGlobalListeners(replay) {\n  // Listeners from core SDK //\n  const client = getClient();\n\n  addClickKeypressInstrumentationHandler(handleDomListener(replay));\n  addHistoryInstrumentationHandler(handleHistorySpanListener(replay));\n  handleBreadcrumbs(replay);\n  handleNetworkBreadcrumbs(replay);\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  const eventProcessor = handleGlobalEventListener(replay);\n  addEventProcessor(eventProcessor);\n\n  // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n  if (client) {\n    client.on('beforeSendEvent', handleBeforeSendEvent(replay));\n    client.on('afterSendEvent', handleAfterSendEvent(replay));\n    client.on('createDsc', (dsc) => {\n      const replayId = replay.getSessionId();\n      // We do not want to set the DSC when in buffer mode, as that means the replay has not been sent (yet)\n      if (replayId && replay.isEnabled() && replay.recordingMode === 'session') {\n        // Ensure to check that the session is still active - it could have expired in the meanwhile\n        const isSessionActive = replay.checkAndHandleExpiredSession();\n        if (isSessionActive) {\n          dsc.replay_id = replayId;\n        }\n      }\n    });\n\n    client.on('spanStart', span => {\n      replay.lastActiveSpan = span;\n    });\n\n    // We may be missing the initial spanStart due to timing issues,\n    // so we capture it on finish again.\n    client.on('spanEnd', span => {\n      replay.lastActiveSpan = span;\n    });\n\n    // We want to flush replay\n    client.on('beforeSendFeedback', (feedbackEvent, options) => {\n      const replayId = replay.getSessionId();\n      if (options && options.includeReplay && replay.isEnabled() && replayId) {\n        // This should never reject\n        if (feedbackEvent.contexts && feedbackEvent.contexts.feedback) {\n          feedbackEvent.contexts.feedback.replay_id = replayId;\n        }\n      }\n    });\n  }\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nasync function addMemoryEntry(replay) {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    return Promise.all(\n      createPerformanceSpans(replay, [\n        // @ts-expect-error memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n        createMemoryEntry(WINDOW.performance.memory),\n      ]),\n    );\n  } catch (error) {\n    // Do nothing\n    return [];\n  }\n}\n\nfunction createMemoryEntry(memoryEntry) {\n  const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = Date.now() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize,\n      },\n    },\n  };\n}\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nfunction debounce(func, wait, options) {\n  let callbackReturnValue;\n\n  let timerId;\n  let maxTimerId;\n\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n\n  function invokeFunc() {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers() {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush() {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced() {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout$2(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout$2(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Handler for recording events.\n *\n * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n */\nfunction getHandleRecordingEmit(replay) {\n  let hadFirstEvent = false;\n\n  return (event, _isCheckout) => {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!replay.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.warn('[Replay] Received replay event after session expired.');\n\n      return;\n    }\n\n    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n    // We also want to treat the first event as a checkout, so we handle this specifically here\n    const isCheckout = _isCheckout || !hadFirstEvent;\n    hadFirstEvent = true;\n\n    if (replay.clickDetector) {\n      updateClickDetectorForRecordingEvent(replay.clickDetector, event);\n    }\n\n    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n    replay.addUpdate(() => {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (replay.recordingMode === 'buffer' && isCheckout) {\n        replay.setInitialState();\n      }\n\n      // If the event is not added (e.g. due to being paused, disabled, or out of the max replay duration),\n      // Skip all further steps\n      if (!addEventSync(replay, event, isCheckout)) {\n        // Return true to skip scheduling a debounced flush\n        return true;\n      }\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (!isCheckout) {\n        return false;\n      }\n\n      // Additionally, create a meta event that will capture certain SDK settings.\n      // In order to handle buffer mode, this needs to either be done when we\n      // receive checkout events or at flush time.\n      //\n      // `isCheckout` is always true, but want to be explicit that it should\n      // only be added for checkouts\n      addSettingsEvent(replay, isCheckout);\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (replay.session && replay.session.previousSessionId) {\n        return true;\n      }\n\n      // When in buffer mode, make sure we adjust the session started date to the current earliest event of the buffer\n      // this should usually be the timestamp of the checkout event, but to be safe...\n      if (replay.recordingMode === 'buffer' && replay.session && replay.eventBuffer) {\n        const earliestEvent = replay.eventBuffer.getEarliestTimestamp();\n        if (earliestEvent) {\n          logInfo(\n            `[Replay] Updating session start time to earliest event in buffer to ${new Date(earliestEvent)}`,\n            replay.getOptions()._experiments.traceInternals,\n          );\n\n          replay.session.started = earliestEvent;\n\n          if (replay.getOptions().stickySession) {\n            saveSession(replay.session);\n          }\n        }\n      }\n\n      if (replay.recordingMode === 'session') {\n        // If the full snapshot is due to an initial load, we will not have\n        // a previous session ID. In this case, we want to buffer events\n        // for a set amount of time before flushing. This can help avoid\n        // capturing replays of users that immediately close the window.\n\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        void replay.flush();\n      }\n\n      return true;\n    });\n  };\n}\n\n/**\n * Exported for tests\n */\nfunction createOptionsEvent(replay) {\n  const options = replay.getOptions();\n  return {\n    type: EventType.Custom,\n    timestamp: Date.now(),\n    data: {\n      tag: 'options',\n      payload: {\n        shouldRecordCanvas: replay.isRecordingCanvas(),\n        sessionSampleRate: options.sessionSampleRate,\n        errorSampleRate: options.errorSampleRate,\n        useCompressionOption: options.useCompression,\n        blockAllMedia: options.blockAllMedia,\n        maskAllText: options.maskAllText,\n        maskAllInputs: options.maskAllInputs,\n        useCompression: replay.eventBuffer ? replay.eventBuffer.type === 'worker' : false,\n        networkDetailHasUrls: options.networkDetailAllowUrls.length > 0,\n        networkCaptureBodies: options.networkCaptureBodies,\n        networkRequestHasHeaders: options.networkRequestHeaders.length > 0,\n        networkResponseHasHeaders: options.networkResponseHeaders.length > 0,\n      },\n    },\n  };\n}\n\n/**\n * Add a \"meta\" event that contains a simplified view on current configuration\n * options. This should only be included on the first segment of a recording.\n */\nfunction addSettingsEvent(replay, isCheckout) {\n  // Only need to add this event when sending the first segment\n  if (!isCheckout || !replay.session || replay.session.segmentId !== 0) {\n    return;\n  }\n\n  addEventSync(replay, createOptionsEvent(replay), false);\n}\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nfunction createReplayEnvelope(\n  replayEvent,\n  recordingData,\n  dsn,\n  tunnel,\n) {\n  return createEnvelope(\n    createEventEnvelopeHeaders(replayEvent, getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn),\n    [\n      [{ type: 'replay_event' }, replayEvent],\n      [\n        {\n          type: 'replay_recording',\n          // If string then we need to encode to UTF8, otherwise will have\n          // wrong size. TextEncoder has similar browser support to\n          // MutationObserver, although it does not accept IE11.\n          length:\n            typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length,\n        },\n        recordingData,\n      ],\n    ],\n  );\n}\n\n/**\n * Prepare the recording data ready to be sent.\n */\nfunction prepareRecordingData({\n  recordingData,\n  headers,\n}\n\n) {\n  let payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  const replayHeaders = `${JSON.stringify(headers)}\n`;\n\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = `${replayHeaders}${recordingData}`;\n  } else {\n    const enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    const sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n\n  return payloadWithSequence;\n}\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nasync function prepareReplayEvent({\n  client,\n  scope,\n  replayId: event_id,\n  event,\n}\n\n) {\n  const integrations =\n    typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations)\n      ? Object.keys(client._integrations)\n      : undefined;\n\n  const eventHint = { event_id, integrations };\n\n  client.emit('preprocessEvent', event, eventHint);\n\n  const preparedEvent = (await prepareEvent(\n    client.getOptions(),\n    event,\n    eventHint,\n    scope,\n    client,\n    getIsolationScope(),\n  )) ;\n\n  // If e.g. a global event processor returned null\n  if (!preparedEvent) {\n    return null;\n  }\n\n  // This normally happens in browser client \"_prepareEvent\"\n  // but since we do not use this private method from the client, but rather the plain import\n  // we need to do this manually.\n  preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n  // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n  const metadata = client.getSdkMetadata();\n  const { name, version } = (metadata && metadata.sdk) || {};\n\n  preparedEvent.sdk = {\n    ...preparedEvent.sdk,\n    name: name || 'sentry.javascript.unknown',\n    version: version || '0.0.0',\n  };\n\n  return preparedEvent;\n}\n\n/**\n * Send replay attachment using `fetch()`\n */\nasync function sendReplayRequest({\n  recordingData,\n  replayId,\n  segmentId: segment_id,\n  eventContext,\n  timestamp,\n  session,\n}) {\n  const preparedRecordingData = prepareRecordingData({\n    recordingData,\n    headers: {\n      segment_id,\n    },\n  });\n\n  const { urls, errorIds, traceIds, initialTimestamp } = eventContext;\n\n  const client = getClient();\n  const scope = getCurrentScope();\n  const transport = client && client.getTransport();\n  const dsn = client && client.getDsn();\n\n  if (!client || !transport || !dsn || !session.sampled) {\n    return resolvedSyncPromise({});\n  }\n\n  const baseEvent = {\n    type: REPLAY_EVENT_NAME,\n    replay_start_timestamp: initialTimestamp / 1000,\n    timestamp: timestamp / 1000,\n    error_ids: errorIds,\n    trace_ids: traceIds,\n    urls,\n    replay_id: replayId,\n    segment_id,\n    replay_type: session.sampled,\n  };\n\n  const replayEvent = await prepareReplayEvent({ scope, client, replayId, event: baseEvent });\n\n  if (!replayEvent) {\n    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n    client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n    logInfo('An event processor returned `null`, will not send event.');\n    return resolvedSyncPromise({});\n  }\n\n  /*\n  For reference, the fully built event looks something like this:\n  {\n      \"type\": \"replay_event\",\n      \"timestamp\": 1670837008.634,\n      \"error_ids\": [\n          \"errorId\"\n      ],\n      \"trace_ids\": [\n          \"traceId\"\n      ],\n      \"urls\": [\n          \"https://example.com\"\n      ],\n      \"replay_id\": \"eventId\",\n      \"segment_id\": 3,\n      \"replay_type\": \"error\",\n      \"platform\": \"javascript\",\n      \"event_id\": \"eventId\",\n      \"environment\": \"production\",\n      \"sdk\": {\n          \"integrations\": [\n              \"BrowserTracing\",\n              \"Replay\"\n          ],\n          \"name\": \"sentry.javascript.browser\",\n          \"version\": \"7.25.0\"\n      },\n      \"sdkProcessingMetadata\": {},\n      \"contexts\": {\n      },\n  }\n  */\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete replayEvent.sdkProcessingMetadata;\n\n  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n\n  let response;\n\n  try {\n    response = await transport.send(envelope);\n  } catch (err) {\n    const error = new Error(UNABLE_TO_SEND_REPLAY);\n\n    try {\n      // In case browsers don't allow this property to be writable\n      // @ts-expect-error This needs lib es2022 and newer\n      error.cause = err;\n    } catch (e) {\n      // nothing to do\n    }\n    throw error;\n  }\n\n  // If the status code is invalid, we want to immediately stop & not retry\n  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n    throw new TransportStatusCodeError(response.statusCode);\n  }\n\n  const rateLimits = updateRateLimits({}, response);\n  if (isRateLimited(rateLimits, 'replay')) {\n    throw new RateLimitError(rateLimits);\n  }\n\n  return response;\n}\n\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nclass TransportStatusCodeError extends Error {\n   constructor(statusCode) {\n    super(`Transport returned status code ${statusCode}`);\n  }\n}\n\n/**\n * This error indicates that we hit a rate limit API error.\n */\nclass RateLimitError extends Error {\n\n   constructor(rateLimits) {\n    super('Rate limit hit');\n    this.rateLimits = rateLimits;\n  }\n}\n\n/**\n * Finalize and send the current replay event to Sentry\n */\nasync function sendReplay(\n  replayData,\n  retryConfig = {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL,\n  },\n) {\n  const { recordingData, options } = replayData;\n\n  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n  if (!recordingData.length) {\n    return;\n  }\n\n  try {\n    await sendReplayRequest(replayData);\n    return true;\n  } catch (err) {\n    if (err instanceof TransportStatusCodeError || err instanceof RateLimitError) {\n      throw err;\n    }\n\n    // Capture error for every failed replay\n    setContext('Replays', {\n      _retryCount: retryConfig.count,\n    });\n\n    if (DEBUG_BUILD && options._experiments && options._experiments.captureExceptions) {\n      captureException(err);\n    }\n\n    // If an error happened here, it's likely that uploading the attachment\n    // failed, we'll can retry with the same events payload\n    if (retryConfig.count >= RETRY_MAX_COUNT) {\n      const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n\n      try {\n        // In case browsers don't allow this property to be writable\n        // @ts-expect-error This needs lib es2022 and newer\n        error.cause = err;\n      } catch (e) {\n        // nothing to do\n      }\n\n      throw error;\n    }\n\n    // will retry in intervals of 5, 10, 30\n    retryConfig.interval *= ++retryConfig.count;\n\n    return new Promise((resolve, reject) => {\n      setTimeout$2(async () => {\n        try {\n          await sendReplay(replayData, retryConfig);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }, retryConfig.interval);\n    });\n  }\n}\n\nconst THROTTLED = '__THROTTLED';\nconst SKIPPED = '__SKIPPED';\n\n/**\n * Create a throttled function off a given function.\n * When calling the throttled function, it will call the original function only\n * if it hasn't been called more than `maxCount` times in the last `durationSeconds`.\n *\n * Returns `THROTTLED` if throttled for the first time, after that `SKIPPED`,\n * or else the return value of the original function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction throttle(\n  fn,\n  maxCount,\n  durationSeconds,\n) {\n  const counter = new Map();\n\n  const _cleanup = (now) => {\n    const threshold = now - durationSeconds;\n    counter.forEach((_value, key) => {\n      if (key < threshold) {\n        counter.delete(key);\n      }\n    });\n  };\n\n  const _getTotalCount = () => {\n    return [...counter.values()].reduce((a, b) => a + b, 0);\n  };\n\n  let isThrottled = false;\n\n  return (...rest) => {\n    // Date in second-precision, which we use as basis for the throttling\n    const now = Math.floor(Date.now() / 1000);\n\n    // First, make sure to delete any old entries\n    _cleanup(now);\n\n    // If already over limit, do nothing\n    if (_getTotalCount() >= maxCount) {\n      const wasThrottled = isThrottled;\n      isThrottled = true;\n      return wasThrottled ? SKIPPED : THROTTLED;\n    }\n\n    isThrottled = false;\n    const count = counter.get(now) || 0;\n    counter.set(now, count + 1);\n\n    return fn(...rest);\n  };\n}\n\n/* eslint-disable max-lines */ // TODO: We might want to split this file up\n\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nclass ReplayContainer  {\n\n  /**\n   * Recording can happen in one of three modes:\n   *   - session: Record the whole session, sending it continuously\n   *   - buffer: Always keep the last 60s of recording, requires:\n   *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n   *     - or calling `flush()` to send the replay\n   */\n\n  /**\n   * The current or last active span.\n   * This is only available when performance is enabled.\n   */\n\n  /**\n   * These are here so we can overwrite them in tests etc.\n   * @hidden\n   */\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Timestamp of the last user activity. This lives across sessions.\n   */\n\n  /**\n   * Is the integration currently active?\n   */\n\n  /**\n   * Paused is a state where:\n   * - DOM Recording is not listening at all\n   * - Nothing will be added to event buffer (e.g. core SDK events)\n   */\n\n  /**\n   * Have we attached listeners to the core SDK?\n   * Note we have to track this as there is no way to remove instrumentation handlers.\n   */\n\n  /**\n   * Function to stop recording\n   */\n\n  /**\n   * Internal use for canvas recording options\n   */\n\n   constructor({\n    options,\n    recordingOptions,\n  }\n\n) {ReplayContainer.prototype.__init.call(this);ReplayContainer.prototype.__init2.call(this);ReplayContainer.prototype.__init3.call(this);ReplayContainer.prototype.__init4.call(this);ReplayContainer.prototype.__init5.call(this);ReplayContainer.prototype.__init6.call(this);\n    this.eventBuffer = null;\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n    this.recordingMode = 'session';\n    this.timeouts = {\n      sessionIdlePause: SESSION_IDLE_PAUSE_DURATION,\n      sessionIdleExpire: SESSION_IDLE_EXPIRE_DURATION,\n    } ;\n    this._lastActivity = Date.now();\n    this._isEnabled = false;\n    this._isPaused = false;\n    this._hasInitializedCoreListeners = false;\n    this._context = {\n      errorIds: new Set(),\n      traceIds: new Set(),\n      urls: [],\n      initialTimestamp: Date.now(),\n      initialUrl: '',\n    };\n\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n\n    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay,\n    });\n\n    this._throttledAddEvent = throttle(\n      (event, isCheckout) => addEvent(this, event, isCheckout),\n      // Max 300 events...\n      300,\n      // ... per 5s\n      5,\n    );\n\n    const { slowClickTimeout, slowClickIgnoreSelectors } = this.getOptions();\n\n    const slowClickConfig = slowClickTimeout\n      ? {\n          threshold: Math.min(SLOW_CLICK_THRESHOLD, slowClickTimeout),\n          timeout: slowClickTimeout,\n          scrollTimeout: SLOW_CLICK_SCROLL_TIMEOUT,\n          ignoreSelector: slowClickIgnoreSelectors ? slowClickIgnoreSelectors.join(',') : '',\n        }\n      : undefined;\n\n    if (slowClickConfig) {\n      this.clickDetector = new ClickDetector(this, slowClickConfig);\n    }\n  }\n\n  /** Get the event context. */\n   getContext() {\n    return this._context;\n  }\n\n  /** If recording is currently enabled. */\n   isEnabled() {\n    return this._isEnabled;\n  }\n\n  /** If recording is currently paused. */\n   isPaused() {\n    return this._isPaused;\n  }\n\n  /**\n   * Determine if canvas recording is enabled\n   */\n   isRecordingCanvas() {\n    return Boolean(this._canvas);\n  }\n\n  /** Get the replay integration options. */\n   getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Initializes the plugin based on sampling configuration. Should not be\n   * called outside of constructor.\n   */\n   initializeSampling(previousSessionId) {\n    const { errorSampleRate, sessionSampleRate } = this._options;\n\n    // If neither sample rate is > 0, then do nothing - user will need to call one of\n    // `start()` or `startBuffering` themselves.\n    if (errorSampleRate <= 0 && sessionSampleRate <= 0) {\n      return;\n    }\n\n    // Otherwise if there is _any_ sample rate set, try to load an existing\n    // session, or create a new one.\n    this._initializeSessionForSampling(previousSessionId);\n\n    if (!this.session) {\n      // This should not happen, something wrong has occurred\n      this._handleException(new Error('Unable to initialize and create session'));\n      return;\n    }\n\n    if (this.session.sampled === false) {\n      // This should only occur if `errorSampleRate` is 0 and was unsampled for\n      // session-based replay. In this case there is nothing to do.\n      return;\n    }\n\n    // If segmentId > 0, it means we've previously already captured this session\n    // In this case, we still want to continue in `session` recording mode\n    this.recordingMode = this.session.sampled === 'buffer' && this.session.segmentId === 0 ? 'buffer' : 'session';\n\n    logInfoNextTick(\n      `[Replay] Starting replay in ${this.recordingMode} mode`,\n      this._options._experiments.traceInternals,\n    );\n\n    this._initializeRecording();\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will throw an error if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * _performanceObserver, Recording, Sentry SDK, etc)\n   */\n   start() {\n    if (this._isEnabled && this.recordingMode === 'session') {\n      throw new Error('Replay recording is already in progress');\n    }\n\n    if (this._isEnabled && this.recordingMode === 'buffer') {\n      throw new Error('Replay buffering is in progress, call `flush()` to save the replay');\n    }\n\n    logInfoNextTick('[Replay] Starting replay in session mode', this._options._experiments.traceInternals);\n\n    // Required as user activity is initially set in\n    // constructor, so if `start()` is called after\n    // session idle expiration, a replay will not be\n    // created due to an idle timeout.\n    this._updateUserActivity();\n\n    const session = loadOrCreateSession(\n      {\n        maxReplayDuration: this._options.maxReplayDuration,\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        traceInternals: this._options._experiments.traceInternals,\n      },\n      {\n        stickySession: this._options.stickySession,\n        // This is intentional: create a new session-based replay when calling `start()`\n        sessionSampleRate: 1,\n        allowBuffering: false,\n      },\n    );\n\n    this.session = session;\n\n    this._initializeRecording();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, an error occurs.\n   */\n   startBuffering() {\n    if (this._isEnabled) {\n      throw new Error('Replay recording is already in progress');\n    }\n\n    logInfoNextTick('[Replay] Starting replay in buffer mode', this._options._experiments.traceInternals);\n\n    const session = loadOrCreateSession(\n      {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n        traceInternals: this._options._experiments.traceInternals,\n      },\n      {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: 0,\n        allowBuffering: true,\n      },\n    );\n\n    this.session = session;\n\n    this.recordingMode = 'buffer';\n    this._initializeRecording();\n  }\n\n  /**\n   * Start recording.\n   *\n   * Note that this will cause a new DOM checkout\n   */\n   startRecording() {\n    try {\n      const canvasOptions = this._canvas;\n\n      this._stopRecording = record({\n        ...this._recordingOptions,\n        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n        // Without this, it would record forever, until an error happens, which we don't want\n        // instead, we'll always keep the last 60 seconds of replay before an error happened\n        ...(this.recordingMode === 'buffer' && { checkoutEveryNms: BUFFER_CHECKOUT_TIME }),\n        emit: getHandleRecordingEmit(this),\n        onMutation: this._onMutationHandler,\n        ...(canvasOptions\n          ? {\n              recordCanvas: canvasOptions.recordCanvas,\n              getCanvasManager: canvasOptions.getCanvasManager,\n              sampling: canvasOptions.sampling,\n              dataURLOptions: canvasOptions.dataURLOptions,\n            }\n          : {}),\n      });\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Stops the recording, if it was running.\n   *\n   * Returns true if it was previously stopped, or is now stopped,\n   * otherwise false.\n   */\n   stopRecording() {\n    try {\n      if (this._stopRecording) {\n        this._stopRecording();\n        this._stopRecording = undefined;\n      }\n\n      return true;\n    } catch (err) {\n      this._handleException(err);\n      return false;\n    }\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n   async stop({ forceFlush = false, reason } = {}) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    // We can't move `_isEnabled` after awaiting a flush, otherwise we can\n    // enter into an infinite loop when `stop()` is called while flushing.\n    this._isEnabled = false;\n\n    try {\n      logInfo(\n        `[Replay] Stopping Replay${reason ? ` triggered by ${reason}` : ''}`,\n        this._options._experiments.traceInternals,\n      );\n\n      this._removeListeners();\n      this.stopRecording();\n\n      this._debouncedFlush.cancel();\n      // See comment above re: `_isEnabled`, we \"force\" a flush, ignoring the\n      // `_isEnabled` state of the plugin since it was disabled above.\n      if (forceFlush) {\n        await this._flush({ force: true });\n      }\n\n      // After flush, destroy event buffer\n      this.eventBuffer && this.eventBuffer.destroy();\n      this.eventBuffer = null;\n\n      // Clear session from session storage, note this means if a new session\n      // is started after, it will not have `previousSessionId`\n      clearSession(this);\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Pause some replay functionality. See comments for `_isPaused`.\n   * This differs from stop as this only stops DOM recording, it is\n   * not as thorough of a shutdown as `stop()`.\n   */\n   pause() {\n    if (this._isPaused) {\n      return;\n    }\n\n    this._isPaused = true;\n    this.stopRecording();\n\n    logInfo('[Replay] Pausing replay', this._options._experiments.traceInternals);\n  }\n\n  /**\n   * Resumes recording, see notes for `pause().\n   *\n   * Note that calling `startRecording()` here will cause a\n   * new DOM checkout.`\n   */\n   resume() {\n    if (!this._isPaused || !this._checkSession()) {\n      return;\n    }\n\n    this._isPaused = false;\n    this.startRecording();\n\n    logInfo('[Replay] Resuming replay', this._options._experiments.traceInternals);\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n   async sendBufferedReplayOrFlush({ continueRecording = true } = {}) {\n    if (this.recordingMode === 'session') {\n      return this.flushImmediate();\n    }\n\n    const activityTime = Date.now();\n\n    logInfo('[Replay] Converting buffer to session', this._options._experiments.traceInternals);\n\n    // Allow flush to complete before resuming as a session recording, otherwise\n    // the checkout from `startRecording` may be included in the payload.\n    // Prefer to keep the error replay as a separate (and smaller) segment\n    // than the session replay.\n    await this.flushImmediate();\n\n    const hasStoppedRecording = this.stopRecording();\n\n    if (!continueRecording || !hasStoppedRecording) {\n      return;\n    }\n\n    // To avoid race conditions where this is called multiple times, we check here again that we are still buffering\n    if ((this.recordingMode ) === 'session') {\n      return;\n    }\n\n    // Re-start recording in session-mode\n    this.recordingMode = 'session';\n\n    // Once this session ends, we do not want to refresh it\n    if (this.session) {\n      this._updateUserActivity(activityTime);\n      this._updateSessionActivity(activityTime);\n      this._maybeSaveSession();\n    }\n\n    this.startRecording();\n  }\n\n  /**\n   * We want to batch uploads of replay events. Save events only if\n   * `<flushMinDelay>` milliseconds have elapsed since the last event\n   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n   *\n   * Accepts a callback to perform side-effects and returns true to stop batch\n   * processing and hand back control to caller.\n   */\n   addUpdate(cb) {\n    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)\n    const cbResult = cb();\n\n    // If this option is turned on then we will only want to call `flush`\n    // explicitly\n    if (this.recordingMode === 'buffer') {\n      return;\n    }\n\n    // If callback is true, we do not want to continue with flushing -- the\n    // caller will need to handle it.\n    if (cbResult === true) {\n      return;\n    }\n\n    // addUpdate is called quite frequently - use _debouncedFlush so that it\n    // respects the flush delays and does not flush immediately\n    this._debouncedFlush();\n  }\n\n  /**\n   * Updates the user activity timestamp and resumes recording. This should be\n   * called in an event handler for a user action that we consider as the user\n   * being \"active\" (e.g. a mouse click).\n   */\n   triggerUserActivity() {\n    this._updateUserActivity();\n\n    // This case means that recording was once stopped due to inactivity.\n    // Ensure that recording is resumed.\n    if (!this._stopRecording) {\n      // Create a new session, otherwise when the user action is flushed, it\n      // will get rejected due to an expired session.\n      if (!this._checkSession()) {\n        return;\n      }\n\n      // Note: This will cause a new DOM checkout\n      this.resume();\n      return;\n    }\n\n    // Otherwise... recording was never suspended, continue as normalish\n    this.checkAndHandleExpiredSession();\n\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Updates the user activity timestamp *without* resuming\n   * recording. Some user events (e.g. keydown) can be create\n   * low-value replays that only contain the keypress as a\n   * breadcrumb. Instead this would require other events to\n   * create a new replay after a session has expired.\n   */\n   updateUserActivity() {\n    this._updateUserActivity();\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Only flush if `this.recordingMode === 'session'`\n   */\n   conditionalFlush() {\n    if (this.recordingMode === 'buffer') {\n      return Promise.resolve();\n    }\n\n    return this.flushImmediate();\n  }\n\n  /**\n   * Flush using debounce flush\n   */\n   flush() {\n    return this._debouncedFlush() ;\n  }\n\n  /**\n   * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n   * cases of mulitple flushes happening closely together.\n   */\n   flushImmediate() {\n    this._debouncedFlush();\n    // `.flush` is provided by the debounced function, analogously to lodash.debounce\n    return this._debouncedFlush.flush() ;\n  }\n\n  /**\n   * Cancels queued up flushes.\n   */\n   cancelFlush() {\n    this._debouncedFlush.cancel();\n  }\n\n  /** Get the current sesion (=replay) ID */\n   getSessionId() {\n    return this.session && this.session.id;\n  }\n\n  /**\n   * Checks if recording should be stopped due to user inactivity. Otherwise\n   * check if session is expired and create a new session if so. Triggers a new\n   * full snapshot on new session.\n   *\n   * Returns true if session is not expired, false otherwise.\n   * @hidden\n   */\n   checkAndHandleExpiredSession() {\n    // Prevent starting a new session if the last user activity is older than\n    // SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new\n    // session+recording. This creates noisy replays that do not have much\n    // content in them.\n    if (\n      this._lastActivity &&\n      isExpired(this._lastActivity, this.timeouts.sessionIdlePause) &&\n      this.session &&\n      this.session.sampled === 'session'\n    ) {\n      // Pause recording only for session-based replays. Otherwise, resuming\n      // will create a new replay and will conflict with users who only choose\n      // to record error-based replays only. (e.g. the resumed replay will not\n      // contain a reference to an error)\n      this.pause();\n      return;\n    }\n\n    // --- There is recent user activity --- //\n    // This will create a new session if expired, based on expiry length\n    if (!this._checkSession()) {\n      // Check session handles the refreshing itself\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Capture some initial state that can change throughout the lifespan of the\n   * replay. This is required because otherwise they would be captured at the\n   * first flush.\n   */\n   setInitialState() {\n    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n    const url = `${WINDOW.location.origin}${urlPath}`;\n\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    // Reset _context as well\n    this._clearContext();\n\n    this._context.initialUrl = url;\n    this._context.initialTimestamp = Date.now();\n    this._context.urls.push(url);\n  }\n\n  /**\n   * Add a breadcrumb event, that may be throttled.\n   * If it was throttled, we add a custom breadcrumb to indicate that.\n   */\n   throttledAddEvent(\n    event,\n    isCheckout,\n  ) {\n    const res = this._throttledAddEvent(event, isCheckout);\n\n    // If this is THROTTLED, it means we have throttled the event for the first time\n    // In this case, we want to add a breadcrumb indicating that something was skipped\n    if (res === THROTTLED) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.throttled',\n      });\n\n      this.addUpdate(() => {\n        // Return `false` if the event _was_ added, as that means we schedule a flush\n        return !addEventSync(this, {\n          type: ReplayEventTypeCustom,\n          timestamp: breadcrumb.timestamp || 0,\n          data: {\n            tag: 'breadcrumb',\n            payload: breadcrumb,\n            metric: true,\n          },\n        });\n      });\n    }\n\n    return res;\n  }\n\n  /**\n   * This will get the parametrized route name of the current page.\n   * This is only available if performance is enabled, and if an instrumented router is used.\n   */\n   getCurrentRoute() {\n    const lastActiveSpan = this.lastActiveSpan || getActiveSpan();\n    const lastRootSpan = lastActiveSpan && getRootSpan(lastActiveSpan);\n\n    const attributes = (lastRootSpan && spanToJSON(lastRootSpan).data) || {};\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    if (!lastRootSpan || !source || !['route', 'custom'].includes(source)) {\n      return undefined;\n    }\n\n    return spanToJSON(lastRootSpan).description;\n  }\n\n  /**\n   * Initialize and start all listeners to varying events (DOM,\n   * Performance Observer, Recording, Sentry SDK, etc)\n   */\n   _initializeRecording() {\n    this.setInitialState();\n\n    // this method is generally called on page load or manually - in both cases\n    // we should treat it as an activity\n    this._updateSessionActivity();\n\n    this.eventBuffer = createEventBuffer({\n      useCompression: this._options.useCompression,\n      workerUrl: this._options.workerUrl,\n    });\n\n    this._removeListeners();\n    this._addListeners();\n\n    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n    this._isEnabled = true;\n    this._isPaused = false;\n\n    this.startRecording();\n  }\n\n  /** A wrapper to conditionally capture exceptions. */\n   _handleException(error) {\n    DEBUG_BUILD && logger.error('[Replay]', error);\n\n    if (DEBUG_BUILD && this._options._experiments && this._options._experiments.captureExceptions) {\n      captureException(error);\n    }\n  }\n\n  /**\n   * Loads (or refreshes) the current session.\n   */\n   _initializeSessionForSampling(previousSessionId) {\n    // Whenever there is _any_ error sample rate, we always allow buffering\n    // Because we decide on sampling when an error occurs, we need to buffer at all times if sampling for errors\n    const allowBuffering = this._options.errorSampleRate > 0;\n\n    const session = loadOrCreateSession(\n      {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n        traceInternals: this._options._experiments.traceInternals,\n        previousSessionId,\n      },\n      {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: this._options.sessionSampleRate,\n        allowBuffering,\n      },\n    );\n\n    this.session = session;\n  }\n\n  /**\n   * Checks and potentially refreshes the current session.\n   * Returns false if session is not recorded.\n   */\n   _checkSession() {\n    // If there is no session yet, we do not want to refresh anything\n    // This should generally not happen, but to be safe....\n    if (!this.session) {\n      return false;\n    }\n\n    const currentSession = this.session;\n\n    if (\n      shouldRefreshSession(currentSession, {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n      })\n    ) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._refreshSession(currentSession);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Refresh a session with a new one.\n   * This stops the current session (without forcing a flush, as that would never work since we are expired),\n   * and then does a new sampling based on the refreshed session.\n   */\n   async _refreshSession(session) {\n    if (!this._isEnabled) {\n      return;\n    }\n    await this.stop({ reason: 'refresh session' });\n    this.initializeSampling(session.id);\n  }\n\n  /**\n   * Adds listeners to record events for the replay\n   */\n   _addListeners() {\n    try {\n      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.addEventListener('blur', this._handleWindowBlur);\n      WINDOW.addEventListener('focus', this._handleWindowFocus);\n      WINDOW.addEventListener('keydown', this._handleKeyboardEvent);\n\n      if (this.clickDetector) {\n        this.clickDetector.addListeners();\n      }\n\n      // There is no way to remove these listeners, so ensure they are only added once\n      if (!this._hasInitializedCoreListeners) {\n        addGlobalListeners(this);\n\n        this._hasInitializedCoreListeners = true;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n\n    this._performanceCleanupCallback = setupPerformanceObserver(this);\n  }\n\n  /**\n   * Cleans up listeners that were created in `_addListeners`\n   */\n   _removeListeners() {\n    try {\n      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n\n      WINDOW.removeEventListener('blur', this._handleWindowBlur);\n      WINDOW.removeEventListener('focus', this._handleWindowFocus);\n      WINDOW.removeEventListener('keydown', this._handleKeyboardEvent);\n\n      if (this.clickDetector) {\n        this.clickDetector.removeListeners();\n      }\n\n      if (this._performanceCleanupCallback) {\n        this._performanceCleanupCallback();\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Handle when visibility of the page content changes. Opening a new tab will\n   * cause the state to change to hidden because of content of current page will\n   * be hidden. Likewise, moving a different window to cover the contents of the\n   * page will also trigger a change to a hidden state.\n   */\n   __init() {this._handleVisibilityChange = () => {\n    if (WINDOW.document.visibilityState === 'visible') {\n      this._doChangeToForegroundTasks();\n    } else {\n      this._doChangeToBackgroundTasks();\n    }\n  };}\n\n  /**\n   * Handle when page is blurred\n   */\n   __init2() {this._handleWindowBlur = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.blur',\n    });\n\n    // Do not count blur as a user action -- it's part of the process of them\n    // leaving the page\n    this._doChangeToBackgroundTasks(breadcrumb);\n  };}\n\n  /**\n   * Handle when page is focused\n   */\n   __init3() {this._handleWindowFocus = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.focus',\n    });\n\n    // Do not count focus as a user action -- instead wait until they focus and\n    // interactive with page\n    this._doChangeToForegroundTasks(breadcrumb);\n  };}\n\n  /** Ensure page remains active when a key is pressed. */\n   __init4() {this._handleKeyboardEvent = (event) => {\n    handleKeyboardEvent(this, event);\n  };}\n\n  /**\n   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n   */\n   _doChangeToBackgroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n\n    const expired = isSessionExpired(this.session, {\n      maxReplayDuration: this._options.maxReplayDuration,\n      sessionIdleExpire: this.timeouts.sessionIdleExpire,\n    });\n\n    if (expired) {\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Send replay when the page/tab becomes hidden. There is no reason to send\n    // replay if it becomes visible, since no actions we care about were done\n    // while it was hidden\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    void this.conditionalFlush();\n  }\n\n  /**\n   * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n   */\n   _doChangeToForegroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n\n    const isSessionActive = this.checkAndHandleExpiredSession();\n\n    if (!isSessionActive) {\n      // If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION\n      // ms, we will re-use the existing session, otherwise create a new\n      // session\n      logInfo('[Replay] Document has become active, but session has expired');\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n  }\n\n  /**\n   * Update user activity (across session lifespans)\n   */\n   _updateUserActivity(_lastActivity = Date.now()) {\n    this._lastActivity = _lastActivity;\n  }\n\n  /**\n   * Updates the session's last activity timestamp\n   */\n   _updateSessionActivity(_lastActivity = Date.now()) {\n    if (this.session) {\n      this.session.lastActivity = _lastActivity;\n      this._maybeSaveSession();\n    }\n  }\n\n  /**\n   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n   */\n   _createCustomBreadcrumb(breadcrumb) {\n    this.addUpdate(() => {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.throttledAddEvent({\n        type: EventType.Custom,\n        timestamp: breadcrumb.timestamp || 0,\n        data: {\n          tag: 'breadcrumb',\n          payload: breadcrumb,\n        },\n      });\n    });\n  }\n\n  /**\n   * Observed performance events are added to `this.performanceEntries`. These\n   * are included in the replay event before it is finished and sent to Sentry.\n   */\n   _addPerformanceEntries() {\n    const performanceEntries = createPerformanceEntries(this.performanceEntries).concat(this.replayPerformanceEntries);\n\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    return Promise.all(createPerformanceSpans(this, performanceEntries));\n  }\n\n  /**\n   * Clear _context\n   */\n   _clearContext() {\n    // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n    this._context.errorIds.clear();\n    this._context.traceIds.clear();\n    this._context.urls = [];\n  }\n\n  /** Update the initial timestamp based on the buffer content. */\n   _updateInitialTimestampFromEventBuffer() {\n    const { session, eventBuffer } = this;\n    if (!session || !eventBuffer) {\n      return;\n    }\n\n    // we only ever update this on the initial segment\n    if (session.segmentId) {\n      return;\n    }\n\n    const earliestEvent = eventBuffer.getEarliestTimestamp();\n    if (earliestEvent && earliestEvent < this._context.initialTimestamp) {\n      this._context.initialTimestamp = earliestEvent;\n    }\n  }\n\n  /**\n   * Return and clear _context\n   */\n   _popEventContext() {\n    const _context = {\n      initialTimestamp: this._context.initialTimestamp,\n      initialUrl: this._context.initialUrl,\n      errorIds: Array.from(this._context.errorIds),\n      traceIds: Array.from(this._context.traceIds),\n      urls: this._context.urls,\n    };\n\n    this._clearContext();\n\n    return _context;\n  }\n\n  /**\n   * Flushes replay event buffer to Sentry.\n   *\n   * Performance events are only added right before flushing - this is\n   * due to the buffered performance observer events.\n   *\n   * Should never be called directly, only by `flush`\n   */\n   async _runFlush() {\n    const replayId = this.getSessionId();\n\n    if (!this.session || !this.eventBuffer || !replayId) {\n      DEBUG_BUILD && logger.error('[Replay] No session or eventBuffer found to flush.');\n      return;\n    }\n\n    await this._addPerformanceEntries();\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n      return;\n    }\n\n    // Only attach memory event if eventBuffer is not empty\n    await addMemoryEntry(this);\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer) {\n      return;\n    }\n\n    // if this changed in the meanwhile, e.g. because the session was refreshed or similar, we abort here\n    if (replayId !== this.getSessionId()) {\n      return;\n    }\n\n    try {\n      // This uses the data from the eventBuffer, so we need to call this before `finish()\n      this._updateInitialTimestampFromEventBuffer();\n\n      const timestamp = Date.now();\n\n      // Check total duration again, to avoid sending outdated stuff\n      // We leave 30s wiggle room to accomodate late flushing etc.\n      // This _could_ happen when the browser is suspended during flushing, in which case we just want to stop\n      if (timestamp - this._context.initialTimestamp > this._options.maxReplayDuration + 30000) {\n        throw new Error('Session is too long, not sending replay');\n      }\n\n      const eventContext = this._popEventContext();\n      // Always increment segmentId regardless of outcome of sending replay\n      const segmentId = this.session.segmentId++;\n      this._maybeSaveSession();\n\n      // Note this empties the event buffer regardless of outcome of sending replay\n      const recordingData = await this.eventBuffer.finish();\n\n      await sendReplay({\n        replayId,\n        recordingData,\n        segmentId,\n        eventContext,\n        session: this.session,\n        options: this.getOptions(),\n        timestamp,\n      });\n    } catch (err) {\n      this._handleException(err);\n\n      // This means we retried 3 times and all of them failed,\n      // or we ran into a problem we don't want to retry, like rate limiting.\n      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({ reason: 'sendReplay' });\n\n      const client = getClient();\n\n      if (client) {\n        client.recordDroppedEvent('send_error', 'replay');\n      }\n    }\n  }\n\n  /**\n   * Flush recording data to Sentry. Creates a lock so that only a single flush\n   * can be active at a time. Do not call this directly.\n   */\n   __init5() {this._flush = async ({\n    force = false,\n  }\n\n = {}) => {\n    if (!this._isEnabled && !force) {\n      // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n      return;\n    }\n\n    if (!this.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.error('[Replay] Attempting to finish replay event after session expired.');\n      return;\n    }\n\n    if (!this.session) {\n      // should never happen, as we would have bailed out before\n      return;\n    }\n\n    const start = this.session.started;\n    const now = Date.now();\n    const duration = now - start;\n\n    // A flush is about to happen, cancel any queued flushes\n    this._debouncedFlush.cancel();\n\n    // If session is too short, or too long (allow some wiggle room over maxReplayDuration), do not send it\n    // This _should_ not happen, but it may happen if flush is triggered due to a page activity change or similar\n    const tooShort = duration < this._options.minReplayDuration;\n    const tooLong = duration > this._options.maxReplayDuration + 5000;\n    if (tooShort || tooLong) {\n      logInfo(\n        `[Replay] Session duration (${Math.floor(duration / 1000)}s) is too ${\n          tooShort ? 'short' : 'long'\n        }, not sending replay.`,\n        this._options._experiments.traceInternals,\n      );\n\n      if (tooShort) {\n        this._debouncedFlush();\n      }\n      return;\n    }\n\n    const eventBuffer = this.eventBuffer;\n    if (eventBuffer && this.session.segmentId === 0 && !eventBuffer.hasCheckout) {\n      logInfo('[Replay] Flushing initial segment without checkout.', this._options._experiments.traceInternals);\n      // TODO FN: Evaluate if we want to stop here, or remove this again?\n    }\n\n    // this._flushLock acts as a lock so that future calls to `_flush()`\n    // will be blocked until this promise resolves\n    if (!this._flushLock) {\n      this._flushLock = this._runFlush();\n      await this._flushLock;\n      this._flushLock = undefined;\n      return;\n    }\n\n    // Wait for previous flush to finish, then call the debounced `_flush()`.\n    // It's possible there are other flush requests queued and waiting for it\n    // to resolve. We want to reduce all outstanding requests (as well as any\n    // new flush requests that occur within a second of the locked flush\n    // completing) into a single flush.\n\n    try {\n      await this._flushLock;\n    } catch (err) {\n      DEBUG_BUILD && logger.error(err);\n    } finally {\n      this._debouncedFlush();\n    }\n  };}\n\n  /** Save the session, if it is sticky */\n   _maybeSaveSession() {\n    if (this.session && this._options.stickySession) {\n      saveSession(this.session);\n    }\n  }\n\n  /** Handler for rrweb.record.onMutation */\n   __init6() {this._onMutationHandler = (mutations) => {\n    const count = mutations.length;\n\n    const mutationLimit = this._options.mutationLimit;\n    const mutationBreadcrumbLimit = this._options.mutationBreadcrumbLimit;\n    const overMutationLimit = mutationLimit && count > mutationLimit;\n\n    // Create a breadcrumb if a lot of mutations happen at the same time\n    // We can show this in the UI as an information with potential performance improvements\n    if (count > mutationBreadcrumbLimit || overMutationLimit) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.mutations',\n        data: {\n          count,\n          limit: overMutationLimit,\n        },\n      });\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Stop replay if over the mutation limit\n    if (overMutationLimit) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({ reason: 'mutationLimit', forceFlush: this.recordingMode === 'session' });\n      return false;\n    }\n\n    // `true` means we use the regular mutation handling by rrweb\n    return true;\n  };}\n}\n\nfunction getOption(selectors, defaultSelectors) {\n  return [\n    ...selectors,\n    // sentry defaults\n    ...defaultSelectors,\n  ].join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nfunction getPrivacyOptions({ mask, unmask, block, unblock, ignore }) {\n  const defaultBlockedElements = ['base[href=\"/\"]'];\n\n  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]']);\n  const unmaskSelector = getOption(unmask, []);\n\n  const options = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n\n    blockSelector: getOption(block, ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements]),\n    unblockSelector: getOption(unblock, []),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]']),\n  };\n\n  return options;\n}\n\n/**\n * Masks an attribute if necessary, otherwise return attribute value as-is.\n */\nfunction maskAttribute({\n  el,\n  key,\n  maskAttributes,\n  maskAllText,\n  privacyOptions,\n  value,\n}) {\n  // We only mask attributes if `maskAllText` is true\n  if (!maskAllText) {\n    return value;\n  }\n\n  // unmaskTextSelector takes precendence\n  if (privacyOptions.unmaskTextSelector && el.matches(privacyOptions.unmaskTextSelector)) {\n    return value;\n  }\n\n  if (\n    maskAttributes.includes(key) ||\n    // Need to mask `value` attribute for `<input>` if it's a button-like\n    // type\n    (key === 'value' && el.tagName === 'INPUT' && ['submit', 'button'].includes(el.getAttribute('type') || ''))\n  ) {\n    return value.replace(/[\\S]/g, '*');\n  }\n\n  return value;\n}\n\nconst MEDIA_SELECTORS =\n  'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\n\nconst DEFAULT_NETWORK_HEADERS = ['content-length', 'content-type', 'accept'];\n\nlet _initialized = false;\n\n/**\n * Sentry integration for [Session Replay](https://sentry.io/for/session-replay/).\n *\n * See the [Replay documentation](https://docs.sentry.io/platforms/javascript/guides/session-replay/) for more information.\n *\n * @example\n *\n * ```\n * Sentry.init({\n *   dsn: '__DSN__',\n *   integrations: [Sentry.replayIntegration()],\n * });\n * ```\n */\nconst replayIntegration = ((options) => {\n  return new Replay(options);\n}) ;\n\n/**\n * Replay integration\n *\n * TODO: Rewrite this to be functional integration\n * Exported for tests.\n */\nclass Replay  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'Replay';}\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n\n   constructor({\n    flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n    flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n    minReplayDuration = MIN_REPLAY_DURATION,\n    maxReplayDuration = MAX_REPLAY_DURATION,\n    stickySession = true,\n    useCompression = true,\n    workerUrl,\n    _experiments = {},\n    maskAllText = true,\n    maskAllInputs = true,\n    blockAllMedia = true,\n\n    mutationBreadcrumbLimit = 750,\n    mutationLimit = 10000,\n\n    slowClickTimeout = 7000,\n    slowClickIgnoreSelectors = [],\n\n    networkDetailAllowUrls = [],\n    networkDetailDenyUrls = [],\n    networkCaptureBodies = true,\n    networkRequestHeaders = [],\n    networkResponseHeaders = [],\n\n    mask = [],\n    maskAttributes = ['title', 'placeholder'],\n    unmask = [],\n    block = [],\n    unblock = [],\n    ignore = [],\n    maskFn,\n\n    beforeAddRecordingEvent,\n    beforeErrorSampling,\n  } = {}) {\n    this.name = Replay.id;\n\n    const privacyOptions = getPrivacyOptions({\n      mask,\n      unmask,\n      block,\n      unblock,\n      ignore,\n    });\n\n    this._recordingOptions = {\n      maskAllInputs,\n      maskAllText,\n      maskInputOptions: { password: true },\n      maskTextFn: maskFn,\n      maskInputFn: maskFn,\n      maskAttributeFn: (key, value, el) =>\n        maskAttribute({\n          maskAttributes,\n          maskAllText,\n          privacyOptions,\n          key,\n          value,\n          el,\n        }),\n\n      ...privacyOptions,\n\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true,\n      errorHandler: (err) => {\n        try {\n          err.__rrweb__ = true;\n        } catch (error) {\n          // ignore errors here\n          // this can happen if the error is frozen or does not allow mutation for other reasons\n        }\n      },\n    };\n\n    this._initialOptions = {\n      flushMinDelay,\n      flushMaxDelay,\n      minReplayDuration: Math.min(minReplayDuration, MIN_REPLAY_DURATION_LIMIT),\n      maxReplayDuration: Math.min(maxReplayDuration, MAX_REPLAY_DURATION),\n      stickySession,\n      useCompression,\n      workerUrl,\n      blockAllMedia,\n      maskAllInputs,\n      maskAllText,\n      mutationBreadcrumbLimit,\n      mutationLimit,\n      slowClickTimeout,\n      slowClickIgnoreSelectors,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders: _getMergedNetworkHeaders(networkRequestHeaders),\n      networkResponseHeaders: _getMergedNetworkHeaders(networkResponseHeaders),\n      beforeAddRecordingEvent,\n      beforeErrorSampling,\n\n      _experiments,\n    };\n\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector\n        ? MEDIA_SELECTORS\n        : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n   get _isInitialized() {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n   set _isInitialized(value) {\n    _initialized = value;\n  }\n\n  /**\n   * Setup and initialize replay container\n   */\n   setupOnce() {\n    if (!isBrowser()) {\n      return;\n    }\n\n    this._setup();\n\n    // Once upon a time, we tried to create a transaction in `setupOnce` and it would\n    // potentially create a transaction before some native SDK integrations have run\n    // and applied their own global event processor. An example is:\n    // https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n    //\n    // So we call `this._initialize()` in next event loop as a workaround to wait for other\n    // global event processors to finish. This is no longer needed, but keeping it\n    // here to avoid any future issues.\n    setTimeout(() => this._initialize());\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will throw an error if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n   start() {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.start();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, until an error occurs.\n   */\n   startBuffering() {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.startBuffering();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n   stop() {\n    if (!this._replay) {\n      return Promise.resolve();\n    }\n\n    return this._replay.stop({ forceFlush: this._replay.recordingMode === 'session' });\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n   flush(options) {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return Promise.resolve();\n    }\n\n    return this._replay.sendBufferedReplayOrFlush(options);\n  }\n\n  /**\n   * Get the current session ID.\n   */\n   getReplayId() {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n\n    return this._replay.getSessionId();\n  }\n\n  /**\n   * Initializes replay.\n   */\n   _initialize() {\n    if (!this._replay) {\n      return;\n    }\n\n    // We have to run this in _initialize, because this runs in setTimeout\n    // So when this runs all integrations have been added\n    // Before this, we cannot access integrations on the client,\n    // so we need to mutate the options here\n    this._maybeLoadFromReplayCanvasIntegration();\n\n    this._replay.initializeSampling();\n  }\n\n  /** Setup the integration. */\n   _setup() {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    const finalOptions = loadReplayOptionsFromClient(this._initialOptions);\n\n    this._replay = new ReplayContainer({\n      options: finalOptions,\n      recordingOptions: this._recordingOptions,\n    });\n  }\n\n  /** Get canvas options from ReplayCanvas integration, if it is also added. */\n   _maybeLoadFromReplayCanvasIntegration() {\n    // To save bundle size, we skip checking for stuff here\n    // and instead just try-catch everything - as generally this should all be defined\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    try {\n      const client = getClient();\n      const canvasIntegration = client.getIntegrationByName('ReplayCanvas')\n\n;\n      if (!canvasIntegration) {\n        return;\n      }\n\n      this._replay['_canvas'] = canvasIntegration.getOptions();\n    } catch (e) {\n      // ignore errors here\n    }\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n  }\n}Replay.__initStatic();\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions) {\n  const client = getClient();\n  const opt = client && (client.getOptions() );\n\n  const finalOptions = {\n    sessionSampleRate: 0,\n    errorSampleRate: 0,\n    ...dropUndefinedKeys(initialOptions),\n  };\n\n  if (!opt) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('SDK client is not available.');\n    });\n    return finalOptions;\n  }\n\n  const replaysSessionSampleRate = parseSampleRate(opt.replaysSessionSampleRate);\n  const replaysOnErrorSampleRate = parseSampleRate(opt.replaysOnErrorSampleRate);\n\n  if (replaysSessionSampleRate == null && replaysOnErrorSampleRate == null) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.',\n      );\n    });\n  }\n\n  if (replaysSessionSampleRate != null) {\n    finalOptions.sessionSampleRate = replaysSessionSampleRate;\n  }\n\n  if (replaysOnErrorSampleRate != null) {\n    finalOptions.errorSampleRate = replaysOnErrorSampleRate;\n  }\n\n  return finalOptions;\n}\n\nfunction _getMergedNetworkHeaders(headers) {\n  return [...DEFAULT_NETWORK_HEADERS, ...headers.map(header => header.toLowerCase())];\n}\n\n/**\n * This is a small utility to get a type-safe instance of the Replay integration.\n */\nfunction getReplay() {\n  const client = getClient();\n  return client && client.getIntegrationByName('Replay');\n}\n\nexport { getReplay, replayIntegration };\n//# sourceMappingURL=index.js.map\n"],"names":["canvasService","canvasCtx","errorHandler","wrappedEmit","_takeFullSnapshot","handlers","NodeType","EventType2","IncrementalSource2","MouseInteractions2","PointerTypes2","NodeType$1","WINDOW","_sentry_utils__WEBPACK_IMPORTED_MODULE_0__","GLOBAL_OBJ","REPLAY_SESSION_KEY","UNABLE_TO_SEND_REPLAY","_optionalChain$5","ops","lastAccessLHS","value","i","length","op","fn","args","call","undefined","isShadowRoot","n","host","_","_2","shadowRoot","isNativeShadowDom","Object","prototype","toString","stringifyStylesheet","s","cssText","rules","cssRules","Array","from","stringifyRule","join","includes","replace","error","rule","importStringified","styleSheet","escapeImportStatement","split","statement","JSON","stringify","href","layerName","push","supportsText","media","mediaText","isCSSStyleRule","selectorText","cssStringified","Mirror","constructor","idNodeMap","Map","nodeMetaMap","WeakMap","getId","lhs","_3","getMeta","_4","_5","id","getNode","get","getIds","keys","removeNodeFromMap","delete","childNodes","forEach","childNode","has","hasNode","node","add","meta","set","oldNode","reset","shouldMaskInput","maskInputOptions","tagName","type","Boolean","toLowerCase","maskInputValue","isMasked","element","maskInputFn","text","repeat","str","toUpperCase","ORIGINAL_ATTRIBUTE_NAME","getInputType","hasAttribute","getInputValue","el","getAttribute","_id","tagNameRegex","genId","URL_IN_CSS_REF","URL_PROTOCOL_MATCH","URL_WWW_MATCH","DATA_URI","absoluteToStylesheet","origin","quote1","path1","quote2","path2","path3","filePath","maybeQuote","test","url","indexOf","slice","stack","parts","part","pop","SRCSET_NOT_SPACES","SRCSET_COMMAS_OR_SPACES","absoluteToDoc","doc","attributeValue","trim","a","createElement","getHref","document","transformAttribute","name","maskAttributeFn","getAbsoluteSrcsetString","pos","collectCharacters","regEx","chars","match","exec","substring","output","descriptorsStr","inParens","c","charAt","ignoreAttribute","_value","distanceToMatch","matchPredicate","limit","Infinity","distance","nodeType","ELEMENT_NODE","parentNode","createMatchPredicate","className","selector","matches","elementClassMatchesRegex","regex","eIndex","classList","e2","needMaskingText","maskTextClass","maskTextSelector","unmaskTextClass","unmaskTextSelector","maskAllText","parentElement","autocomplete","disallowedAutocompleteValues","maskDistance","unmaskDistance","e","lowerIfExists","maybeAttr","serializeNodeWithId","options","mirror","blockClass","blockSelector","unblockSelector","skipChild","inlineStylesheet","maskTextFn","slimDOMOptions","dataURLOptions","inlineImages","recordCanvas","onSerialize","onIframeLoad","iframeLoadTimeout","onStylesheetLoad","stylesheetLoadTimeout","keepIframeSrcFn","newlyAddedElement","preserveWhiteSpace","_serializedNode","serializeNode","rootId","getRootId","docId","DOCUMENT_NODE","compatMode","Document","DOCUMENT_TYPE_NODE","DocumentType","publicId","systemId","serializeElementNode","isCustomElement","needBlock","_isBlockedElement","contains","getValidTagName","HTMLFormElement","processedTagName","attributes","len","attr","stylesheet","styleSheets","find","rel","_cssText","sheet","innerText","textContent","checked","forceMask","selected","__context","is2DCanvasBlank","canvas","ctx","getContext","x","width","y","height","getImageData","pixelBuffer","Uint32Array","originalGetImageData","Math","min","data","buffer","some","pixel","rr_dataURL","toDataURL","quality","canvasDataURL","blankCanvas","oldValue","image","crossOrigin","recordInlineImage","removeEventListener","naturalWidth","naturalHeight","drawImage","err","console","warn","currentSrc","removeAttribute","complete","addEventListener","rr_mediaState","paused","rr_mediaCurrentTime","currentTime","scrollLeft","rr_scrollLeft","scrollTop","rr_scrollTop","getBoundingClientRect","class","rr_width","rr_height","src","contentDocument","rr_src","customElements","Element","isSVG","isSVGElement","ownerSVGElement","isCustom","TEXT_NODE","serializeTextNode","parentTagName","isStyle","isScript","isTextarea","nextSibling","previousSibling","_6","_7","_8","textarea","Text","CDATA_SECTION_NODE","CDATA","COMMENT_NODE","Comment","slimDOMExcluded","sn","comment","script","as","endsWith","headFavicon","headMetaDescKeywords","headMetaSocial","property","headMetaRobots","headMetaHttpEquiv","headMetaAuthorship","headMetaVerification","serializedNode","assign","recordChild","isShadowHost","headWhitespace","bypassOptions","childN","serializedChildNode","isElement$1","isShadow","onceIframeLoaded","iframeEl","listener","readyState","win","contentWindow","fired","timer","setTimeout","clearTimeout","blankUrl","location","iframeDoc","serializedIframeNode","onceStylesheetLoaded","link","styleSheetLoadTimeout","styleSheetLoaded","serializedLinkNode","_optionalChain$4","on","target","capture","passive","DEPARTED_MIRROR_ACCESS_WARNING","_mirror","map","throttle$1","func","wait","timeout","previous","now","Date","leading","remaining","context","clearTimeout$1","rest","getImplementation","apply","trailing","setTimeout$1","patch","source","replacement","original","wrapped","defineProperties","__rrweb_original__","enumerable","window","Proxy","Reflect","prop","receiver","nowTimestamp","getWindowScroll","left","scrollingElement","pageXOffset","documentElement","body","top","pageYOffset","_9","_10","_11","_12","_13","_14","getWindowHeight","innerHeight","clientHeight","getWindowWidth","innerWidth","clientWidth","closestElementOfNode","isBlocked","checkAncestors","blockedPredicate","isUnblocked","blockDistance","unblockDistance","isIgnored","legacy_isTouchEvent","event","changedTouches","isSerializedIframe","nodeName","isSerializedStylesheet","hasShadowRoot","_18","getTime","StyleSheetMirror","styleIDMap","idStyleMap","_sentry_utils__WEBPACK_IMPORTED_MODULE_1__","h","newId","getStyle","generateId","getShadowHost","shadowHost","_19","getRootNode","_20","_21","Node","DOCUMENT_FRAGMENT_NODE","inDom","ownerDocument","shadowHostInDom","getRootShadowHost","rootShadowHost","cachedImplementations","cached","impl","sandbox","hidden","head","appendChild","removeChild","bind","EventType","IncrementalSource","MouseInteractions","PointerTypes","DoubleLinkedList","tail","position","current","index","_optionalChain$3","next","addNode","__ln","removeNode","moveKey","parentId","MutationBuffer","frozen","locked","texts","attributeMap","removes","mapRemoves","movedMap","addedSet","Set","movedSet","droppedSet","processMutations","mutations","processMutation","emit","adds","addedIds","addList","getNextId","ns","nextId","pushAdd","currentN","iframeManager","addIframe","stylesheetManager","trackLinkElement","shadowDomManager","addShadowRoot","iframe","childSn","attachIframe","observeAttachShadow","attachLinkElement","shift","isParentRemoved","isAncestorInSet","candidate","tailNode","_node","unhandledNode","payload","filter","attribute","style","diffAsStr","styleDiff","unchangedAsStr","_unchangedStyles","mutationCb","m","attributeName","isInputMasked","item","setAttribute","unattachedDoc","implementation","createHTMLDocument","old","pname","newValue","getPropertyValue","newPriority","getPropertyPriority","addedNodes","genAdds","removedNodes","nodeId","deepDelete","isAncestorRemoved","processedNodeManager","inOtherBuffer","targetId","init","key","freeze","canvasManager","unfreeze","isFrozen","lock","unlock","addsSet","_isParentRemoved","r","size","_isAncestorInSet","callbackWrapper","cb","_optionalChain$2","mutationBuffers","getEventTarget","path","composedPath","initMutationObserver","rootEl","mutationBuffer","mutationObserverCtor","MutationObserver","__rrMutationObserver","angularZoneSymbol","Zone","__symbol__","observer","onMutation","observe","attributeOldValue","characterData","characterDataOldValue","childList","subtree","initScrollObserver","scrollCb","sampling","evt","defaultView","scrollLeftTop","scroll","INPUT_TAGS","lastInputValueMap","getNestedCSSRulePositions","childRule","parentRule","CSSGroupingRule","hasNestedCSSRule","CSSMediaRule","CSSSupportsRule","CSSConditionRule","unshift","parentStyleSheet","getIdAndStyleId","styleMirror","styleId","ownerNode","initAdoptedStyleSheetObserver","hostId","patchTarget","ShadowRoot","originalPropertyDescriptor","getOwnPropertyDescriptor","defineProperty","configurable","sheets","result","_15","_16","adoptStyleSheets","initObservers","o","_hooks","currentWindow","mutationObserver","mousemoveHandler","initMoveObserver","mousemoveCb","timeBaseline","mousemove","threshold","callbackThreshold","mousemoveCallback","positions","wrappedCb","totalOffset","p","timeOffset","updatePosition","clientX","clientY","DragEvent","Drag","MouseEvent","MouseMove","TouchMove","mouseInteractionHandler","initMouseInteractionObserver","mouseInteractionCb","mouseInteraction","disableMap","currentPointerType","getHandler","pointerType","thisEventKey","eventKey","Mouse","Touch","Pen","MouseDown","MouseUp","startsWith","Click","Number","isNaN","eventName","handler","PointerEvent","TouchStart","TouchEnd","scrollHandler","viewportResizeHandler","initViewportResizeObserver","viewportResizeCb","lastH","lastW","inputHandler","initInputObserver","inputCb","ignoreClass","ignoreSelector","userTriggeredOnInput","eventHandler","userTriggered","isTrusted","isChecked","cbWithDedup","querySelectorAll","v","lastInputValue","events","input","propertyDescriptor","HTMLInputElement","hookProperties","HTMLSelectElement","HTMLTextAreaElement","HTMLOptionElement","hookSetter","d","isRevoked","mediaInteractionHandler","initMediaInteractionObserver","mediaInteractionCb","volume","muted","playbackRate","styleSheetObserver","initStyleSheetObserver","styleSheetRuleCb","replaceSync","CSSStyleSheet","insertRule","thisArg","argumentsList","deleteRule","supportedNestedCSSRuleTypes","canMonkeyPatchNestedCSSRule","unmodifiedFunctions","entries","typeKey","adoptedStyleSheetObserver","styleDeclarationObserver","initStyleDeclarationObserver","styleDeclarationCb","ignoreCSSAttributes","setProperty","CSSStyleDeclaration","priority","_17","removeProperty","remove","fontObserver","collectFonts","initFontObserver","fontCb","fontMap","originalFontFace","FontFace","family","descriptors","fontFace","fontSource","Uint8Array","restoreHandler","fonts","selectionObserver","initSelectionObserver","param","selectionCb","collapsed","updateSelection","selection","getSelection","isCollapsed","ranges","count","rangeCount","startContainer","startOffset","endContainer","endOffset","getRangeAt","start","end","customElementObserver","initCustomElementObserver","customElementCb","define","pluginHandlers","plugin","plugins","callback","b","disconnect","CrossOriginIframeMirror","generateIdFn","iframeIdToRemoteIdMap","iframeRemoteIdToIdMap","remoteId","idToRemoteMap","remoteToIdMap","idToRemoteIdMap","getIdToRemoteIdMap","remoteIdToIdMap","getRemoteIdToIdMap","getRemoteId","getRemoteIds","ids","_optionalChain$1","IframeManagerNoop","crossOriginIframeMirror","crossOriginIframeRootIdMap","addLoadListener","IframeManager","iframes","crossOriginIframeMap","recordCrossOriginIframes","crossOriginIframeStyleMirror","handleMessage","loadListener","isAttachIframe","adoptedStyleSheets","message","crossOriginMessageEvent","transformedEvent","transformCrossOriginEvent","isCheckout","FullSnapshot","replaceIdOnNode","patchRootIdOnNode","timestamp","IncrementalSnapshot","Mutation","Meta","Load","DomContentLoaded","Plugin","Custom","replaceIds","ViewportResize","MediaInteraction","MouseInteraction","Scroll","CanvasMutation","Input","StyleSheetRule","StyleDeclaration","replaceStyleIds","Font","Selection","range","AdoptedStyleSheet","styles","iframeMirror","obj","isArray","child","ShadowDomManagerNoop","ShadowDomManager","shadowDoms","WeakSet","restoreHandlers","patchAttachShadow","iframeElement","manager","option","CanvasManagerNoop","snapshot","StylesheetManager","trackedLinkElements","adoptedStyleSheetCb","linkEl","trackStylesheetInLinkElement","adoptedStyleSheetData","styleIds","CSSRule","ProcessedNodeManager","nodeMap","loop","periodicallyClear","onRequestAnimationFrame","clear","thisBuffer","buffers","destroy","record","lastFullSnapshotEvent","checkoutEveryNms","checkoutEveryNth","maskAllInputs","_maskInputOptions","_slimDOMOptions","maxCanvasSize","packFn","mousemoveWait","recordAfter","getCanvasManager","inEmittingFrame","parent","passEmitsToParent","color","date","email","month","number","search","tel","time","week","select","radio","checkbox","polyfill","NodeList","DOMTokenList","incrementalSnapshotCount","eventProcessor","_sentry_utils__WEBPACK_IMPORTED_MODULE_2__","buf","postMessage","exceedCount","exceedTime","takeFullSnapshot","wrappedMutationEmit","wrappedScrollEmit","wrappedCanvasMutationEmit","__RRWEB_EXCLUDE_IFRAME__","getMirror","nodeMirror","_getCanvasManager","getCanvasManagerFn","__RRWEB_EXCLUDE_SHADOW_DOM__","slimDOM","initialOffset","canvasMutationCb","CustomElement","timestampToMs","isMs","timestampToS","addBreadcrumbEvent","replay","breadcrumb","category","triggerUserActivity","checkAndHandleExpiredSession","addUpdate","throttledAddEvent","tag","_sentry_utils__WEBPACK_IMPORTED_MODULE_3__","Fv","getClosestInteractive","closestInteractive","closest","getClickTargetNode","getTargetNode","ClickDetector","slowClickConfig","_addBreadcrumbEvent","_lastMutation","_lastScroll","_clicks","_timeout","_threshold","_scollTimeout","scrollTimeout","_replay","_ignoreSelector","addListeners","cleanupWindowOpen","nowInSeconds","_sentry_utils__WEBPACK_IMPORTED_MODULE_4__","hl","originalWindowOpen","splice","_teardown","removeListeners","_checkClickTimeout","handleClick","ignoreElement","SLOW_CLICK_TAGS","newClick","clickBreadcrumb","clickCount","click","abs","_scheduleCheckClicks","registerMutation","registerScroll","registerClick","_handleMultiClick","_getClicks","_checkClicks","timedOutClicks","mutationAfter","scrollAfter","_generateBreadcrumbs","hadScroll","hadMutation","timeAfterClickMs","endReason","route","getCurrentRoute","metric","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_5__","iK","createBreadcrumb","ATTRIBUTES_TO_RECORD","handleDomListener","isEnabled","handleDom","handlerData","getDomTarget","isClick","_sentry_utils__WEBPACK_IMPORTED_MODULE_6__","Rt","maxStringLength","getBaseDomBreadcrumb","clickDetector","altKey","metaKey","ctrlKey","shiftKey","getAttributesToRecord","normalizedKey","ENTRY_TYPES","resource","entry","entryType","initiatorType","responseEnd","startTime","decodedBodySize","encodedBodySize","responseStatus","transferSize","getAbsoluteTime","statusCode","paint","duration","navigation","domComplete","domContentLoadedEventStart","domContentLoadedEventEnd","domInteractive","loadEventStart","loadEventEnd","redirectCount","createPerformanceEntry","_sentry_utils__WEBPACK_IMPORTED_MODULE_7__","Z1","performance","timeOrigin","EventBufferSizeExceededError","Error","EventBufferArray","_totalSize","hasCheckout","hasEvents","addEvent","eventSize","finish","Promise","resolve","eventsRet","getEarliestTimestamp","sort","WorkerHandler","worker","_worker","ensureReady","_ensureReadyPromise","reject","success","once","terminate","method","arg","_getAndIncrementId","response","EventBufferCompressionWorker","_earliestTimestamp","_sendEventToWorker","_finishRequest","then","EventBufferProxy","_fallback","_compression","_used","_ensureWorkerIsLoadedPromise","_ensureWorkerIsLoaded","ensureWorkerIsLoaded","_switchToCompressionWorker","addEventPromises","all","hasSessionStorage","sessionStorage","isSampled","sampleRate","random","makeSession","session","_sentry_utils__WEBPACK_IMPORTED_MODULE_11__","DM","started","lastActivity","segmentId","sampled","previousSessionId","saveSession","setItem","createSession","sessionSampleRate","allowBuffering","stickySession","isExpired","initialTime","expiry","targetTime","isSessionExpired","maxReplayDuration","sessionIdleExpire","shouldRefreshSession","loadOrCreateSession","traceInternals","sessionOptions","existingSession","fetchSession","sessionStringFromStorage","getItem","sessionObj","parse","addEventSync","shouldAddEvent","_addEvent","eventBuffer","recordingMode","replayOptions","getOptions","eventAfterPossibleCallback","maybeApplyCallback","beforeAddRecordingEvent","stop","reason","client","_sentry_core__WEBPACK_IMPORTED_MODULE_12__","s3","recordDroppedEvent","isPaused","timestampInMs","timeouts","sessionIdlePause","initialTimestamp","_experiments","isTransactionEvent","isFeedbackEvent","isBreadcrumbWithCategory","createPerformanceSpans","description","startTimestamp","endTimestamp","addNetworkBreadcrumb","_sentry_core__WEBPACK_IMPORTED_MODULE_13__","W","getBodySize","textEncoder","TextEncoder","encode","URLSearchParams","FormData","formDataStr","_serializeFormData","Blob","ArrayBuffer","byteLength","parseContentLengthHeader","header","parseInt","getBodyString","mergeWarning","info","warning","headers","_meta","warnings","newMeta","existingWarnings","makeNetworkReplayBreadcrumb","request","Jr","buildSkippedNetworkRequestOrResponse","bodySize","buildNetworkRequestOrResponse","normalizedBody","normalizeNetworkBody","exceedsSizeLimit","isProbablyJson","_strIsProbablyJson","first","last","truncatedBody","e3","getAllowedHeaders","allowedHeaders","reduce","filteredHeaders","formData","urlMatches","urls","fullUrl","getFullUrl","baseURI","fixedUrl","URL","_sentry_utils__WEBPACK_IMPORTED_MODULE_14__","U0","captureFetchBreadcrumbToReplay","hint","_prepareFetchData","status_code","request_body_size","requestBodySize","response_body_size","responseBodySize","captureDetails","networkDetailAllowUrls","networkDetailDenyUrls","_getRequestInfo","networkCaptureBodies","networkRequestHeaders","fetchArgs","getHeadersFromOptions","bodyStr","_getFetchRequestArgBody","_getResponseInfo","networkResponseHeaders","getAllHeaders","bodyText","_parseFetchResponseBody","getResponseData","res","_tryCloneResponse","clone","_getResponseText","txt","finally","allHeaders","Headers","captureXhrBreadcrumbToReplay","_prepareXhrData","xhr","xhrInfo","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_15__","xU","request_headers","getResponseHeaders","getAllResponseHeaders","acc","line","requestBody","requestWarning","responseBody","responseWarning","_getXhrResponseBody","errors","responseText","_parseXhrResponse","responseType","outerHTML","addMemoryEntry","createMemoryEntry","memoryEntry","jsHeapSizeLimit","totalJSHeapSize","usedJSHeapSize","memory","prepareReplayEvent","scope","replayId","event_id","eventHint","integrations","_integrations","preparedEvent","_sentry_core__WEBPACK_IMPORTED_MODULE_20__","R","aF","platform","metadata","getSdkMetadata","version","sdk","sendReplayRequest","recordingData","segment_id","eventContext","tunnel","preparedRecordingData","prepareRecordingData","payloadWithSequence","replayHeaders","sequence","enc","errorIds","traceIds","nZ","transport","getTransport","dsn","getDsn","_sentry_utils__WEBPACK_IMPORTED_MODULE_21__","WD","baseEvent","replay_start_timestamp","error_ids","trace_ids","replay_id","replay_type","replayEvent","sdkProcessingMetadata","envelope","_sentry_utils__WEBPACK_IMPORTED_MODULE_19__","Jd","Cd","HY","send","cause","TransportStatusCodeError","rateLimits","_sentry_utils__WEBPACK_IMPORTED_MODULE_22__","WG","Q","RateLimitError","sendReplay","replayData","retryConfig","interval","_sentry_core__WEBPACK_IMPORTED_MODULE_18__","_retryCount","THROTTLED","ReplayContainer","recordingOptions","__init","__init2","__init3","__init4","__init5","__init6","performanceEntries","replayPerformanceEntries","_lastActivity","_isEnabled","_isPaused","_hasInitializedCoreListeners","_context","initialUrl","_recordingOptions","_options","_debouncedFlush","debounce","callbackReturnValue","timerId","maxTimerId","maxWait","max","invokeFunc","cancelTimers","debounced","cancel","flush","_flush","flushMinDelay","flushMaxDelay","_throttledAddEvent","throttle","maxCount","durationSeconds","counter","_cleanup","_getTotalCount","values","isThrottled","floor","wasThrottled","slowClickTimeout","slowClickIgnoreSelectors","isRecordingCanvas","_canvas","initializeSampling","errorSampleRate","_initializeSessionForSampling","_handleException","_initializeRecording","_updateUserActivity","startBuffering","startRecording","hadFirstEvent","canvasOptions","_stopRecording","_isCheckout","updateClickDetectorForRecordingEvent","HTMLElement","setInitialState","createOptionsEvent","shouldRecordCanvas","useCompressionOption","useCompression","blockAllMedia","networkDetailHasUrls","networkRequestHasHeaders","networkResponseHasHeaders","earliestEvent","_onMutationHandler","stopRecording","forceFlush","_removeListeners","force","deleteSession","removeItem","pause","resume","_checkSession","sendBufferedReplayOrFlush","continueRecording","flushImmediate","activityTime","hasStoppedRecording","_updateSessionActivity","_maybeSaveSession","cbResult","updateUserActivity","conditionalFlush","cancelFlush","getSessionId","urlPath","pathname","hash","_clearContext","lastActiveSpan","_sentry_core__WEBPACK_IMPORTED_MODULE_23__","HN","lastRootSpan","Gx","XU","_sentry_core__WEBPACK_IMPORTED_MODULE_24__","Zj","createEventBuffer","workerUrl","customWorkerUrl","Worker","_loadWorker","__SENTRY_EXCLUDE_REPLAY_WORKER__","createObjectURL","_addListeners","currentSession","_refreshSession","_handleVisibilityChange","_handleWindowBlur","_handleWindowFocus","_handleKeyboardEvent","addGlobalListeners","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_16__","O","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_17__","handleHistory","to","handleBreadcrumbs","beforeAddBreadcrumb","normalizeConsoleBreadcrumb","arguments","isTruncated","normalizedArgs","normalizedArg","stringified","handleNetworkBreadcrumbs","beforeAddNetworkBreadcrumb","_isXhrBreadcrumb","enrichXhrBreadcrumb","reqSize","resSize","getResponseHeader","_getBodySize","_isFetchBreadcrumb","enrichFetchBreadcrumb","breadcrumbs","contexts","feedback","feedbackId","exception","originalException","__rrweb__","captureExceptions","isErrorEventSampled","tags","Qy","handleHydrationError","exceptionValue","sendResponse","handleTransactionEvent","replayContext","trace","trace_id","handleErrorEvent","beforeErrorSampling","dsc","span","feedbackEvent","includeReplay","_performanceCleanupCallback","setupPerformanceObserver","addPerformanceEntry","onEntries","clearCallbacks","_sentry_internal_browser_utils__WEBPACK_IMPORTED_MODULE_8__","_j","$A","getLargestContentfulPaint","lastEntry","clearCallback","visibilityState","_doChangeToForegroundTasks","_doChangeToBackgroundTasks","handleKeyboardEvent","getKeyboardBreadcrumb","isContentEditable","hasModifierKey","isCharacterKey","baseBreadcrumb","_createCustomBreadcrumb","_addPerformanceEntries","createPerformanceEntries","concat","_updateInitialTimestampFromEventBuffer","_popEventContext","_runFlush","tooShort","minReplayDuration","tooLong","_flushLock","mutationLimit","mutationBreadcrumbLimit","overMutationLimit","getOption","selectors","defaultSelectors","MEDIA_SELECTORS","DEFAULT_NETWORK_HEADERS","_initialized","replayIntegration","Replay","__initStatic","mask","maskAttributes","unmask","block","unblock","ignore","maskFn","privacyOptions","getPrivacyOptions","password","maskAttribute","_initialOptions","_getMergedNetworkHeaders","_isInitialized","_sentry_utils__WEBPACK_IMPORTED_MODULE_25__","j","setupOnce","_setup","_initialize","getReplayId","_maybeLoadFromReplayCanvasIntegration","finalOptions","loadReplayOptionsFromClient","initialOptions","opt","_sentry_utils__WEBPACK_IMPORTED_MODULE_9__","Cf","replaysSessionSampleRate","_sentry_core__WEBPACK_IMPORTED_MODULE_26__","replaysOnErrorSampleRate","canvasIntegration","getIntegrationByName"],"sourceRoot":""}